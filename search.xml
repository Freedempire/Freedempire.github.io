<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>The Complete JavaScript Course - Fundamentals</title>
      <link href="/posts/The-Complete-JavaScript-Course-Fundamentals/"/>
      <url>/posts/The-Complete-JavaScript-Course-Fundamentals/</url>
      
        <content type="html"><![CDATA[<style>    #intro {        text-align: center;    }    #intro .title {        font-size: 1.5rem;        font-weight: 700;        color: rgb(31, 45, 61);    }    #intro .subtitle {        font-size: 1.2rem;        font-weight: 700;        color: rgb(31, 45, 61);    }</style><div id="intro">    <p class="title">Fundamentals</h2>    <p class="subtitle">The Complete JavaScript Course</h3></div><p>JavaScript is a high-level, object-oriented, multi-paradigm programming language.</p><p>JavaScript is a cross-platform, object-oriented scripting language used to make webpages interactive (e.g., having complex animations, clickable buttons, popup menus, etc.). There are also more advanced server side versions of JavaScript such as Node.js, which allow you to add more functionality to a website than downloading files. Inside a host environment (for example, a web browser), JavaScript can be connected to the objects of its environment to provide programmatic control over them.</p><p>JavaScript contains a standard library of objects, such as <code>Array</code>, <code>Date</code>, and <code>Math</code>, and a core set of language elements such as operators, control structures, and statements. Core JavaScript can be extended for a variety of purposes by supplementing it with additional objects; for example:</p><ul><li>Client-side JavaScript extends the core language by supplying objects to control a browser and its Document Object Model (DOM). For example, client-side extensions allow an application to place elements on an HTML form and respond to user events such as mouse clicks, form input, and page navigation.</li><li>Server-side JavaScript extends the core language by supplying objects relevant to running JavaScript on a server. For example, server-side extensions allow an application to communicate with a database, provide continuity of information from one invocation to another of the application, or perform file manipulations on a server.</li></ul><p>This means that in the browser, JavaScript can change the way the webpage (DOM) looks. And, likewise, Node.js JavaScript on the server can respond to custom requests sent by code executed in the browser.</p><h2 id="What-makes-JavaScript-unique"><a href="#What-makes-JavaScript-unique" class="headerlink" title="What makes JavaScript unique"></a>What makes JavaScript unique</h2><p>There are at least three great things about JavaScript:</p><ul><li>Full integration with HTML&#x2F;CSS.</li><li>Simple things are done simply.</li><li>Supported by all major browsers and enabled by default.</li></ul><p>JavaScript is the only browser technology that combines these three things. That’s why it’s the most widespread tool for creating browser interfaces.</p><p>JavaScript can also be used to create servers, mobile applications, etc.</p><h2 id="The-“script”-tag"><a href="#The-“script”-tag" class="headerlink" title="The “script” tag"></a>The “script” tag</h2><p>JavaScript programs can be inserted almost anywhere into an HTML document using the <code>&lt;script&gt;</code> tag.</p><p>The <code>&lt;script&gt;</code> tag contains JavaScript code which is automatically executed when the browser processes the tag.</p><p>The old HTML standard, HTML4, required a script to have a <code>type</code>. Usually it was <code>type=&quot;text/javascript&quot;</code>. It’s not required anymore.</p><h2 id="External-scripts"><a href="#External-scripts" class="headerlink" title="External scripts"></a>External scripts</h2><p>If we have a lot of JavaScript code, we can put it into a separate file.</p><p>Script files are attached to HTML with the <code>src</code> attribute:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/path/to/script.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>If <code>src</code> is set, the script content is ignored.</p><p>To attach several scripts, use multiple tags.</p><h2 id="Code-structures"><a href="#Code-structures" class="headerlink" title="Code structures"></a>Code structures</h2><p>JavaScript is case-sensitive and uses the Unicode character set.</p><h3 id="Expressions"><a href="#Expressions" class="headerlink" title="Expressions"></a>Expressions</h3><p>An expression is a <em>value</em>, or anything that executes and ends up being a <em>value</em>.</p><p>There are two types of expressions:</p><ul><li>those that have side effects (such as assigning values): The expression <code>x = 7</code> uses the <code>=</code> operator to assign the value <code>7</code> to the variable <code>x</code>. The expression itself evaluates to <code>7</code>.</li><li>those that purely evaluate: The expression <code>3 + 4</code> uses the <code>+</code> operator to add <code>3</code> and <code>4</code> together and produces a value, <code>7</code>. However, if it’s not eventually part of a bigger construct (for example, a variable declaration like <code>const z = 3 + 4</code>), its result will be immediately discarded.</li></ul><h3 id="Statements"><a href="#Statements" class="headerlink" title="Statements"></a>Statements</h3><p>A statement (inline statement, block statement) is a group of expressions and&#x2F;or statements that you design to carry out a task or an <em>action</em>.</p><p>Any statement that can return a value is automatically qualified to be used as an expression.</p><p>Any JavaScript expression is also a statement.</p><h3 id="Semicolons"><a href="#Semicolons" class="headerlink" title="Semicolons"></a>Semicolons</h3><p>The semicolon (<code>;</code>) character is used to separate statements in JavaScript code.</p><p>A semicolon may be omitted in most cases when a line break exists. In most cases, JavaScript interprets the line break as an “implicit” semicolon. This is called an <strong>automatic semicolon insertion</strong>.</p><h3 id="Comments"><a href="#Comments" class="headerlink" title="Comments"></a>Comments</h3><p>One-line comments start with two forward slash characters <code>//</code>. It may occupy a full line of its own or follow a statement.</p><p>Multiline comments start with a forward slash and an asterisk <code>/*</code> and end with an asterisk and a forward slash <code>*/</code>. Nested comments are not supported.</p><p>You might also see a third type of comment syntax at the start of some JavaScript files, which looks something like this: <code>#!/usr/bin/env node</code>. This is called hashbang comment syntax, and is a special comment used to specify the path to a particular JavaScript engine that should execute the script.</p><h2 id="Strict-mode"><a href="#Strict-mode" class="headerlink" title="Strict mode"></a>Strict mode</h2><p>JavaScript’s strict mode is a way to opt in to a restricted variant of JavaScript, thereby implicitly opting-out of “sloppy mode”. Strict mode isn’t just a subset: it intentionally has different semantics from normal code.</p><p>Strict mode makes several changes to normal JavaScript semantics:</p><ul><li>Eliminates some JavaScript silent errors by changing them to throw errors.</li><li>Fixes mistakes that make it difficult for JavaScript engines to perform optimizations: strict mode code can sometimes be made to run faster than identical code that’s not strict mode.</li><li>Prohibits some syntax likely to be defined in future versions of ECMAScript.</li></ul><h3 id="Invoking-strict-mode"><a href="#Invoking-strict-mode" class="headerlink" title="Invoking strict mode"></a>Invoking strict mode</h3><p>Strict mode applies to entire <em>scripts</em> or to individual <em>functions</em>. It doesn’t apply to block statements enclosed in <code>&#123;&#125;</code> braces; attempting to apply it to such contexts does nothing.</p><p>To invoke strict mode for an entire <em>script</em>, put the exact statement <code>&quot;use strict&quot;;</code> before any other statements.</p><p>To invoke strict mode for a <em>function</em>, put the exact statement <code>&quot;use strict&quot;;</code> in the function’s body before any other statements.</p><p>The entire contents of JavaScript <em>modules</em> are automatically in strict mode, with no statement needed to initiate it.</p><p>All parts of a <em>class</em>‘s body are strict mode code, including both class declarations and class expressions.</p><h3 id="Changes-in-strict-mode"><a href="#Changes-in-strict-mode" class="headerlink" title="Changes in strict mode"></a>Changes in strict mode</h3><p>Strict mode changes both <em>syntax</em> and <em>runtime behavior</em>.</p><h4 id="Converting-mistakes-into-errors-as-syntax-errors-or-at-runtime"><a href="#Converting-mistakes-into-errors-as-syntax-errors-or-at-runtime" class="headerlink" title="Converting mistakes into errors (as syntax errors or at runtime)"></a>Converting mistakes into errors (as syntax errors or at runtime)</h4><h5 id="Assigning-to-undeclared-variables"><a href="#Assigning-to-undeclared-variables" class="headerlink" title="Assigning to undeclared variables"></a>Assigning to undeclared variables</h5><p>In sloppy mode, mistyping a variable in an assignment creates a new property on the global object and continues to “work”. In strict mode, assignments which would accidentally create global variables throw an error.</p><h5 id="Failing-to-assign-to-object-properties"><a href="#Failing-to-assign-to-object-properties" class="headerlink" title="Failing to assign to object properties"></a>Failing to assign to object properties</h5><p>There are three ways to fail a property assignment:</p><ul><li>assignment to a non-writable data property</li><li>assignment to a getter-only accessor property</li><li>assignment to a new property on a non-extensible object</li></ul><h5 id="Failing-to-delete-object-properties"><a href="#Failing-to-delete-object-properties" class="headerlink" title="Failing to delete object properties"></a>Failing to delete object properties</h5><p>Attempts to delete a non-configurable or otherwise undeletable property throw in strict mode (where before the attempt would have no effect). Strict mode also forbids deleting plain names. If the name is a configurable global property, prefix it with <code>globalThis</code> to delete it.</p><h5 id="Duplicate-parameter-names"><a href="#Duplicate-parameter-names" class="headerlink" title="Duplicate parameter names"></a>Duplicate parameter names</h5><p>Strict mode requires that function parameter names be unique. In sloppy mode, the last duplicated argument hides previous identically-named arguments.</p><h5 id="Legacy-octal-literals"><a href="#Legacy-octal-literals" class="headerlink" title="Legacy octal literals"></a>Legacy octal literals</h5><p>Strict mode forbids a 0-prefixed octal literal or octal escape sequence. In sloppy mode, a number beginning with a <code>0</code>, such as <code>0644</code>, is interpreted as an octal number (<code>0644 === 420</code>), if all digits are smaller than 8. The standardized way to denote octal literals is via the <code>0o</code> prefix.</p><h5 id="Setting-properties-on-primitive-values"><a href="#Setting-properties-on-primitive-values" class="headerlink" title="Setting properties on primitive values"></a>Setting properties on primitive values</h5><p>Accessing a property on a primitive implicitly creates a wrapper object that’s unobservable, so in sloppy mode, setting properties is ignored (no-op). In strict mode, a <code>TypeError</code> is thrown.</p><h5 id="Duplicate-property-names"><a href="#Duplicate-property-names" class="headerlink" title="Duplicate property names"></a>Duplicate property names</h5><p>Duplicate property names used to be considered a <code>SyntaxError</code> in strict mode. With the introduction of computed property names, making duplication possible at runtime, this restriction was removed in ES2015.</p><h4 id="Simplifying-scope-management"><a href="#Simplifying-scope-management" class="headerlink" title="Simplifying scope management"></a>Simplifying scope management</h4><h5 id="Removal-of-the-with-statement"><a href="#Removal-of-the-with-statement" class="headerlink" title="Removal of the with statement"></a>Removal of the <code>with</code> statement</h5><p>The problem with <code>with</code> is that any name inside the block might map either to a property of the object passed to it, or to a variable in surrounding (or even global) scope, at runtime; it’s impossible to know which beforehand. Strict mode makes <code>with</code> a syntax error, so there’s no chance for a name in a <code>with</code> to refer to an unknown location at runtime.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> x = <span class="number">17</span>;</span><br><span class="line"><span class="keyword">with</span> (obj) &#123;</span><br><span class="line">  <span class="comment">// Syntax error</span></span><br><span class="line">  <span class="comment">// If this weren&#x27;t strict mode, would this be const x, or</span></span><br><span class="line">  <span class="comment">// would it instead be obj.x? It&#x27;s impossible in general</span></span><br><span class="line">  <span class="comment">// to say without running the code, so the name can&#x27;t be</span></span><br><span class="line">  <span class="comment">// optimized.</span></span><br><span class="line">  x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Non-leaking-eval"><a href="#Non-leaking-eval" class="headerlink" title="Non-leaking eval"></a>Non-leaking <code>eval</code></h5><p>In strict mode, <code>eval</code> does not introduce new variables into the surrounding scope. In sloppy mode, <code>eval(&quot;var x;&quot;)</code> introduces a variable <code>x</code> into the surrounding function or the global scope. In strict mode, <code>eval</code> creates variables only for the code being evaluated, so <code>eval</code> can’t affect whether a name refers to an outer variable or some local variable.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">17</span>;</span><br><span class="line"><span class="keyword">var</span> evalX = <span class="built_in">eval</span>(<span class="string">&quot;&#x27;use strict&#x27;; var x = 42; x;&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">assert</span>(x === <span class="number">17</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">assert</span>(evalX === <span class="number">42</span>);</span><br></pre></td></tr></table></figure><h5 id="Block-scoped-function-declarations"><a href="#Block-scoped-function-declarations" class="headerlink" title="Block-scoped function declarations"></a>Block-scoped function declarations</h5><p>Block-scoped function declarations are only explicitly specified in strict mode, while sloppy mode behavior remains divergent among browsers.</p><h4 id="Simplifying-eval-and-arguments"><a href="#Simplifying-eval-and-arguments" class="headerlink" title="Simplifying eval and arguments"></a>Simplifying <code>eval</code> and <code>arguments</code></h4><h5 id="Preventing-binding-or-assigning-eval-and-arguments"><a href="#Preventing-binding-or-assigning-eval-and-arguments" class="headerlink" title="Preventing binding or assigning eval and arguments"></a>Preventing binding or assigning <code>eval</code> and <code>arguments</code></h5><p>The names <code>eval</code> and <code>arguments</code> can’t be bound or assigned in language syntax. All these attempts to do so are syntax errors.</p><h5 id="No-syncing-between-parameters-and-arguments-indices"><a href="#No-syncing-between-parameters-and-arguments-indices" class="headerlink" title="No syncing between parameters and arguments indices"></a>No syncing between parameters and arguments indices</h5><p><code>arguments</code> objects for strict mode functions store the original arguments when the function was invoked. <code>arguments[i]</code> does not track the value of the corresponding named argument, nor does a named argument track the value in the corresponding <code>arguments[i]</code>.</p><h4 id="Securing-JavaScript"><a href="#Securing-JavaScript" class="headerlink" title="Securing JavaScript"></a>Securing JavaScript</h4><p>Strict mode makes it easier to write “secure” JavaScript.</p><h5 id="No-this-substitution"><a href="#No-this-substitution" class="headerlink" title="No this substitution"></a>No <code>this</code> substitution</h5><p>The value passed as <code>this</code> to a function in strict mode is not forced into being an object (a.k.a. “boxed”). For a sloppy mode function, <code>this</code> is always an object: either the provided object, if called with an object-valued <code>this</code>; or the boxed value of <code>this</code>, if called with a primitive as <code>this</code>; or the global object, if called with <code>undefined</code> or <code>null</code> as <code>this</code>. For a strict mode function, the specified <code>this</code> is not boxed into an object, and if unspecified, <code>this</code> is <code>undefined</code> instead of <code>globalThis</code>.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">assert</span>(<span class="title function_">fun</span>() === <span class="literal">undefined</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">assert</span>(fun.<span class="title function_">call</span>(<span class="number">2</span>) === <span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">assert</span>(fun.<span class="title function_">apply</span>(<span class="literal">null</span>) === <span class="literal">null</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">assert</span>(fun.<span class="title function_">call</span>(<span class="literal">undefined</span>) === <span class="literal">undefined</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">assert</span>(fun.<span class="title function_">bind</span>(<span class="literal">true</span>)() === <span class="literal">true</span>);</span><br></pre></td></tr></table></figure><h5 id="Removal-of-stack-walking-properties"><a href="#Removal-of-stack-walking-properties" class="headerlink" title="Removal of stack-walking properties"></a>Removal of stack-walking properties</h5><p>In strict mode it’s no longer possible to “walk” the JavaScript stack.</p><p>When a function <code>fun</code> is in the middle of being called, <code>fun.caller</code> is the function that most recently called <code>fun</code>, and <code>fun.arguments</code> is the arguments for that invocation of <code>fun</code>. Both extensions are problematic for “secure” JavaScript because they allow “secured” code to access “privileged” functions and their (potentially unsecured) arguments. If <code>fun</code> is in strict mode, both <code>fun.caller</code> and <code>fun.arguments</code> are non-deletable properties which throw when set or retrieved.</p><p>Similarly, <code>arguments.callee</code> is no longer supported. In sloppy mode, <code>arguments.callee</code> refers to the enclosing function. <code>arguments.callee</code> for strict mode functions is a non-deletable property which throws an error when set or retrieved.</p><h4 id="Future-proofing-JavaScript"><a href="#Future-proofing-JavaScript" class="headerlink" title="Future-proofing JavaScript"></a>Future-proofing JavaScript</h4><p>Extra reserved words:</p><ul><li>implements</li><li>interface</li><li>let</li><li>package</li><li>private</li><li>protected</li><li>public</li><li>static</li><li>yield</li></ul><h2 id="Variables"><a href="#Variables" class="headerlink" title="Variables"></a>Variables</h2><p>We can declare variables to store data by using the <code>var</code>, <code>let</code>, or <code>const</code> keywords.</p><ul><li><code>let</code> – is a modern variable declaration. This syntax can be used to declare a block-scope local variable.</li><li><code>var</code> – is an old-school variable declaration. Normally we don’t use it at all, but there are subtle differences between <code>let</code> and <code>var</code>. This syntax can be used to declare both local and global variables, depending on the execution context.</li><li><code>const</code> – is like <code>let</code>, but the value of the variable can’t be changed.</li></ul><p>In <code>var</code> and <code>let</code> declarations, the initializer is optional. If a variable is declared without an initializer, it is assigned the value <code>undefined</code>.</p><p><code>const</code> declarations always need an initializer, because they forbid any kind of assignment after declaration, and implicitly initializing it with <code>undefined</code> is likely a programmer mistake.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">25</span>;</span><br><span class="line"><span class="keyword">let</span> job = <span class="string">&#x27;programmer&#x27;</span>, salary = <span class="number">10000</span>;</span><br></pre></td></tr></table></figure><p>A variable should be declared only once. A repeated declaration of the same variable is an error.</p><h3 id="Variable-naming"><a href="#Variable-naming" class="headerlink" title="Variable naming"></a>Variable naming</h3><p>You use variables as symbolic names for values in your application. The names of variables are called <em>identifiers</em>.</p><p>There are limitations on variable names in JavaScript:</p><ul><li>The name can contain letters, digits, or the symbols <code>$</code> and <code>_</code>. You can use most Unicode letters such as å and ü in identifiers. You can also use Unicode escape sequences to represent characters in identifiers.</li><li>The first character must not be a digit.</li><li>Reserved words cannot be used as variable names because they are used by the language itself.</li></ul><h4 id="Naming-conventions"><a href="#Naming-conventions" class="headerlink" title="Naming conventions"></a>Naming conventions</h4><ul><li>When the name contains multiple words, <em>camelCase</em> is commonly used.</li><li>Non-Latin letters are allowed, but not recommended.</li><li>Constants should be named using capital letters and underscores.</li><li>A variable’s name should be self-descriptive and concise.</li></ul><h3 id="An-assignment-without-use-strict"><a href="#An-assignment-without-use-strict" class="headerlink" title="An assignment without use strict"></a>An assignment without <code>use strict</code></h3><p>Variables should always be declared before they are used. JavaScript used to allow assigning to undeclared variables, which creates an undeclared global variable. This is an error in strict mode and should be avoided altogether.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// note: no &quot;use strict&quot; in this example</span></span><br><span class="line">num = <span class="number">5</span>; <span class="comment">// the variable &quot;num&quot; is created if it didn&#x27;t exist</span></span><br><span class="line"><span class="title function_">alert</span>(num); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><p>This is a bad practice and would cause an error in strict mode:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"></span><br><span class="line">num = <span class="number">5</span>; <span class="comment">// error: num is not defined</span></span><br></pre></td></tr></table></figure><h3 id="Variable-scope"><a href="#Variable-scope" class="headerlink" title="Variable scope"></a>Variable scope</h3><p>A variable may belong to one of the following scopes:</p><ul><li>Global scope: The default scope for all code running in script mode.</li><li>Module scope: The scope for code running in module mode.</li><li>Function scope: The scope created with a function.</li></ul><p>In addition, variables declared with <code>let</code> or <code>const</code> can belong to an additional scope:</p><ul><li>Block scope: The scope created with a pair of curly braces (a block).</li></ul><p>When you declare a variable outside of any <em>function</em>, it is called a <em>global</em> variable, because it is available to any other code in the current document. When you declare a variable within a function, it is called a <em>local</em> variable, because it is available only within that function. <code>let</code> and <code>const</code> declarations can also be scoped to the block statement that they are declared in.</p><h3 id="Variable-hoisting"><a href="#Variable-hoisting" class="headerlink" title="Variable hoisting"></a>Variable hoisting</h3><p><code>var</code>-declared variables are hoisted, meaning you can <em>refer</em> to the variable anywhere in its scope, even if its declaration isn’t reached yet. You can see <code>var</code> declarations as being “lifted” to the top of its function or global scope. However, if you access a variable before it’s declared, the value is always <code>undefined</code>, because only its declaration is hoisted, but not its initialization.</p><p>Function declarations are hoisted entirely — you can safely call the function anywhere in its scope.</p><h3 id="Global-variables"><a href="#Global-variables" class="headerlink" title="Global variables"></a>Global variables</h3><p>Global variables are in fact properties of the global object.</p><p>In web pages, the global object is <code>window</code>, so you can set and access global variables using the <code>window.variable</code> syntax. In all environments, you can use the <code>globalThis</code> variable (which itself is a global variable) to access global variables.</p><h2 id="Data-types"><a href="#Data-types" class="headerlink" title="Data types"></a>Data types</h2><p>A value in JavaScript is always of a certain type.</p><p>JavaScript has different data types, primitive and non-primitive. There are seven primitive data types, Number, String, Boolean, null, undefined and Symbol and one non-primitive data type Object.</p><h3 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h3><p>The number type represents both integer and floating point numbers.</p><p>Besides regular numbers, there are so-called “special numeric values” which also belong to this data type: <code>Infinity</code>, <code>-Infinity</code> and <code>NaN</code>:</p><ul><li><code>Infinity</code> represents the mathematical Infinity ∞.</li><li><code>NaN</code> represents a computational error. It is a result of an incorrect or an undefined mathematical operation. <code>NaN</code> is sticky. Any further mathematical operation on <code>NaN</code> returns <code>NaN</code>.</li></ul><h4 id="NaN"><a href="#NaN" class="headerlink" title="NaN"></a><code>NaN</code></h4><p>There are five different types of operations that return <code>NaN</code>:</p><ul><li>Failed number conversion (e.g. explicit ones like <code>parseInt(&quot;blabla&quot;)</code>, <code>Number(undefined)</code>, or implicit ones like <code>Math.abs(undefined)</code>)</li><li>Math operation where the result is not a real number (e.g. <code>Math.sqrt(-1)</code>)</li><li>Indeterminate form (e.g. <code>0 * Infinity</code>, <code>1 ** Infinity</code>, <code>Infinity / Infinity</code>, <code>Infinity - Infinity</code>)</li><li>A method or expression whose operand is or gets coerced to <code>NaN</code> (e.g. <code>7 ** NaN</code>, <code>7 * &quot;blabla&quot;</code>) — this means <code>NaN</code> is contagious</li><li>Other cases where an invalid value is to be represented as a number (e.g. an invalid Date <code>new Date(&quot;blabla&quot;).getTime()</code>, <code>&quot;&quot;.charCodeAt(1)</code>)</li></ul><p><code>NaN</code>‘s behaviors include:</p><ul><li>If <code>NaN</code> is involved in a mathematical operation (but not bitwise operations), the result is usually also <code>NaN</code>.</li><li>When <code>NaN</code> is one of the operands of any relational comparison (<code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&lt;=</code>), the result is always <code>false</code>.</li><li><code>NaN</code> compares unequal (via <code>==</code>, <code>!=</code>, <code>===</code>, and <code>!==</code>) to any other value — including to another <code>NaN</code> value.</li></ul><p>To tell if a value is <code>NaN</code>, use <code>Number.isNaN()</code> or <code>isNaN()</code> (a function property of the global object) to most clearly determine whether a value is <code>NaN</code> — or, since <code>NaN</code> is the only value that compares unequal to itself, you can perform a self-comparison like <code>x !== x</code>.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">NaN</span> === <span class="title class_">NaN</span>; <span class="comment">// false</span></span><br><span class="line"><span class="title class_">Number</span>.<span class="property">NaN</span> === <span class="title class_">NaN</span>; <span class="comment">// false</span></span><br><span class="line"><span class="built_in">isNaN</span>(<span class="title class_">NaN</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">isNaN</span>(<span class="title class_">Number</span>.<span class="property">NaN</span>); <span class="comment">// true</span></span><br><span class="line"><span class="title class_">Number</span>.<span class="built_in">isNaN</span>(<span class="title class_">NaN</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">valueIsNaN</span>(<span class="params">v</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> v !== v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">valueIsNaN</span>(<span class="number">1</span>); <span class="comment">// false</span></span><br><span class="line"><span class="title function_">valueIsNaN</span>(<span class="title class_">NaN</span>); <span class="comment">// true</span></span><br><span class="line"><span class="title function_">valueIsNaN</span>(<span class="title class_">Number</span>.<span class="property">NaN</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>Do note the difference between <code>isNaN()</code> and <code>Number.isNaN()</code>: the former will return <code>true</code> if the value is currently <code>NaN</code>, or if it is going to be <code>NaN</code> after it is coerced to a number, while the latter will return <code>true</code> only if the value is currently <code>NaN</code>.</p><p>Some array methods cannot find <code>NaN</code>, while others can. Namely, the index-finding ones (<code>indexOf()</code>, <code>lastIndexOf()</code>) cannot find <code>NaN</code>, while the value-finding ones (<code>includes()</code>) can.</p><h3 id="BigInt"><a href="#BigInt" class="headerlink" title="BigInt"></a>BigInt</h3><p>BigInt type was recently added to the language to represent integers of arbitrary length.</p><p>A BigInt value is created by appending <code>n</code> to the end of an integer:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// the &quot;n&quot; at the end means it&#x27;s a BigInt</span></span><br><span class="line"><span class="keyword">const</span> bigInt = <span class="number">1234567890123456789012345678901234567890n</span>; </span><br></pre></td></tr></table></figure><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p>A string in JavaScript must be surrounded by quotes.</p><p>In JavaScript, there are 3 types of quotes.</p><ul><li>Double quotes: <code>&quot;Hello&quot;</code>.</li><li>Single quotes: <code>&#39;Hello&#39;</code>.</li><li>Backticks: <code>`Hello`</code>.</li></ul><p>Double and single quotes are “simple” quotes. There’s practically no difference between them in JavaScript.</p><h4 id="Template-literals"><a href="#Template-literals" class="headerlink" title="Template literals"></a>Template literals</h4><p>Literals delimited with backtick (<code>`</code>) characters are template literals, allowing for multi-line strings, string interpolation with embedded expressions, and special constructs called tagged templates.</p><p>A tagged template literal may not result in a string; it can be used with a custom tag function to perform whatever operations you want on the different parts of the template literal.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`string text`</span></span><br><span class="line"></span><br><span class="line"><span class="string">`string text line 1</span></span><br><span class="line"><span class="string"> string text line 2`</span></span><br><span class="line"></span><br><span class="line"><span class="string">`string text <span class="subst">$&#123;expression&#125;</span> string text`</span></span><br><span class="line"></span><br><span class="line">tagFunction<span class="string">`string text <span class="subst">$&#123;expression&#125;</span> string text`</span></span><br></pre></td></tr></table></figure><h3 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h3><p>The boolean type has only two values: <code>true</code> and <code>false</code>.</p><h3 id="The-“null”-value"><a href="#The-“null”-value" class="headerlink" title="The “null” value"></a>The “null” value</h3><p>The special <code>null</code> value forms a separate type of its own which contains only the <code>null</code> value:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> age = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><p>In JavaScript, <code>null</code> is not a “reference to a non-existing object” or a “null pointer” like in some other languages. It’s just a special value which represents “nothing”, “empty” or “value unknown”.</p><h3 id="The-“undefined”-value"><a href="#The-“undefined”-value" class="headerlink" title="The “undefined” value"></a>The “undefined” value</h3><p>The special value <code>undefined</code> also stands apart.</p><p>The meaning of undefined is “value is not assigned”.</p><p>If a variable is declared, but not assigned, then its value is undefined:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> age;</span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>(age); <span class="comment">// shows &quot;undefined&quot;</span></span><br></pre></td></tr></table></figure><p>Technically, it is possible to explicitly assign <code>undefined</code> to a variable, but it’s not recommended.</p><p>Normally, one uses <code>null</code> to assign an “empty” or “unknown” value to a variable, while <code>undefined</code> is reserved as a default initial value for unassigned things.</p><h3 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h3><p>The symbol type is used to create unique identifiers for objects.</p><h3 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h3><p>The object type is special.</p><p>All other types are called <em>primitive</em> because their values can contain only a single thing (be it a string or a number or whatever). In contrast, objects are used to store collections of data and more complex data structures.</p><h3 id="The-typeof-operator"><a href="#The-typeof-operator" class="headerlink" title="The typeof operator"></a>The <code>typeof</code> operator</h3><p>The <code>typeof</code> operator returns the type of the operand.</p><p>A call to <code>typeof x</code> returns a string with the type name:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="literal">undefined</span> <span class="comment">// &quot;undefined&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="number">0</span> <span class="comment">// &quot;number&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="number">10n</span> <span class="comment">// &quot;bigint&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">true</span> <span class="comment">// &quot;boolean&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="string">&quot;foo&quot;</span> <span class="comment">// &quot;string&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="title class_">Symbol</span>(<span class="string">&quot;id&quot;</span>) <span class="comment">// &quot;symbol&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="title class_">Math</span> <span class="comment">// &quot;object&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span> <span class="comment">// &quot;object&quot;. It&#x27;s an officially recognized error in typeof</span></span><br><span class="line"><span class="keyword">typeof</span> alert <span class="comment">// &quot;function&quot;. Functions belong to the object type. Technically, the return isn’t correct, but can be convenient in practice.</span></span><br></pre></td></tr></table></figure><p>You may also come across <code>typeof(x)</code>. It’s the same as <code>typeof x</code>. To put it clear: <code>typeof</code> is an <em>operator</em>, not a function. The parentheses here aren’t a part of <code>typeof</code>, only serving as mathematical grouping.</p><h2 id="Type-conversions"><a href="#Type-conversions" class="headerlink" title="Type conversions"></a>Type conversions</h2><p>Most of the time, operators and functions automatically convert the values given to them to the right type. For example, <code>alert</code> automatically converts any value to a string to show it. Mathematical operations convert values to numbers.</p><h3 id="String-conversion"><a href="#String-conversion" class="headerlink" title="String conversion"></a>String conversion</h3><p>String conversion happens when we need the string form of a value. For example, <code>alert(value)</code> does it to show the value.</p><p>We can also call the <code>String(value)</code> function to convert a value to a string:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> value = <span class="literal">true</span>;</span><br><span class="line">value = <span class="title class_">String</span>(value); <span class="comment">// now value is a string &quot;true&quot;</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> value); <span class="comment">// string</span></span><br></pre></td></tr></table></figure><p>String conversion is mostly obvious. A <code>false</code> becomes <code>&quot;false&quot;</code>, <code>null</code> becomes <code>&quot;null&quot;</code>, etc.</p><h3 id="Numeric-conversion"><a href="#Numeric-conversion" class="headerlink" title="Numeric conversion"></a>Numeric conversion</h3><p>Numeric conversion in mathematical functions and expressions happens automatically.</p><p>For example, when division <code>/</code> is applied to non-numbers:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">alert</span>( <span class="string">&quot;6&quot;</span> / <span class="string">&quot;2&quot;</span> ); <span class="comment">// 3, strings are converted to numbers</span></span><br></pre></td></tr></table></figure><p>We can use the <code>Number(value)</code> function to explicitly convert a value to a number:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;123&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> num = <span class="title class_">Number</span>(str); <span class="comment">// becomes a number 123</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> num); <span class="comment">// number</span></span><br></pre></td></tr></table></figure><p>If the string is not a valid number, the result of such a conversion is <code>NaN</code>.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">alert</span>(<span class="title class_">Number</span>(<span class="string">&quot;   123   &quot;</span>)); <span class="comment">// 123</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="title class_">Number</span>(<span class="string">&quot;123z&quot;</span>));      <span class="comment">// NaN (error reading a number at &quot;z&quot;)</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="title class_">Number</span>(<span class="string">&#x27;&#x27;</span>));          <span class="comment">// 0</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="title class_">Number</span>(<span class="string">&#x27; &#x27;</span>));         <span class="comment">// 0</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="title class_">Number</span>(<span class="string">&#x27;\t&#x27;</span>));        <span class="comment">// 0</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="title class_">Number</span>(<span class="string">&#x27;\n&#x27;</span>));        <span class="comment">// 0</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="title class_">Number</span>(<span class="literal">true</span>));        <span class="comment">// 1</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="title class_">Number</span>(<span class="literal">false</span>));       <span class="comment">// 0</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="title class_">Number</span>(<span class="literal">undefined</span>));   <span class="comment">// NaN</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="title class_">Number</span>(<span class="title class_">NaN</span>));         <span class="comment">// NaN</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="title class_">Number</span>(<span class="literal">null</span>));        <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><h3 id="Boolean-conversion"><a href="#Boolean-conversion" class="headerlink" title="Boolean conversion"></a>Boolean conversion</h3><p>Boolean conversion happens in logical operations, but can also be performed explicitly with a call to <code>Boolean(value)</code>.</p><p>The conversion rule:</p><ul><li>Values that are intuitively “empty”, like <code>0</code>, an empty string <code>&#39;&#39;</code>, <code>null</code>, <code>undefined</code>, and <code>NaN</code>, become <code>false</code>.</li><li>Other values become <code>true</code>.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">alert</span>(<span class="title class_">Boolean</span>(<span class="number">1</span>));          <span class="comment">// true</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="title class_">Boolean</span>(<span class="number">0</span>));          <span class="comment">// false</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="title class_">Boolean</span>(<span class="string">&#x27;&#x27;</span>));         <span class="comment">// false</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="title class_">Boolean</span>(<span class="string">&#x27; &#x27;</span>));        <span class="comment">// true</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="title class_">Boolean</span>(<span class="string">&#x27;\t&#x27;</span>));       <span class="comment">// true</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="title class_">Boolean</span>(<span class="string">&#x27;0&#x27;</span>));        <span class="comment">// true</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="title class_">Boolean</span>(<span class="literal">null</span>));       <span class="comment">// false</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="title class_">Boolean</span>(&#123;&#125;));         <span class="comment">// true for empty object &#123;&#125;</span></span><br></pre></td></tr></table></figure><p>Do not confuse the primitive boolean values <code>true</code> and <code>false</code> with the <code>true</code> and <code>false</code> values of the <code>Boolean</code> object.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> b = <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">if</span> (b) &#123;</span><br><span class="line">  <span class="comment">// this condition evaluates to true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (b == <span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="comment">// this condition evaluates to false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Operators"><a href="#Operators" class="headerlink" title="Operators"></a>Operators</h2><p>An operator is <em>unary</em> if it has a single operand. An operator is <em>binary</em> if it has two operands.</p><h3 id="Operator-precedence"><a href="#Operator-precedence" class="headerlink" title="Operator precedence"></a>Operator precedence</h3><p>If an expression has more than one operator, the execution order is defined by their <em>precedence</em>, or, in other words, the default priority order of operators.</p><p>There are many operators in JavaScript. Every operator has a corresponding precedence number. The one with the larger number executes first. If the precedence is the same, the execution order is from left to right.</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence#table">Precedence table</a></p><h3 id="Arithmetic-operators"><a href="#Arithmetic-operators" class="headerlink" title="Arithmetic operators"></a>Arithmetic operators</h3><ul><li>Addition <code>+</code></li><li>Subtraction <code>-</code></li><li>Multiplication <code>*</code></li><li>Division <code>/</code></li><li>Remainder <code>%</code>: The result of <code>a % b</code> is the remainder of the integer division of <code>a</code> by <code>b</code>.</li><li>Exponentiation <code>**</code>: The exponentiation operator <code>a ** b</code> raises <code>a</code> to the power of <code>b</code>.</li><li>Increment <code>++</code></li><li>Decrement <code>--</code></li><li>Unary negation <code>-</code>: Returns the negation of its operand. It first coerces the operand to a numeric value and tests the type of it.</li><li>Unary plus <code>+</code>: Attempts to convert the operand to a number, if it is not already.</li></ul><h4 id="Numeric-conversion-unary"><a href="#Numeric-conversion-unary" class="headerlink" title="Numeric conversion, unary +"></a>Numeric conversion, unary <code>+</code></h4><p>The unary plus or, in other words, the plus operator <code>+</code> applied to a single value, doesn’t do anything to numbers. But if the operand is not a number, the unary plus converts it into a number. It actually does the same thing as <code>Number(...)</code>, but is shorter.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// No effect on numbers</span></span><br><span class="line"><span class="keyword">let</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="title function_">alert</span>(+x); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> y = -<span class="number">2</span>;</span><br><span class="line"><span class="title function_">alert</span>(+y); <span class="comment">// -2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Converts non-numbers</span></span><br><span class="line"><span class="title function_">alert</span>(+<span class="literal">true</span>); <span class="comment">// 1</span></span><br><span class="line"><span class="title function_">alert</span>(+<span class="string">&quot;&quot;</span>);   <span class="comment">// 0</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;1&quot;</span> + <span class="string">&quot;2&quot;</span>); <span class="comment">// 12</span></span><br><span class="line"><span class="title function_">alert</span>(+<span class="string">&quot;1&quot;</span> + +<span class="string">&quot;2&quot;</span>); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h4 id="Increment-x2F-decrement"><a href="#Increment-x2F-decrement" class="headerlink" title="Increment&#x2F;decrement"></a>Increment&#x2F;decrement</h4><p>Increasing or decreasing a number by one is among the most common numerical operations.</p><p>The operators <code>++</code> and <code>--</code> can be placed either before or after a variable.</p><ul><li>When the operator goes after the variable, it is in “postfix form”: <code>counter++</code>.</li><li>The “prefix form” is when the operator goes before the variable: <code>++counter</code>.</li></ul><p>All operators return a value. Increment&#x2F;decrement is no exception. The prefix form returns the <em>new</em> value while the postfix form returns the <em>old</em> value (prior to increment&#x2F;decrement).</p><p>The operators <code>++</code>&#x2F;<code>--</code> can be used inside expressions as well. Their precedence is higher than most other arithmetical operations.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> counter = <span class="number">1</span>;</span><br><span class="line"><span class="title function_">alert</span>(<span class="number">2</span> * ++counter); <span class="comment">// 4</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="number">2</span> * counter++); <span class="comment">// 2, because counter++ returns the &quot;old&quot; value</span></span><br></pre></td></tr></table></figure><h3 id="String-concatenation-with-binary"><a href="#String-concatenation-with-binary" class="headerlink" title="String concatenation with binary +"></a>String concatenation with binary <code>+</code></h3><p>If the binary <code>+</code> is applied to strings, it merges (concatenates) them. If <em>any</em> of the operands is a string, then the other one is converted to a string too.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">alert</span>(<span class="number">2</span> + <span class="number">2</span> + <span class="string">&#x27;1&#x27;</span>); <span class="comment">// &quot;41&quot; and not &quot;221&quot;</span></span><br></pre></td></tr></table></figure><p>The binary <code>+</code> is the only operator that supports strings in such a way. Other arithmetic operators work only with numbers and always convert their operands to numbers.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">alert</span>(<span class="number">6</span> - <span class="string">&#x27;2&#x27;</span>); <span class="comment">// 4, converts &#x27;2&#x27; to a number</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;6&#x27;</span> / <span class="string">&#x27;2&#x27;</span>); <span class="comment">// 3, converts both operands to numbers</span></span><br></pre></td></tr></table></figure><h3 id="Assignment-operators"><a href="#Assignment-operators" class="headerlink" title="Assignment operators"></a>Assignment operators</h3><p>An assignment operator, whether be it simple or compound, assigns a value to its left operand based on the value of its right operand. Assignment operators are listed in the precedence table with the very low priority of 2.</p><h4 id="Assignment-returns-a-value"><a href="#Assignment-returns-a-value" class="headerlink" title="Assignment returns a value"></a>Assignment returns a value</h4><p>All operators in JavaScript return a value. That’s obvious for <code>+</code> and <code>-</code>, but also true for <code>=</code>.</p><p>The call <code>x = value</code> writes the <code>value</code> into <code>x</code> and then returns it.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">let</span> c = <span class="number">3</span> - (a = b + <span class="number">1</span>);</span><br><span class="line"><span class="title function_">alert</span>(a); <span class="comment">// 3</span></span><br><span class="line"><span class="title function_">alert</span>(c); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><h4 id="Chaining-assignments"><a href="#Chaining-assignments" class="headerlink" title="Chaining assignments"></a>Chaining assignments</h4><p>Chained assignments evaluate from right to left. But for the sake of readability, it’s better to split chaining assignments into separated assignments.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a, b, c;</span><br><span class="line">a = b = c = <span class="number">2</span> + <span class="number">2</span>;</span><br></pre></td></tr></table></figure><h4 id="Compound-assignment-operators"><a href="#Compound-assignment-operators" class="headerlink" title="Compound assignment operators"></a>Compound assignment operators</h4><p>Short “modify-and-assign” operators exist for all arithmetical and bitwise operators: <code>+=</code>, <code>-=</code>, <code>*=</code>, <code>/=</code>, <code>**=</code>, <code>%=</code>, <code>&lt;&lt;=</code>, <code>&gt;&gt;&gt;=</code>, <code>&amp;=</code>, <code>&amp;&amp;=</code>, <code>??=</code>, etc.</p><p>Such operators have the same precedence as a normal assignment, so they run after most other calculations.</p><p>The shorthand assignment operator <code>+=</code> can also be used to concatenate strings.</p><h3 id="Comparison-operators"><a href="#Comparison-operators" class="headerlink" title="Comparison operators"></a>Comparison operators</h3><p>A comparison operator compares its operands and returns a logical value based on whether the comparison is true. The operands can be numerical, string, logical, or object values.</p><p>In most cases, if the two operands are not of the same type, JavaScript attempts to convert them to an appropriate type for the comparison. This behavior generally results in comparing the operands numerically. The sole exceptions to type conversion within comparisons involve the <code>===</code> and <code>!==</code> operators, which perform strict equality and inequality comparisons.</p><ul><li>Equal <code>==</code></li><li>Not equal <code>!=</code></li><li>Strict equal <code>===</code></li><li>Strict not equal <code>!==</code></li><li>Greater than <code>&gt;</code></li><li>Greater than or equal <code>&gt;=</code></li><li>Less than <code>&lt;</code></li><li>Less than or equal <code>&lt;=</code></li></ul><p>Note: <code>=&gt;</code> is not a comparison operator but rather is the notation for Arrow functions.</p><p>Strings are compared letter-by-letter by Unicode order.</p><p><code>null</code> and <code>undefined</code> equal each other (in the sense of <code>==</code>), but not any other value.</p><p><code>undefined</code> should not be compared to other values. When comparing <code>undefined</code> to numbers, <code>undefined</code> gets converted to <code>NaN</code> and <code>NaN</code> is a special numeric value which returns <code>false</code> for all comparisons.</p><p>Be careful when using comparisons like <code>&gt;=</code>, <code>&gt;</code>, <code>&lt;</code>, <code>&lt;=</code> with variables which may be <code>null</code>&#x2F;<code>undefined</code>. Checking for <code>null</code>&#x2F;<code>undefined</code> separately is a good idea.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">alert</span>(<span class="literal">null</span> &gt; <span class="number">0</span>);  <span class="comment">// false</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="literal">null</span> == <span class="number">0</span>); <span class="comment">// false</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="literal">null</span> &gt;= <span class="number">0</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>(<span class="literal">undefined</span> &gt; <span class="number">0</span>); <span class="comment">// false</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="literal">undefined</span> &lt; <span class="number">0</span>); <span class="comment">// false</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="literal">undefined</span> == <span class="number">0</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="Bitwise-operators"><a href="#Bitwise-operators" class="headerlink" title="Bitwise operators"></a>Bitwise operators</h3><p>Bitwise operators treat arguments as <em>32-bit integer numbers</em> and work on the level of their binary representation.</p><p>The list of operators:</p><ul><li>Bitwise logical operators<ul><li>Bitwise AND <code>&amp;</code></li><li>Bitwise OR <code>|</code></li><li>Bitwise XOR <code>^</code></li><li>Bitwise NOT <code>~</code></li></ul></li><li>Bitwise shift operators<ul><li>Left Shift <code>&lt;&lt;</code></li><li>Sign-propagating right shift <code>&gt;&gt;</code></li><li>Zero-filling right shift <code>&gt;&gt;&gt;</code></li></ul></li></ul><h3 id="Logical-operators"><a href="#Logical-operators" class="headerlink" title="Logical operators"></a>Logical operators</h3><p>Logical operators are typically used with Boolean (logical) values; when they are, they return a Boolean value. However, the <code>&amp;&amp;</code> and <code>||</code> operators actually return the value of one of the specified operands, so if these operators are used with non-Boolean values, they may return a non-Boolean value.</p><ul><li>Logical AND <code>&amp;&amp;</code>: <code>expr1 &amp;&amp; expr2</code>, returns <code>expr1</code> if it can be converted to <code>false</code>; otherwise, returns <code>expr2</code>.</li><li>Logical OR <code>||</code>: <code>expr1 || expr2</code>, returns <code>expr1</code> if it can be converted to <code>true</code>; otherwise, returns <code>expr2</code>.</li><li>Logical NOT <code>!</code>: <code>!expr</code>, returns <code>false</code> if its single operand that can be converted to <code>true</code>; otherwise, returns <code>true</code>.</li></ul><h4 id="Short-circuit-evaluation"><a href="#Short-circuit-evaluation" class="headerlink" title="Short-circuit evaluation"></a>Short-circuit evaluation</h4><p>As logical expressions are evaluated left to right, they are tested for possible “short-circuit” evaluation using the following rules:</p><ul><li><code>false &amp;&amp; anything</code> is short-circuit evaluated to <code>false</code>.</li><li><code>true || anything</code> is short-circuit evaluated to <code>true</code>.</li></ul><p>The rules of logic guarantee that these evaluations are always correct. Note that the <code>anything</code> part of the above expressions is not evaluated, so any side effects of doing so do not take effect.</p><h4 id="Nullish-coalescing-operator"><a href="#Nullish-coalescing-operator" class="headerlink" title="Nullish coalescing operator"></a>Nullish coalescing operator</h4><p>The nullish coalescing (<code>??</code>) operator is a logical operator that returns its right-hand side operand when its left-hand side operand is <code>null</code> or <code>undefined</code>, and otherwise returns its left-hand side operand.</p><p>The nullish coalescing operator can be seen as a special case of the logical OR (<code>||</code>) operator. The latter returns the right-hand side operand if the left operand is any <em>falsy</em> value, not only <code>null</code> or <code>undefined</code>. In other words, <code>||</code> doesn’t distinguish between <code>false</code>, <code>0</code>, an empty string <code>&quot;&quot;</code> and <code>null</code>&#x2F;<code>undefined</code>. They are all falsy values.</p><p>It is not possible to combine both the AND (<code>&amp;&amp;</code>) and OR operators (<code>||</code>) directly with <code>??</code>. A syntax error will be thrown in such cases. Instead, provide parenthesis to explicitly indicate precedence.</p><p>The nullish coalescing operator has the fifth-lowest operator precedence, directly lower than <code>||</code> and directly higher than the conditional (ternary) operator.</p><p>The common use case for <code>??</code> is to provide a default value. We can also use a sequence of <code>??</code> to select the first value from a list that isn’t <code>null</code>&#x2F;<code>undefined</code>.</p><h3 id="Conditional-ternary-operator"><a href="#Conditional-ternary-operator" class="headerlink" title="Conditional (ternary) operator"></a>Conditional (ternary) operator</h3><p>The conditional operator can have one of two values based on a condition. The syntax is:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">condition ? val1 : val2</span><br></pre></td></tr></table></figure><p>If condition is <code>true</code>, the operator has the value of <code>val1</code>. Otherwise it has the value of <code>val2</code>.</p><h3 id="Comma"><a href="#Comma" class="headerlink" title="Comma"></a>Comma</h3><p>The comma operator allows us to evaluate several expressions, dividing them with a comma <code>,</code>. Each of them is evaluated from left to right, but only the result of the <em>last</em> one is returned.</p><p>This operator is primarily used inside a <code>for</code> loop, to allow multiple variables to be updated each time through the loop. It is regarded bad style to use it elsewhere. Often two separate statements can and should be used instead.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = (<span class="number">1</span> + <span class="number">2</span>, <span class="number">3</span> + <span class="number">4</span>);</span><br><span class="line"><span class="title function_">alert</span>(a); <span class="comment">// 7 (the result of 3 + 4)</span></span><br></pre></td></tr></table></figure><p>The comma operator has very low precedence, lower than <code>=</code>.</p><h3 id="Unary-operators"><a href="#Unary-operators" class="headerlink" title="Unary operators"></a>Unary operators</h3><p>A unary operation is an operation with only one operand.</p><h4 id="delete"><a href="#delete" class="headerlink" title="delete"></a><code>delete</code></h4><p>The <code>delete</code> operator deletes an object’s property. The syntax is:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> object.<span class="property">property</span>;</span><br><span class="line"><span class="keyword">delete</span> object[propertyKey];</span><br><span class="line"><span class="keyword">delete</span> objectName[index];</span><br></pre></td></tr></table></figure><p>The <code>delete</code> operator returns <code>true</code> if the operation is possible; it returns <code>false</code> if the operation is not possible.</p><p>Since arrays are just objects, it’s technically possible to delete elements from them. This is, however, regarded as a bad practice. When you delete an array property, the array <em>length</em> is not affected and other elements are not re-indexed. To actually manipulate the array, use the various array methods such as <code>splice</code>.</p><h4 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a><code>typeof</code></h4><p>The <code>typeof</code> operator returns a <em>string</em> indicating the type of the unevaluated operand.</p><h4 id="void"><a href="#void" class="headerlink" title="void"></a><code>void</code></h4><p>The <code>void</code> operator specifies an expression to be evaluated <em>without</em> returning a value. The parentheses surrounding the expression are optional, but it is good style to use them to avoid precedence issues.</p><h3 id="Relational-operators"><a href="#Relational-operators" class="headerlink" title="Relational operators"></a>Relational operators</h3><p>A relational operator compares its operands and returns a Boolean value based on whether the comparison is true.</p><h4 id="in"><a href="#in" class="headerlink" title="in"></a><code>in</code></h4><p>The <code>in</code> operator returns <code>true</code> if the specified property is in the specified object.</p><h4 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a><code>instanceof</code></h4><p>The <code>instanceof</code> operator returns <code>true</code> if the specified object is of the specified object type.</p><h3 id="Basic-expressions"><a href="#Basic-expressions" class="headerlink" title="Basic expressions"></a>Basic expressions</h3><p>All operators eventually operate on one or more basic expressions. These basic expressions include <em>identifiers</em> and <em>literals</em>, but there are a few other kinds as well.</p><h4 id="this"><a href="#this" class="headerlink" title="this"></a><code>this</code></h4><p>Use the <code>this</code> keyword to refer to the current object. In general, <code>this</code> refers to the <code>calling object</code> in a method. Use <code>this</code> either with the dot or the bracket notation:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>[<span class="string">&quot;propertyName&quot;</span>];</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">propertyName</span>;</span><br></pre></td></tr></table></figure><h4 id="Grouping-operator"><a href="#Grouping-operator" class="headerlink" title="Grouping operator"></a>Grouping operator</h4><p>The grouping operator <code>()</code> controls the precedence of evaluation in expressions.</p><h4 id="new"><a href="#new" class="headerlink" title="new"></a><code>new</code></h4><p>You can use the <code>new</code> operator to create an instance of a user-defined object type or of one of the built-in object types. Use <code>new</code> as follows:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> objectName = <span class="keyword">new</span> <span class="title class_">ObjectType</span>(param1, param2, <span class="comment">/* …, */</span> paramN);</span><br></pre></td></tr></table></figure><h4 id="super"><a href="#super" class="headerlink" title="super"></a><code>super</code></h4><p>The <code>super</code> keyword is used to call functions on an object’s parent. It is useful with classes to call the parent constructor.</p><h2 id="Numbers-and-dates"><a href="#Numbers-and-dates" class="headerlink" title="Numbers and dates"></a>Numbers and dates</h2><h3 id="Numbers"><a href="#Numbers" class="headerlink" title="Numbers"></a>Numbers</h3><p>In JavaScript, numbers are implemented in double-precision 64-bit binary format IEEE 754 (i.e., a number between ±2^−1022 and ±2^+1023, or about ±10^−308 to ±10^+308, with a numeric precision of 53 bits). Integer values up to ±2^53 − 1 can be represented exactly.</p><p>In addition to being able to represent floating-point numbers, the number type has three symbolic values: <code>+Infinity</code>, <code>-Infinity</code>, and <code>NaN</code>.</p><p>You can use four types of number literals:</p><ul><li>decimal: Decimal literals can start with a zero (<code>0</code>) followed by another decimal digit.</li><li>binary: Binary number syntax uses a prefix <code>0b</code> or <code>0B</code>. If the digits after the <code>0b</code> are not <code>0</code> or <code>1</code>, the following <code>SyntaxError</code> is thrown: “Missing binary digits after 0b”.</li><li>octal: The standard syntax for octal numbers is to prefix them with <code>0o</code> or <code>0O</code>.</li><li>hexadecimal: Hexadecimal number syntax uses a prefix <code>0x</code> or <code>0X</code>. If the digits after <code>0x</code> are outside the range (0123456789ABCDEF), the following <code>SyntaxError</code> is thrown: “Identifier starts immediately after numeric literal”.</li></ul><h4 id="Exponentiation"><a href="#Exponentiation" class="headerlink" title="Exponentiation"></a>Exponentiation</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0e-5</span>   <span class="comment">// 0</span></span><br><span class="line"><span class="number">0e+5</span>   <span class="comment">// 0</span></span><br><span class="line"><span class="number">5e1</span>    <span class="comment">// 50</span></span><br><span class="line"><span class="number">175e-2</span> <span class="comment">// 1.75</span></span><br><span class="line"><span class="number">1e3</span>    <span class="comment">// 1000</span></span><br><span class="line"><span class="number">1e-3</span>   <span class="comment">// 0.001</span></span><br><span class="line"><span class="number">1E3</span>    <span class="comment">// 1000</span></span><br></pre></td></tr></table></figure><h3 id="Number-object"><a href="#Number-object" class="headerlink" title="Number object"></a><code>Number</code> object</h3><p>The built-in <code>Number</code> object has properties for numerical constants, such as maximum value, not-a-number, and infinity.</p><p>The <code>Number</code> constructor contains constants and methods for working with numbers. Values of other types can be converted to numbers using the <code>Number()</code> function.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> biggestNum = <span class="title class_">Number</span>.<span class="property">MAX_VALUE</span>;</span><br><span class="line"><span class="keyword">const</span> smallestNum = <span class="title class_">Number</span>.<span class="property">MIN_VALUE</span>;</span><br><span class="line"><span class="keyword">const</span> infiniteNum = <span class="title class_">Number</span>.<span class="property">POSITIVE_INFINITY</span>;</span><br><span class="line"><span class="keyword">const</span> negInfiniteNum = <span class="title class_">Number</span>.<span class="property">NEGATIVE_INFINITY</span>;</span><br><span class="line"><span class="keyword">const</span> notANum = <span class="title class_">Number</span>.<span class="property">NaN</span>;</span><br></pre></td></tr></table></figure><h3 id="Math-object"><a href="#Math-object" class="headerlink" title="Math object"></a><code>Math</code> object</h3><p>The built-in <code>Math</code> object has properties and methods for mathematical constants and functions.</p><p>Unlike many other objects, you never create a <code>Math</code> object of your own. You always use the built-in <code>Math</code> object.</p><h3 id="BigInt-1"><a href="#BigInt-1" class="headerlink" title="BigInt"></a><code>BigInt</code></h3><ul><li>A <code>BigInt</code> can be defined as an integer literal suffixed by <code>n</code>.</li><li><code>BigInt</code>s can also be constructed from number values or string values using the <code>BigInt</code> constructor.</li></ul><p>Conceptually, a <code>BigInt</code> is just an arbitrarily long sequence of bits which encodes an integer.</p><h3 id="Date-object"><a href="#Date-object" class="headerlink" title="Date object"></a><code>Date</code> object</h3><p>JavaScript does not have a date data type. However, you can use the <code>Date</code> object and its methods to work with dates and times in your applications. The <code>Date</code> object has a large number of methods for setting, getting, and manipulating dates. It does not have any properties.</p><p>To create a Date object:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dateObjectName = <span class="keyword">new</span> <span class="title class_">Date</span>([parameters]);</span><br></pre></td></tr></table></figure><p>Calling <code>Date</code> without the <code>new</code> keyword returns a string representing the current date and time.</p><h2 id="Text-formatting"><a href="#Text-formatting" class="headerlink" title="Text formatting"></a>Text formatting</h2><h3 id="Strings"><a href="#Strings" class="headerlink" title="Strings"></a>Strings</h3><p>JavaScript’s String type is used to represent textual data. It is a set of “elements” of 16-bit unsigned integer values (UTF-16 code units). Each element in the String occupies a position in the String. The first element is at index <code>0</code>, the next at index <code>1</code>, and so on. The length of a String is the number of elements in it. You can create strings using string literals or string objects.</p><h4 id="String-literals"><a href="#String-literals" class="headerlink" title="String literals"></a>String literals</h4><h5 id="Hexadecimal-escape-sequences"><a href="#Hexadecimal-escape-sequences" class="headerlink" title="Hexadecimal escape sequences"></a>Hexadecimal escape sequences</h5><p>The number after <code>\x</code> is interpreted as a hexadecimal number.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;\xA9&quot;</span> <span class="comment">// &quot;©&quot;</span></span><br></pre></td></tr></table></figure><h5 id="Unicode-escape-sequences"><a href="#Unicode-escape-sequences" class="headerlink" title="Unicode escape sequences"></a>Unicode escape sequences</h5><p>The Unicode escape sequences require at least four hexadecimal digits following <code>\u</code>.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;\u00A9&quot;</span> <span class="comment">// &quot;©&quot;</span></span><br></pre></td></tr></table></figure><h5 id="Unicode-code-point-escapes"><a href="#Unicode-code-point-escapes" class="headerlink" title="Unicode code point escapes"></a>Unicode code point escapes</h5><p>With Unicode code point escapes, any character can be escaped using hexadecimal numbers so that it is possible to use Unicode code points up to <code>0x10FFFF</code>. With simple Unicode escapes it is often necessary to write the surrogate halves separately to achieve the same result.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;\u&#123;2F804&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// the same with simple Unicode escapes</span></span><br><span class="line"><span class="string">&quot;\uD87E\uDC04&quot;</span></span><br></pre></td></tr></table></figure><h5 id="Multi-line-template-literals"><a href="#Multi-line-template-literals" class="headerlink" title="Multi-line template literals"></a>Multi-line template literals</h5><p>Template literals are string literals allowing embedded expressions. You can use multi-line strings and string interpolation features with them.</p><p>Template literals are enclosed by backtick characters (<code>`</code>). Template literals can contain placeholders. These are indicated by the dollar sign and curly braces (<code>$&#123;expression&#125;</code>).</p><h4 id="String-objects"><a href="#String-objects" class="headerlink" title="String objects"></a>String objects</h4><p>The <code>String</code> object is a wrapper around the string primitive data type.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;foo&quot;</span>); <span class="comment">// Creates a String object</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo); <span class="comment">// [String: &#x27;foo&#x27;]</span></span><br><span class="line"><span class="keyword">typeof</span> foo; <span class="comment">// &#x27;object&#x27;</span></span><br></pre></td></tr></table></figure><p>You can call any of the methods of the <code>String</code> object on a string literal value—JavaScript automatically converts the string literal to a temporary <code>String</code> object, calls the method, then discards the temporary <code>String</code> object. You can also use the <code>length</code> property with a string literal.</p><p>A <code>String</code> object has one property, <code>length</code>, that indicates the number of UTF-16 <em>code units</em> in the string.</p><p>Characters whose Unicode scalar values are greater than U+FFFF (such as some rare Chinese&#x2F;Japanese&#x2F;Korean&#x2F;Vietnamese characters and some emoji) are stored in UTF-16 with two surrogate code units each.</p><h2 id="Regular-expressions"><a href="#Regular-expressions" class="headerlink" title="Regular expressions"></a>Regular expressions</h2><p>Regular expressions are patterns used to match character combinations in strings. In JavaScript, regular expressions are also objects. These patterns are used with the <code>exec()</code> and <code>test()</code> methods of <code>RegExp</code>, and with the <code>match()</code>, <code>matchAll()</code>, <code>replace()</code>, <code>replaceAll()</code>, <code>search()</code>, and <code>split()</code> methods of <code>String</code>.</p><h3 id="Creating-a-regular-expression"><a href="#Creating-a-regular-expression" class="headerlink" title="Creating a regular expression"></a>Creating a regular expression</h3><ul><li><p>Using a regular expression literal, which consists of a pattern enclosed between slashes, as follows:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> re = <span class="regexp">/ab+c/</span>;</span><br></pre></td></tr></table></figure><p>Regular expression literals provide compilation of the regular expression when the script is loaded. If the regular expression remains constant, using this can improve performance.</p></li><li><p>Or calling the constructor function of the <code>RegExp</code> object, as follows:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> re = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;ab+c&quot;</span>);</span><br></pre></td></tr></table></figure><p>Using the constructor function provides runtime compilation of the regular expression. Use the constructor function when you know the regular expression pattern will be changing, or you don’t know the pattern and are getting it from another source, such as user input.</p></li></ul><h3 id="Writing-a-regular-expression-pattern"><a href="#Writing-a-regular-expression-pattern" class="headerlink" title="Writing a regular expression pattern"></a>Writing a regular expression pattern</h3><h4 id="Using-simple-patterns"><a href="#Using-simple-patterns" class="headerlink" title="Using simple patterns"></a>Using simple patterns</h4><p>Simple patterns are constructed of characters for which you want to find a direct match.</p><h4 id="Using-special-characters"><a href="#Using-special-characters" class="headerlink" title="Using special characters"></a>Using special characters</h4><p>When the search for a match requires something more than a direct match, you can include special characters in the pattern.</p><p>For example, to match a single <code>&quot;a&quot;</code> followed by zero or more <code>&quot;b&quot;</code>s followed by <code>&quot;c&quot;</code>, you’d use the pattern <code>/ab*c/</code>: the <code>*</code> after <code>&quot;b&quot;</code> means “0 or more occurrences of the preceding item.” In the string <code>&quot;cbbabbbbcdebc&quot;</code>, this pattern will match the substring <code>&quot;abbbbc&quot;</code>.</p><h4 id="Escaping"><a href="#Escaping" class="headerlink" title="Escaping"></a>Escaping</h4><p>If you need to use any of the special characters literally, you must escape it by putting a backslash in front of it.</p><p>For instance, to search for <code>&quot;a&quot;</code> followed by <code>&quot;*&quot;</code> followed by <code>&quot;b&quot;</code>, you’d use <code>/a\*b/</code> — the backslash “escapes” the <code>&quot;*&quot;</code>, making it literal instead of special.</p><p>To match a literal backslash, you need to escape the backslash. For instance, to match the string <code>&quot;C:\&quot;</code> where <code>&quot;C&quot;</code> can be any letter, you’d use <code>/[A-Z]:\\/</code>.</p><p>If using the <code>RegExp</code> constructor with a <em>string literal</em>, remember that the backslash is an escape in string literals, so to use it in the regular expression, you need to escape it at the string literal level. <code>/a\*b/</code> and <code>new RegExp(&quot;a\\*b&quot;)</code> create the same expression.</p><h4 id="Using-parentheses"><a href="#Using-parentheses" class="headerlink" title="Using parentheses"></a>Using parentheses</h4><p>Parentheses around any part of the regular expression pattern causes that part of the matched substring to be remembered. Once remembered, the substring can be recalled for other use.</p><h2 id="Control-flow-and-error-handling"><a href="#Control-flow-and-error-handling" class="headerlink" title="Control flow and error handling"></a>Control flow and error handling</h2><h3 id="Block-statement"><a href="#Block-statement" class="headerlink" title="Block statement"></a>Block statement</h3><p>The most basic statement is a block statement, which is used to group statements. The block is delimited by a pair of curly brackets:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  statement1;</span><br><span class="line">  statement2;</span><br><span class="line">  <span class="comment">// …</span></span><br><span class="line">  statementN;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Block statements are commonly used with control flow statements (<code>if</code>, <code>for</code>, <code>while</code>).</p><h3 id="Conditional-statements"><a href="#Conditional-statements" class="headerlink" title="Conditional statements"></a>Conditional statements</h3><p>A conditional statement is a set of commands that executes if a specified condition is true.</p><h4 id="if-else-statements"><a href="#if-else-statements" class="headerlink" title="if...else statements"></a><code>if...else</code> statements</h4><p><code>if...else</code> syntax looks like this:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">  statement1;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  statement2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You can also compound the statements using <code>else if</code> to have multiple conditions tested in sequence.</p><p>You may sometimes see <code>if...else</code> statements written without the curly braces:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition) <span class="comment">/* code to run if condition is true */</span></span><br><span class="line"><span class="keyword">else</span> <span class="comment">/* run some other code instead */</span></span><br></pre></td></tr></table></figure><p>This syntax is perfectly valid, but it is much easier to understand the code if you use the curly braces to delimit the blocks of code, and use multiple lines and indentation.</p><p>In some cases, it can make sense to use an assignment as a condition. This comes with readability tradeoffs.</p><p>Many style guides recommend more explicitly indicating the intention for the condition to be an assignment. You can do that minimally by putting additional parentheses as a grouping operator around the assignment:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> iterator = <span class="variable language_">document</span>.<span class="title function_">createNodeIterator</span>(<span class="variable language_">document</span>, <span class="title class_">NodeFilter</span>.<span class="property">SHOW_COMMENT</span>);</span><br><span class="line"><span class="keyword">let</span> currentNode;</span><br><span class="line"><span class="keyword">while</span> ((currentNode = iterator.<span class="title function_">nextNode</span>())) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(currentNode.<span class="property">textContent</span>.<span class="title function_">trim</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Some people may further recommend adding a comparison operator to turn the condition into an explicit comparison:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> ((currentNode = iterator.<span class="title function_">nextNode</span>()) !== <span class="literal">null</span>) &#123;&#125;</span><br></pre></td></tr></table></figure><p>There are other ways to write this pattern, such as:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> ((currentNode = iterator.<span class="title function_">nextNode</span>()) &amp;&amp; currentNode) &#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="switch-statements"><a href="#switch-statements" class="headerlink" title="switch statements"></a><code>switch</code> statements</h4><p>A <code>switch</code> statement allows a program to evaluate an expression and attempt to match the expression’s value to a <code>case</code> label. If a match is found, the program executes the associated statement.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (expression) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="attr">choice1</span>:</span><br><span class="line">    <span class="comment">// run this code</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="attr">choice2</span>:</span><br><span class="line">    <span class="comment">// run this code instead</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="comment">// include as many cases as you like</span></span><br><span class="line">  <span class="attr">default</span>:</span><br><span class="line">    <span class="comment">// actually, just run this code</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>By convention, the <code>default</code> clause is written as the last clause, but it does not need to be so.</p><p>You don’t have to include the <code>default</code> section — you can safely omit it if there is no chance that the expression could end up equaling an unknown value. If there is a chance of this, however, you need to include it to handle unknown cases.</p><p>The optional <code>break</code> statement associated with each <code>case</code> clause ensures that the program breaks out of switch once the matched statement is executed, and then continues execution at the statement following switch. If <code>break</code> is omitted, the program continues execution inside the <code>switch</code> statement (and will evaluate the next <code>case</code>, and so on).</p><h4 id="Ternary-operator"><a href="#Ternary-operator" class="headerlink" title="Ternary operator"></a>Ternary operator</h4><p>The ternary or conditional operator is a small bit of syntax that tests a condition and returns one value&#x2F;expression if it is <code>true</code>, and another if it is <code>false</code>. The pseudo code looks like this:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">condition ? run <span class="variable language_">this</span> code : run <span class="variable language_">this</span> code instead</span><br></pre></td></tr></table></figure><h3 id="Exception-handling-statements"><a href="#Exception-handling-statements" class="headerlink" title="Exception handling statements"></a>Exception handling statements</h3><p>You can throw exceptions using the <code>throw</code> statement and handle them using the <code>try...catch</code> statements.</p><h4 id="throw-statement"><a href="#throw-statement" class="headerlink" title="throw statement"></a><code>throw</code> statement</h4><p>Use the <code>throw</code> statement to throw an exception. A <code>throw</code> statement specifies the value to be thrown:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">throw</span> expression;</span><br></pre></td></tr></table></figure><p>You may throw any expression, not just expressions of a specific type. The following code throws several exceptions of varying types:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="string">&quot;Error2&quot;</span>; <span class="comment">// String type</span></span><br><span class="line"><span class="keyword">throw</span> <span class="number">42</span>; <span class="comment">// Number type</span></span><br><span class="line"><span class="keyword">throw</span> <span class="literal">true</span>; <span class="comment">// Boolean type</span></span><br><span class="line"><span class="keyword">throw</span> &#123;</span><br><span class="line">  <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;I&#x27;m an object!&quot;</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="try-catch-statement"><a href="#try-catch-statement" class="headerlink" title="try...catch statement"></a><code>try...catch</code> statement</h4><p>The <code>try...catch</code> statement marks a block of statements to try, and specifies one or more responses should an exception be thrown. If an exception is thrown, the <code>try...catch</code> statement catches it.</p><p>If any statement within the <code>try</code> block (or in a function called from within the <code>try</code> block) throws an exception, control immediately shifts to the <code>catch</code> block. If no exception is thrown in the <code>try</code> block, the <code>catch</code> block is skipped. The <code>finally</code> block executes after the <code>try</code> and <code>catch</code> blocks execute but before the statements following the <code>try...catch</code> statement.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getMonthName</span>(<span class="params">mo</span>) &#123;</span><br><span class="line">  mo--; <span class="comment">// Adjust month number for array index (so that 0 = Jan, 11 = Dec)</span></span><br><span class="line">  <span class="keyword">const</span> months = [</span><br><span class="line">    <span class="string">&quot;Jan&quot;</span>, <span class="string">&quot;Feb&quot;</span>, <span class="string">&quot;Mar&quot;</span>, <span class="string">&quot;Apr&quot;</span>, <span class="string">&quot;May&quot;</span>, <span class="string">&quot;Jun&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Jul&quot;</span>, <span class="string">&quot;Aug&quot;</span>, <span class="string">&quot;Sep&quot;</span>, <span class="string">&quot;Oct&quot;</span>, <span class="string">&quot;Nov&quot;</span>, <span class="string">&quot;Dec&quot;</span>,</span><br><span class="line">  ];</span><br><span class="line">  <span class="keyword">if</span> (months[mo]) &#123;</span><br><span class="line">    <span class="keyword">return</span> months[mo];</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;InvalidMonthNo&quot;</span>); <span class="comment">// throw keyword is used here</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="comment">// statements to try</span></span><br><span class="line">  monthName = <span class="title function_">getMonthName</span>(myMonth); <span class="comment">// function could throw exception</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  monthName = <span class="string">&quot;unknown&quot;</span>;</span><br><span class="line">  <span class="title function_">logMyErrors</span>(e); <span class="comment">// pass exception object to error handler (i.e. your own function)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="The-catch-block"><a href="#The-catch-block" class="headerlink" title="The catch block"></a>The <code>catch</code> block</h5><p>The <code>catch</code> block specifies an identifier that holds the value specified by the <code>throw</code> statement. You can use this identifier to get information about the exception that was thrown.</p><p>JavaScript creates this identifier when the <code>catch</code> block is entered. The identifier lasts only for the duration of the catch block.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="string">&quot;myException&quot;</span>; <span class="comment">// generates an exception</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">  <span class="comment">// statements to handle any exceptions</span></span><br><span class="line">  <span class="title function_">logMyErrors</span>(err); <span class="comment">// pass exception object to error handler</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="The-finally-block"><a href="#The-finally-block" class="headerlink" title="The finally block"></a>The <code>finally</code> block</h5><p>The <code>finally</code> block will execute whether or not an exception is thrown. If an exception is thrown, however, the statements in the <code>finally</code> block execute even if no <code>catch</code> block handles the exception that was thrown.</p><p>You can use the <code>finally</code> block to make your script fail gracefully when an exception occurs. For example, you may need to release a resource that your script has tied up.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">openMyFile</span>();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="title function_">writeMyFile</span>(theData); <span class="comment">// This may throw an error</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="title function_">handleError</span>(e); <span class="comment">// If an error occurred, handle it</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">  <span class="title function_">closeMyFile</span>(); <span class="comment">// Always close the resource</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If the <code>finally</code> block returns a value, this value becomes the return value of the entire <code>try…catch…finally</code> production, regardless of any return statements in the <code>try</code> and <code>catch</code> blocks:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">throw</span> <span class="string">&quot;bogus&quot;</span>;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// This return statement is suspended</span></span><br><span class="line">    <span class="comment">// until finally block has completed</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>); <span class="comment">// not reachable</span></span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// overwrites the previous &quot;return&quot;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>); <span class="comment">// not reachable</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// &quot;return false&quot; is executed now</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>); <span class="comment">// not reachable</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">f</span>()); <span class="comment">// 0, 1, 3, false</span></span><br></pre></td></tr></table></figure><p>Overwriting of return values by the <code>finally</code> block also applies to exceptions thrown or re-thrown inside of the <code>catch</code> block:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="string">&quot;bogus&quot;</span>;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;caught inner &quot;bogus&quot;&#x27;</span>);</span><br><span class="line">    <span class="comment">// This throw statement is suspended until</span></span><br><span class="line">    <span class="comment">// finally block has completed</span></span><br><span class="line">    <span class="keyword">throw</span> e;</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// overwrites the previous &quot;throw&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// &quot;return false&quot; is executed now</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">f</span>());</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="comment">// this is never reached!</span></span><br><span class="line">  <span class="comment">// while f() executes, the `finally` block returns false,</span></span><br><span class="line">  <span class="comment">// which overwrites the `throw` inside the above `catch`</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;caught outer &quot;bogus&quot;&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Logs:</span></span><br><span class="line"><span class="comment">// caught inner &quot;bogus&quot;</span></span><br><span class="line"><span class="comment">// false</span></span><br></pre></td></tr></table></figure><h5 id="Nesting-try-catch-statements"><a href="#Nesting-try-catch-statements" class="headerlink" title="Nesting try...catch statements"></a>Nesting <code>try...catch</code> statements</h5><p>If an inner <code>try</code> block does not have a corresponding <code>catch</code> block:</p><ul><li>it must contain a <code>finally</code> block, and</li><li>the enclosing <code>try...catch</code> statement’s <code>catch</code> block is checked for a match.</li></ul><h4 id="Utilizing-Error-objects"><a href="#Utilizing-Error-objects" class="headerlink" title="Utilizing Error objects"></a>Utilizing <code>Error</code> objects</h4><p>Depending on the type of error, you may be able to use the <code>name</code> and <code>message</code> properties to get a more refined message.</p><p>The <code>name</code> property provides the general class of <code>Error</code> (such as <code>DOMException</code> or <code>Error</code>), while <code>message</code> generally provides a more succinct message than one would get by converting the error object to a string.</p><p>If you are throwing your own exceptions, in order to take advantage of these properties, you can use the <code>Error</code> constructor.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">doSomethingErrorProne</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">ourCodeMakesAMistake</span>()) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;The message&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">doSomethingToGetAJavaScriptError</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="title function_">doSomethingErrorProne</span>();</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="comment">// Now, we actually use `console.error()`</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(e.<span class="property">name</span>); <span class="comment">// &#x27;Error&#x27;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(e.<span class="property">message</span>); <span class="comment">// &#x27;The message&#x27;, or a JavaScript error message</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h2><p>Functions are one of the fundamental building blocks in JavaScript. A function in JavaScript is a set of statements that performs a task or calculates a value, and it takes some input and return an output. To use a function, you must define it somewhere in the scope from which you wish to call it.</p><h3 id="Defining-functions"><a href="#Defining-functions" class="headerlink" title="Defining functions"></a>Defining functions</h3><h4 id="Function-declaration"><a href="#Function-declaration" class="headerlink" title="Function declaration"></a>Function declaration</h4><p>A function definition (also called a function declaration, or function statement) consists of the <code>function</code> keyword, followed by:</p><ul><li>The name of the function.</li><li>A list of parameters to the function, enclosed in parentheses and separated by commas.</li><li>The JavaScript statements that define the function, enclosed in curly brackets.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">square</span>(<span class="params">number</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> number * number;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Parameters are essentially passed to functions by value. When you pass an object as a parameter, if the function changes the object’s properties, that change is visible outside the function.</p><h4 id="Function-expressions"><a href="#Function-expressions" class="headerlink" title="Function expressions"></a>Function expressions</h4><p>While the function declaration above is syntactically a <em>statement</em>, functions can also be created by a function <em>expression</em>.</p><p>Such a function can be anonymous; it does not have to have a name.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> square = <span class="keyword">function</span> (<span class="params">number</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> number * number;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">square</span>(<span class="number">4</span>)); <span class="comment">// 16</span></span><br></pre></td></tr></table></figure><p>However, a name can be provided with a function expression. Providing a name allows the function to refer to itself.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> factorial = <span class="keyword">function</span> <span class="title function_">fac</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> n &lt; <span class="number">2</span> ? <span class="number">1</span> : n * <span class="title function_">fac</span>(n - <span class="number">1</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">factorial</span>(<span class="number">3</span>)); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><p>A function expression is created when the execution reaches it and is usable only from that moment.</p><p>A function declarations is processed before the code block is executed. It is visible everywhere in the block.</p><p>In strict mode, when a function declaration is within a code block, it’s visible everywhere inside that block. But not outside of it.</p><h4 id="Arrow-functions"><a href="#Arrow-functions" class="headerlink" title="Arrow functions"></a>Arrow functions</h4><p>An arrow function <em>expression</em> (also called a fat arrow to distinguish from a hypothetical <code>-&gt;</code> syntax in future JavaScript) is a compact alternative to a traditional function expression, with some semantic differences and deliberate limitations in usage:</p><ul><li>Arrow functions don’t have their own <code>this</code>, <code>arguments</code>, or <code>super</code>, and should not be used as methods.</li><li>Arrow functions cannot be used as constructors. Calling them with <code>new</code> throws a <code>TypeError</code>. They also don’t have access to the <code>new.target</code> keyword.</li><li>Arrow functions cannot use <code>yield</code> within their body and cannot be created as generator functions.</li></ul><p> Arrow functions are always anonymous.</p><h5 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">() =&gt; expression</span><br><span class="line"></span><br><span class="line">param =&gt; expression</span><br><span class="line"></span><br><span class="line">(param) =&gt; expression</span><br><span class="line"></span><br><span class="line">(param1, paramN) =&gt; expression</span><br><span class="line"></span><br><span class="line">() =&gt; &#123;</span><br><span class="line">  statements</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">param =&gt; &#123;</span><br><span class="line">  statements</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(param1, paramN) =&gt; &#123;</span><br><span class="line">  statements</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Shorter-functions"><a href="#Shorter-functions" class="headerlink" title="Shorter functions"></a>Shorter functions</h5><p>In some functional patterns, shorter functions are welcome. Compare:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = [<span class="string">&quot;Hydrogen&quot;</span>, <span class="string">&quot;Helium&quot;</span>, <span class="string">&quot;Lithium&quot;</span>, <span class="string">&quot;Beryllium&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a2 = a.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">s</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> s.<span class="property">length</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a2); <span class="comment">// [8, 6, 7, 9]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a3 = a.<span class="title function_">map</span>(<span class="function">(<span class="params">s</span>) =&gt;</span> s.<span class="property">length</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a3); <span class="comment">// [8, 6, 7, 9]</span></span><br></pre></td></tr></table></figure><h5 id="No-separate-this"><a href="#No-separate-this" class="headerlink" title="No separate this"></a>No separate <code>this</code></h5><p>Until arrow functions, every new function defined its own <code>this</code> value (a new object in the case of a constructor, <code>undefined</code> in strict mode function calls, the base object if the function is called as an “object method”, etc.). This proved to be less than ideal with an object-oriented style of programming.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// The Person() constructor defines `this` as itself.</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">setInterval</span>(<span class="keyword">function</span> <span class="title function_">growUp</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// In nonstrict mode, the growUp() function defines `this`</span></span><br><span class="line">    <span class="comment">// as the global object, which is different from the `this`</span></span><br><span class="line">    <span class="comment">// defined by the Person() constructor.</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span>++;</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In ECMAScript 3&#x2F;5, this issue was fixed by assigning the value in this to a variable that could be closed over.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// Some choose `that` instead of `self`.</span></span><br><span class="line">  <span class="keyword">const</span> self = <span class="variable language_">this</span>;</span><br><span class="line">  self.<span class="property">age</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">setInterval</span>(<span class="keyword">function</span> <span class="title function_">growUp</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// The callback refers to the `self` variable of which</span></span><br><span class="line">    <span class="comment">// the value is the expected object.</span></span><br><span class="line">    self.<span class="property">age</span>++;</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br></pre></td></tr></table></figure><p>Alternatively, a bound function could be created so that the proper <code>this</code> value would be passed to the <code>growUp()</code> function.</p><p>An arrow function does not have its own <code>this</code>; the <code>this</code> value of the enclosing execution context is used. Thus, in the following code, the <code>this</code> within the function that is passed to <code>setInterval</code> has the same value as <code>this</code> in the enclosing function:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span>++; <span class="comment">// `this` properly refers to the person object</span></span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br></pre></td></tr></table></figure><h5 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h5><p>The parentheses can only be omitted if the function has a single simple parameter. The braces can only be omitted if the function directly returns an expression.</p><p>Arrow functions can have either a concise body or the usual block body. In a concise body, only a single expression is specified, which becomes the implicit return value. In a block body, you must use an explicit <code>return</code> statement.</p><p>Returning object literals using the concise body syntax <code>(params) =&gt; &#123; object: literal &#125;</code> does not work as expected. To fix this, wrap the object literal in parentheses:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">func</span> = (<span class="params"></span>) =&gt; (&#123; <span class="attr">foo</span>: <span class="number">1</span> &#125;);</span><br></pre></td></tr></table></figure><p>An arrow function cannot contain a line break between its parameters and its arrow.</p><p>Although the arrow in an arrow function is not an operator, <code>=&gt;</code> has a lower precedence than most operators.</p><p>In addition to defining functions as described here, you can also use the Function constructor to create functions from a string at runtime, much like <code>eval()</code>.</p><h2 id="Loops-and-iteration"><a href="#Loops-and-iteration" class="headerlink" title="Loops and iteration"></a>Loops and iteration</h2><p>There are many different kinds of loops, but they all essentially do the same thing: they repeat an action some number of times.</p><p>The statements for loops provided in JavaScript are:</p><ul><li><code>for</code> statement</li><li><code>do...while</code> statement</li><li><code>while</code> statement</li><li>Labeled statement</li><li><code>break</code> statement</li><li><code>continue</code> statement</li><li><code>for...in</code> statement</li><li><code>for...of</code> statement</li></ul><h3 id="for-statement"><a href="#for-statement" class="headerlink" title="for statement"></a><code>for</code> statement</h3><p>A <code>for</code> loop repeats until a specified condition evaluates to false.</p><p>A <code>for</code> statement looks as follows:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (initialization; condition; afterthought)</span><br><span class="line">  statement</span><br></pre></td></tr></table></figure><h3 id="do-while-statement"><a href="#do-while-statement" class="headerlink" title="do...while statement"></a><code>do...while</code> statement</h3><p>The <code>do...while</code> statement repeats until a specified condition evaluates to false.</p><p>A <code>do...while</code> statement looks as follows:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span></span><br><span class="line">  statement</span><br><span class="line"><span class="keyword">while</span> (condition);</span><br></pre></td></tr></table></figure><h3 id="while-statement"><a href="#while-statement" class="headerlink" title="while statement"></a><code>while</code> statement</h3><p>A <code>while</code> statement executes its statements as long as a specified condition evaluates to true.</p><p>A <code>while</code> statement looks as follows:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (condition)</span><br><span class="line">  statement</span><br></pre></td></tr></table></figure><h3 id="Labeled-statement"><a href="#Labeled-statement" class="headerlink" title="Labeled statement"></a>Labeled statement</h3><p>A <code>label</code> provides a statement with an identifier that lets you refer to it elsewhere in your program.</p><p>The syntax of the labeled statement looks like the following:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">label</span>:</span><br><span class="line">  statement</span><br></pre></td></tr></table></figure><p>The value of <code>label</code> may be any JavaScript identifier that is not a reserved word. The statement that you identify with a <code>label</code> may be any statement.</p><h3 id="break-statement"><a href="#break-statement" class="headerlink" title="break statement"></a><code>break</code> statement</h3><p>Use the <code>break</code> statement to terminate a loop, switch, or in conjunction with a labeled statement.</p><ul><li>When you use <code>break</code> without a label, it terminates the innermost enclosing <code>while</code>, <code>do-while</code>, <code>for</code>, or <code>switch</code> immediately and transfers control to the following statement.</li><li>When you use <code>break</code> with a label, it terminates the specified labeled statement.</li></ul><p>The syntax of the break statement looks like this:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">break</span> label;</span><br></pre></td></tr></table></figure><h3 id="continue-statement"><a href="#continue-statement" class="headerlink" title="continue statement"></a><code>continue</code> statement</h3><p>The <code>continue</code> statement can be used to restart a <code>while</code>, <code>do-while</code>, <code>for</code>, or <code>label</code> statement.</p><ul><li>When you use <code>continue</code> without a label, it terminates the current iteration of the innermost enclosing <code>while</code>, <code>do-while</code>, or <code>for</code> statement and continues execution of the loop with the next iteration. In a <code>while</code> loop, it jumps back to the condition. In a <code>for</code> loop, it jumps to the increment-expression.</li><li>When you use <code>continue</code> with a label, it applies to the looping statement identified with that label.</li></ul><p>The syntax of the continue statement looks like the following:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">continue</span> label;</span><br></pre></td></tr></table></figure><h3 id="for-in-statement"><a href="#for-in-statement" class="headerlink" title="for...in statement"></a><code>for...in</code> statement</h3><p>The <code>for...in</code> statement iterates a specified variable over all the enumerable properties of an object.</p><p>A <code>for...in</code> statement looks as follows:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (variable <span class="keyword">in</span> object)</span><br><span class="line">  statement</span><br></pre></td></tr></table></figure><p>Although it may be tempting to use <code>for...in</code> as a way to iterate over <code>Array</code> elements, the <code>for...in</code> statement will return the name of your <em>user-defined properties</em> in addition to the numeric <em>indexes</em>.</p><h3 id="for-of-statement"><a href="#for-of-statement" class="headerlink" title="for...of statement"></a><code>for...of</code> statement</h3><p>The <code>for...of</code> statement creates a loop iterating over iterable objects (including <code>Array</code>, <code>Map</code>, <code>Set</code>, <code>arguments</code> object and so on), invoking a custom iteration hook with statements to be executed for the value of each distinct property.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (variable <span class="keyword">of</span> object)</span><br><span class="line">  statement</span><br></pre></td></tr></table></figure><p>While <code>for...in</code> iterates over <em>property names</em>, <code>for...of</code> iterates over <em>property values</em>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>];</span><br><span class="line">arr.<span class="property">foo</span> = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> i <span class="keyword">in</span> arr) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &quot;0&quot; &quot;1&quot; &quot;2&quot; &quot;foo&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> i <span class="keyword">of</span> arr) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Logs: 3 5 7</span></span><br></pre></td></tr></table></figure><h2 id="Indexed-collections"><a href="#Indexed-collections" class="headerlink" title="Indexed collections"></a>Indexed collections</h2><p>Indexed collections include arrays and array-like constructs such as <code>Array</code> objects and <code>TypedArray</code> objects.</p><p>An array is an ordered list of values that you refer to with a name and an index.</p><p>JavaScript does not have an explicit array data type. However, you can use the predefined <code>Array</code> object and its methods to work with arrays in your applications.</p><h3 id="Creating-an-array"><a href="#Creating-an-array" class="headerlink" title="Creating an array"></a>Creating an array</h3><p>The following statements create equivalent arrays:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = <span class="keyword">new</span> <span class="title class_">Array</span>(element0, element1, <span class="comment">/* …, */</span> elementN);</span><br><span class="line"><span class="keyword">const</span> arr2 = <span class="title class_">Array</span>(element0, element1, <span class="comment">/* …, */</span> elementN);</span><br><span class="line"><span class="keyword">const</span> arr3 = [element0, element1, <span class="comment">/* …, */</span> elementN];</span><br></pre></td></tr></table></figure><p>The bracket syntax is called an “array literal” or “array initializer.”</p><p>If you put two commas in a row in an array literal, the array leaves an empty slot for the unspecified element.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fish = [<span class="string">&quot;Lion&quot;</span>, , <span class="string">&quot;Angel&quot;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fish);</span><br><span class="line"><span class="comment">// [ &#x27;Lion&#x27;, &lt;1 empty item&gt;, &#x27;Angel&#x27; ]</span></span><br></pre></td></tr></table></figure><p>Note that the second item is “empty”, which is not exactly the same as the actual <code>undefined</code> value. When using array-traversing methods like <code>Array.prototype.map</code>, empty slots are skipped. However, index-accessing <code>fish[1]</code> still returns <code>undefined</code>.</p><p>If you include a trailing comma at the end of the list of elements, the comma is ignored.</p><p>However, when writing your own code, you should explicitly declare the missing elements as <code>undefined</code>, or at least insert a comment to highlight its absence. Doing this increases your code’s clarity and maintainability.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myList = [<span class="string">&quot;home&quot;</span>, <span class="comment">/* empty */</span>, <span class="string">&quot;school&quot;</span>, <span class="comment">/* empty */</span>, ];</span><br></pre></td></tr></table></figure><p>To create an array with non-zero length, but without any items, either of the following can be used:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// This...</span></span><br><span class="line"><span class="keyword">const</span> arr1 = <span class="keyword">new</span> <span class="title class_">Array</span>(arrayLength);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...results in the same array as this</span></span><br><span class="line"><span class="keyword">const</span> arr2 = <span class="title class_">Array</span>(arrayLength);</span><br><span class="line"></span><br><span class="line"><span class="comment">// This has exactly the same effect</span></span><br><span class="line"><span class="keyword">const</span> arr3 = [];</span><br><span class="line">arr3.<span class="property">length</span> = arrayLength;</span><br></pre></td></tr></table></figure><p><code>arrayLength</code> must be a number. Otherwise, an array with a single element (the provided value) will be created. Calling <code>Array(N)</code> results in a <code>RangeError</code>, if N is a non-whole number whose fractional portion is non-zero.</p><p>If your code needs to create arrays with single elements of an arbitrary data type, it is safer to use array literals. Alternatively, create an empty array first before adding the single element to it.</p><p>You can also use the <code>Array.of</code> static method to create arrays with single element.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> wisenArray = <span class="title class_">Array</span>.<span class="title function_">of</span>(<span class="number">9.3</span>); <span class="comment">// wisenArray contains only one element 9.3</span></span><br></pre></td></tr></table></figure><h3 id="Referring-to-array-elements"><a href="#Referring-to-array-elements" class="headerlink" title="Referring to array elements"></a>Referring to array elements</h3><p>Because elements are also <em>properties</em>, you can access them using property accessors.</p><p>You can also use property accessors to access other properties of the array, like with an object.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&quot;one&quot;</span>, <span class="string">&quot;two&quot;</span>, <span class="string">&quot;three&quot;</span>];</span><br><span class="line">arr[<span class="number">2</span>]; <span class="comment">// three</span></span><br><span class="line">arr[<span class="string">&quot;length&quot;</span>]; <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h3 id="Populating-an-array"><a href="#Populating-an-array" class="headerlink" title="Populating an array"></a>Populating an array</h3><p>You can populate an array by assigning values to its elements.</p><p>If you supply a non-integer value to the array operator in the code above, a property will be created in the object representing the array, instead of an array element.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [];</span><br><span class="line">arr[<span class="number">3.4</span>] = <span class="string">&quot;Oranges&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="property">length</span>); <span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">hasOwn</span>(arr, <span class="number">3.4</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="Understanding-length"><a href="#Understanding-length" class="headerlink" title="Understanding length"></a>Understanding <code>length</code></h3><p>At the implementation level, JavaScript’s arrays actually store their elements as standard object properties, using the array index as the <em>property name</em>.</p><p>The value of <code>length</code> property is always a positive integer greater than the index of the last element if one exists.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cats = [];</span><br><span class="line">cats[<span class="number">30</span>] = [<span class="string">&quot;Dusty&quot;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cats.<span class="property">length</span>); <span class="comment">// 31</span></span><br></pre></td></tr></table></figure><p>You can also assign to the <code>length</code> property.</p><p>Writing a value that is shorter than the number of stored items truncates the array. Writing <code>0</code> empties it entirely:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cats = [<span class="string">&quot;Dusty&quot;</span>, <span class="string">&quot;Misty&quot;</span>, <span class="string">&quot;Twiggy&quot;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cats.<span class="property">length</span>); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line">cats.<span class="property">length</span> = <span class="number">2</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cats); <span class="comment">// [ &#x27;Dusty&#x27;, &#x27;Misty&#x27; ] - Twiggy has been removed</span></span><br><span class="line"></span><br><span class="line">cats.<span class="property">length</span> = <span class="number">0</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cats); <span class="comment">// []; the cats array is empty</span></span><br><span class="line"></span><br><span class="line">cats.<span class="property">length</span> = <span class="number">3</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cats); <span class="comment">// [ &lt;3 empty items&gt; ]</span></span><br></pre></td></tr></table></figure><h3 id="Iterating-over-arrays"><a href="#Iterating-over-arrays" class="headerlink" title="Iterating over arrays"></a>Iterating over arrays</h3><p>The most common way to iterate over the values of an array is using for <code>loop</code>.</p><p>If you know that none of the elements in your array evaluate to <code>false</code> in a boolean context—if your array consists only of DOM nodes, for example—you can use a more efficient idiom:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> divs = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, div; (div = divs[i]); i++) &#123;</span><br><span class="line">  <span class="comment">/* Process div in some way */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <code>forEach()</code> method provides another way of iterating over an array:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;blue&quot;</span>];</span><br><span class="line">colors.<span class="title function_">forEach</span>(<span class="function">(<span class="params">color</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(color));</span><br><span class="line"><span class="comment">// red</span></span><br><span class="line"><span class="comment">// green</span></span><br><span class="line"><span class="comment">// blue</span></span><br></pre></td></tr></table></figure><p>The function passed to <code>forEach</code> is executed once for every item in the array, with the array item passed as the argument to the function. <em>Unassigned</em> values are not iterated in a <code>forEach</code> loop.</p><p>Note that the elements of an array that are <em>omitted</em> when the array is defined are not listed when iterating by <code>forEach</code>, but are listed when <code>undefined</code> has been manually assigned to the element.</p><p>The <code>for...of</code> statement executes a loop that operates on a sequence of values sourced from an iterable object including instances of built-ins such as <code>Array</code>, <code>String</code>, <code>TypedArray</code>, <code>Map</code>, <code>Set</code>, <code>NodeList</code>, etc.</p><p>Since JavaScript array elements are saved as standard object properties, it is not advisable to iterate through arrays using <code>for...in</code> loops, because normal elements and all enumerable properties will be listed.</p><h3 id="Array-methods"><a href="#Array-methods" class="headerlink" title="Array methods"></a>Array methods</h3><ul><li><code>concat()</code> method joins two or more arrays and returns a new array.</li><li><code>join()</code> method joins all elements of an array into a string.</li><li><code>push()</code> method adds one or more elements to the end of an array and returns the resulting length of the array.</li><li><code>pop()</code> method removes the last element from an array and returns that element.</li><li><code>shift()</code> method removes the first element from an array and returns that element.</li><li><code>unshift()</code> method adds one or more elements to the front of an array and returns the new length of the array.</li><li><code>slice()</code> method extracts a section of an array and returns a new array.</li><li><code>at()</code> method returns the element at the specified index in the array, or <code>undefined</code> if the index is out of range. It’s notably used for <em>negative indices</em> that access elements from the end of the array.</li><li><code>splice()</code> method removes elements from an array and (optionally) replaces them. It returns the items which were removed from the array.</li><li><code>reverse()</code> method transposes the elements of an array, in place.</li><li><code>flat()</code> method returns a new array with all sub-array elements concatenated into it recursively up to the specified depth.</li><li><code>sort()</code> method sorts the elements of an array <em>in place</em>, and returns a reference to the array. <code>sort()</code> can also take a callback function to determine how array elements are compared.</li><li><code>indexOf()</code> method searches the array for the specified value and returns the index of the first match.</li><li><code>lastIndexOf()</code> method works like <code>indexOf</code>, but starts at the end and searches backwards.</li><li><code>includes()</code> method determines whether the calling array contains a value, returning <code>true</code> or <code>false</code> as appropriate.</li><li><code>forEach()</code> method executes callback on every array item and returns <code>undefined</code>.</li><li><code>map()</code> method returns a new array of the return value from executing callback on every array item.</li><li><code>flatMap()</code> method runs <code>map()</code> followed by a <code>flat()</code> of depth 1.</li><li><code>filter()</code> method returns a new array containing the items for which callback returned <code>true</code>.</li><li><code>find()</code> method returns the first item for which callback returned <code>true</code>.</li><li><code>findLast()</code> method returns the last item for which callback returned <code>true</code>.</li><li><code>findIndex()</code> method returns the index of the first item for which callback returned <code>true</code>.</li><li><code>findLastIndex()</code> method returns the index of the last item for which callback returned <code>true</code>.</li><li><code>every()</code> method returns <code>true</code> if callback returns <code>true</code> for every item in the array.</li><li><code>some()</code> method returns <code>true</code> if callback returns <code>true</code> for at least one item in the array.</li><li><code>reduce()</code> method applies <code>callback(accumulator, currentValue, currentIndex, array)</code> for each value in the array for the purpose of reducing the list of items down to a single value. The reduce function returns the final value returned by callback function.</li><li><code>reduceRight()</code> method works like <code>reduce()</code>, but starts with the last element.</li></ul><h2 id="Keyed-collections"><a href="#Keyed-collections" class="headerlink" title="Keyed collections"></a>Keyed collections</h2><p>Keyed collections are indexed by a key; <code>Map</code> and <code>Set</code> objects contain elements which are iterable in the order of insertion.</p><h3 id="Maps"><a href="#Maps" class="headerlink" title="Maps"></a>Maps</h3><h4 id="Map-object"><a href="#Map-object" class="headerlink" title="Map object"></a><code>Map</code> object</h4><p>A <code>Map</code> object is a simple key&#x2F;value map and can iterate its elements in insertion order.</p><p>You can use a <code>for...of</code> loop to return an array of <code>[key, value]</code> for each iteration.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sayings = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">sayings.<span class="title function_">set</span>(<span class="string">&quot;dog&quot;</span>, <span class="string">&quot;woof&quot;</span>);</span><br><span class="line">sayings.<span class="title function_">set</span>(<span class="string">&quot;cat&quot;</span>, <span class="string">&quot;meow&quot;</span>);</span><br><span class="line">sayings.<span class="property">size</span>; <span class="comment">// 2</span></span><br><span class="line">sayings.<span class="title function_">get</span>(<span class="string">&quot;dog&quot;</span>); <span class="comment">// woof</span></span><br><span class="line">sayings.<span class="title function_">get</span>(<span class="string">&quot;fox&quot;</span>); <span class="comment">// undefined</span></span><br><span class="line">sayings.<span class="title function_">has</span>(<span class="string">&quot;bird&quot;</span>); <span class="comment">// false</span></span><br><span class="line">sayings.<span class="title function_">delete</span>(<span class="string">&quot;dog&quot;</span>);</span><br><span class="line">sayings.<span class="title function_">has</span>(<span class="string">&quot;dog&quot;</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> [key, value] <span class="keyword">of</span> sayings) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;key&#125;</span> goes <span class="subst">$&#123;value&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &quot;cat goes meow&quot;</span></span><br><span class="line"></span><br><span class="line">sayings.<span class="title function_">clear</span>();</span><br><span class="line">sayings.<span class="property">size</span>; <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><h4 id="Object-and-Map-compared"><a href="#Object-and-Map-compared" class="headerlink" title="Object and Map compared"></a>Object and <code>Map</code> compared</h4><p>Traditionally, objects have been used to map strings to values. Objects allow you to set keys to values, retrieve those values, delete keys, and detect whether something is stored at a key. <code>Map</code> objects, however, have a few more advantages.</p><ul><li>The keys of an <code>Object</code> are Strings or Symbols, where they can be of any value for a <code>Map</code>.</li><li>You can get the size of a Map easily, while you have to manually keep track of size for an <code>Object</code>.</li><li>The iteration of maps is in insertion order of the elements.</li><li>An <code>Object</code> has a prototype, so there are default keys in the object. This can be bypassed using <code>object = Object.create(null)</code>.</li></ul><h3 id="Sets"><a href="#Sets" class="headerlink" title="Sets"></a>Sets</h3><h4 id="Set-object"><a href="#Set-object" class="headerlink" title="Set object"></a><code>Set</code> object</h4><p><code>Set</code> objects are collections of unique values. You can iterate its elements in insertion order.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mySet = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">mySet.<span class="title function_">add</span>(<span class="number">1</span>);</span><br><span class="line">mySet.<span class="title function_">add</span>(<span class="string">&quot;some text&quot;</span>);</span><br><span class="line">mySet.<span class="title function_">add</span>(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line"></span><br><span class="line">mySet.<span class="title function_">has</span>(<span class="number">1</span>); <span class="comment">// true</span></span><br><span class="line">mySet.<span class="title function_">delete</span>(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line">mySet.<span class="property">size</span>; <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> mySet) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// &quot;some text&quot;</span></span><br></pre></td></tr></table></figure><h4 id="Converting-between-Array-and-Set"><a href="#Converting-between-Array-and-Set" class="headerlink" title="Converting between Array and Set"></a>Converting between <code>Array</code> and <code>Set</code></h4><p>You can create an <code>Array</code> from a <code>Set</code> using <code>Array.from</code> or the spread syntax. Also, the <code>Set</code> constructor accepts an <code>Array</code> to convert in the other direction, while any duplicate elements from the array are deleted when converting.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="title function_">from</span>(mySet);</span><br><span class="line">[...mySet2];</span><br><span class="line">mySet2 = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]);</span><br></pre></td></tr></table></figure><h4 id="Array-and-Set-compared"><a href="#Array-and-Set-compared" class="headerlink" title="Array and Set compared"></a><code>Array</code> and <code>Set</code> compared</h4><p>The <code>Set</code> object, however, has some advantages:</p><ul><li>Deleting <code>Array</code> elements by value (<code>arr.splice(arr.indexOf(val), 1)</code>) is very slow.</li><li><code>Set</code> objects let you delete elements by their value. With an array, you would have to splice based on an element’s index.</li><li>The value <code>NaN</code> cannot be found with <code>indexOf</code> in an array.</li><li><code>Set</code> objects store unique values. You don’t have to manually keep track of duplicates.</li></ul><h3 id="Key-and-value-equality-of-Map-and-Set"><a href="#Key-and-value-equality-of-Map-and-Set" class="headerlink" title="Key and value equality of Map and Set"></a>Key and value equality of <code>Map</code> and <code>Set</code></h3><p>Both the key equality of <code>Map</code> objects and the value equality of <code>Set</code> objects are based on the SameValueZero algorithm:</p><ul><li>Equality works like the identity comparison operator <code>===</code>.</li><li><code>-0</code> and <code>+0</code> are considered equal.</li><li><code>NaN</code> is considered equal to itself (contrary to <code>===</code>).</li></ul><h2 id="Working-with-objects"><a href="#Working-with-objects" class="headerlink" title="Working with objects"></a>Working with objects</h2><p>JavaScript is designed on a <em>simple</em> object-based paradigm. An object is a collection of <em>properties</em>, and a property is an association between a name (or key) and a value. A property’s value can be a function, in which case the property is known as a <em>method</em>.</p><h3 id="Creating-new-objects"><a href="#Creating-new-objects" class="headerlink" title="Creating new objects"></a>Creating new objects</h3><p>You can create an object using an <strong>object initializer</strong>. Alternatively, you can first create a <strong>constructor function</strong> and then instantiate an object by invoking that function with the <code>new</code> operator.</p><h4 id="Using-object-initializers"><a href="#Using-object-initializers" class="headerlink" title="Using object initializers"></a>Using object initializers</h4><p>Object initializers are also called <strong>object literals</strong>.</p><p>The syntax for an object using an object initializer is:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">o = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="string">&quot;foo&quot;</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="number">42</span>,</span><br><span class="line">  <span class="attr">c</span>: &#123;&#125;,</span><br><span class="line">  <span class="number">1</span>: <span class="string">&quot;number literal property&quot;</span>,</span><br><span class="line">  <span class="string">&quot;foo:bar&quot;</span>: <span class="string">&quot;string literal property&quot;</span>,</span><br><span class="line"></span><br><span class="line">  shorthandProperty,</span><br><span class="line"></span><br><span class="line">  <span class="title function_">method</span>(<span class="params">parameters</span>) &#123;</span><br><span class="line">    <span class="comment">// …</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">property</span>() &#123;&#125;,</span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">property</span>(<span class="params">value</span>) &#123;&#125;,</span><br><span class="line">  [expression]: <span class="string">&quot;computed property&quot;</span>,</span><br><span class="line">  <span class="attr">__proto__</span>: prototype,</span><br><span class="line">  ...spreadProperty,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Each property name is an identifier (either a name, a number, or a string literal), and each value is an expression whose value is assigned to the property name. The property name can also be an expression; computed keys need to be wrapped in square brackets.</p><p>Objects created with initializers are called plain objects, because they are instances of <code>Object</code>, but not any other object type.</p><h4 id="Using-a-constructor-function"><a href="#Using-a-constructor-function" class="headerlink" title="Using a constructor function"></a>Using a constructor function</h4><p>Alternatively, you can create an object with these two steps:</p><ul><li>Define the object type by writing a constructor function. There is a strong convention, with good reason, to use a capital initial letter.</li><li>Create an instance of the object with <code>new</code>.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Car</span>(<span class="params">make, model, year</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">make</span> = make;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">model</span> = model;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">year</span> = year;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myCar = <span class="keyword">new</span> <span class="title class_">Car</span>(<span class="string">&quot;Eagle&quot;</span>, <span class="string">&quot;Talon TSi&quot;</span>, <span class="number">1993</span>);</span><br></pre></td></tr></table></figure><p>Notice the use of <code>this</code> to assign values to the object’s properties based on the values passed to the function.</p><p>You can also use the class syntax instead of the function syntax to define a constructor function.</p><h4 id="Using-the-Object-create-method"><a href="#Using-the-Object-create-method" class="headerlink" title="Using the Object.create() method"></a>Using the <code>Object.create()</code> method</h4><p>Objects can also be created using the <code>Object.create()</code> method. This method can be very useful, because it allows you to choose the prototype object for the object you want to create, without having to define a constructor function.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Animal properties and method encapsulation</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Animal</span> = &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&quot;Invertebrates&quot;</span>, <span class="comment">// Default value of properties</span></span><br><span class="line">  <span class="title function_">displayType</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// Method which will display type of Animal</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">type</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create new animal type called animal1</span></span><br><span class="line"><span class="keyword">const</span> animal1 = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Animal</span>);</span><br><span class="line">animal1.<span class="title function_">displayType</span>(); <span class="comment">// Logs: Invertebrates</span></span><br></pre></td></tr></table></figure><h3 id="Objects-and-properties"><a href="#Objects-and-properties" class="headerlink" title="Objects and properties"></a>Objects and properties</h3><p>A JavaScript object has properties associated with it. Object properties are basically the same as variables, except that they are associated with objects, not scopes.</p><p>Property names can only be strings or Symbols — all keys are converted to strings unless they are Symbols. Array indices are, in fact, properties with string keys that contain integers.</p><h4 id="Accessing-properties"><a href="#Accessing-properties" class="headerlink" title="Accessing properties"></a>Accessing properties</h4><p>You can access a property of an object by its property name. Property accessors come in two syntaxes: dot notation and bracket notation.</p><p>An object property name can be any JavaScript string or symbol, including an empty string. However, you cannot use dot notation to access a property whose name is not a valid JavaScript identifier.</p><p>Bracket notation is also very useful when property names are to be dynamically determined, i.e. not determinable until runtime.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myObj = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> str = <span class="string">&quot;myString&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> rand = <span class="title class_">Math</span>.<span class="title function_">random</span>();</span><br><span class="line"><span class="keyword">const</span> anotherObj = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create additional properties on myObj</span></span><br><span class="line">myObj.<span class="property">type</span> = <span class="string">&quot;Dot syntax for a key named type&quot;</span>;</span><br><span class="line">myObj[<span class="string">&quot;date created&quot;</span>] = <span class="string">&quot;This key has a space&quot;</span>;</span><br><span class="line">myObj[str] = <span class="string">&quot;This key is in variable str&quot;</span>;</span><br><span class="line">myObj[rand] = <span class="string">&quot;A random number is the key here&quot;</span>;</span><br><span class="line">myObj[anotherObj] = <span class="string">&quot;This key is object anotherObj&quot;</span>;</span><br><span class="line">myObj[<span class="string">&quot;&quot;</span>] = <span class="string">&quot;This key is an empty string&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myObj);</span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   type: &#x27;Dot syntax for a key named type&#x27;,</span></span><br><span class="line"><span class="comment">//   &#x27;date created&#x27;: &#x27;This key has a space&#x27;,</span></span><br><span class="line"><span class="comment">//   myString: &#x27;This key is in variable str&#x27;,</span></span><br><span class="line"><span class="comment">//   &#x27;0.6398914448618778&#x27;: &#x27;A random number is the key here&#x27;,</span></span><br><span class="line"><span class="comment">//   &#x27;[object Object]&#x27;: &#x27;This key is object anotherObj&#x27;,</span></span><br><span class="line"><span class="comment">//   &#x27;&#x27;: &#x27;This key is an empty string&#x27;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myObj.<span class="property">myString</span>); <span class="comment">// &#x27;This key is in variable str&#x27;</span></span><br></pre></td></tr></table></figure><p>In the above code, the key <code>anotherObj</code> is an object, which is neither a string nor a symbol. When it is added to the <code>myObj</code>, JavaScript calls the <code>toString()</code> method of <code>anotherObj</code>, and use the resulting string as the new key.</p><p>Beware of using square brackets to access properties whose names are given by external input. This may make your code susceptible to object injection attacks.</p><p>Nonexistent properties of an object have value <code>undefined</code> (and not <code>null</code>).</p><h4 id="Enumerating-properties"><a href="#Enumerating-properties" class="headerlink" title="Enumerating properties"></a>Enumerating properties</h4><p>There are three native ways to list&#x2F;traverse object properties:</p><ul><li><code>for...in</code> loops. This method traverses all of the enumerable <em>string</em> properties of an object as well as its <em>prototype chain</em>.</li><li><code>Object.keys(myObj)</code>. This method returns an array with only the enumerable <em>own string</em> property names (“keys”) in the object <code>myObj</code>, but not those in the prototype chain.</li><li><code>Object.getOwnPropertyNames(myObj)</code>. This method returns an array containing all the own <em>string</em> property names in the object <code>myObj</code>, regardless of if they are enumerable or not.</li></ul><p>You can use the bracket notation with <code>for...in</code> to iterate over all the enumerable properties of an object.</p><h4 id="Deleting-properties"><a href="#Deleting-properties" class="headerlink" title="Deleting properties"></a>Deleting properties</h4><p>You can remove a non-inherited property using the <code>delete</code> operator.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Creates a new object, myobj, with two properties, a and b.</span></span><br><span class="line"><span class="keyword">const</span> myobj = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">myobj.<span class="property">a</span> = <span class="number">5</span>;</span><br><span class="line">myobj.<span class="property">b</span> = <span class="number">12</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Removes the a property, leaving myobj with only the b property.</span></span><br><span class="line"><span class="keyword">delete</span> myobj.<span class="property">a</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a&quot;</span> <span class="keyword">in</span> myobj); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="Inheritance"><a href="#Inheritance" class="headerlink" title="Inheritance"></a>Inheritance</h3><p>All objects in JavaScript inherit from at least one other object. The object being inherited from is known as the <em>prototype</em>, and the inherited properties can be found in the <code>prototype</code> object of the constructor.</p><h4 id="Defining-properties-for-all-objects-of-one-type"><a href="#Defining-properties-for-all-objects-of-one-type" class="headerlink" title="Defining properties for all objects of one type"></a>Defining properties for all objects of one type</h4><p>You can add a property to all objects created through a certain <em>constructor</em> using the <code>prototype</code> property. This defines a property that is shared by all objects of the specified type, rather than by just one instance of the object.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Car</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">color</span> = <span class="string">&quot;red&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(car1.<span class="property">color</span>); <span class="comment">// &quot;red&quot;</span></span><br></pre></td></tr></table></figure><h3 id="Defining-methods"><a href="#Defining-methods" class="headerlink" title="Defining methods"></a>Defining methods</h3><p>A method is a function associated with an object, or, put differently, a method is a property of an object that is a function. Methods are defined the way normal functions are defined, except that they have to be assigned as the property of an object.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">objectName.<span class="property">methodName</span> = functionName;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myObj = &#123;</span><br><span class="line">  <span class="attr">myMethod</span>: <span class="keyword">function</span> (<span class="params">params</span>) &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// this works too!</span></span><br><span class="line">  <span class="title function_">myOtherMethod</span>(<span class="params">params</span>) &#123;</span><br><span class="line">    <span class="comment">// do something else</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Methods are typically defined on the <code>prototype</code> object of the <em>constructor</em>, so that all objects of the same type share the same method.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Car</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">displayCar</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> result = <span class="string">`A Beautiful <span class="subst">$&#123;<span class="variable language_">this</span>.year&#125;</span> <span class="subst">$&#123;<span class="variable language_">this</span>.make&#125;</span> <span class="subst">$&#123;<span class="variable language_">this</span>.model&#125;</span>`</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Notice the use of <code>this</code> to refer to the object to which the method belongs.</p><h4 id="Using-this-for-object-references"><a href="#Using-this-for-object-references" class="headerlink" title="Using this for object references"></a>Using <code>this</code> for object references</h4><p>JavaScript has a special keyword, <code>this</code>, that you can use within a method to refer to the current object.</p><p><code>this</code> is a “hidden parameter” of a function call that’s passed in by specifying the object before the function that was called. If you access the same function from another object, <code>this</code> will change as well. If you use other methods to call the function, like <code>Function.prototype.call()</code> or <code>Reflect.apply()</code>, you can explicitly pass the value of <code>this</code> as an argument.</p><h3 id="Defining-getters-and-setters"><a href="#Defining-getters-and-setters" class="headerlink" title="Defining getters and setters"></a>Defining getters and setters</h3><p>A getter is a function associated with a property that gets the value of a specific property. A setter is a function associated with a property that sets the value of a specific property. Together, they can indirectly represent the value of a property.</p><p>Getters and setters can be either</p><ul><li>defined within object initializers, or</li><li>added later to any existing object.</li></ul><p>Within object initializers, getters and setters are defined like regular methods, but prefixed with the keywords <code>get</code> or <code>set</code>. The getter method must not expect a parameter, while the setter method expects exactly one parameter (the new value to set). For instance:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myObj = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">7</span>,</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">b</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">a</span> + <span class="number">1</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">c</span>(<span class="params">x</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">a</span> = x / <span class="number">2</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Getters and setters can also be added to an object at any time after creation using the <code>Object.defineProperties()</code> method. This method’s first parameter is the object on which you want to define the getter or setter. The second parameter is an object whose property names are the getter or setter names, and whose property values are objects for defining the getter or setter functions.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myObj = &#123; <span class="attr">a</span>: <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperties</span>(myObj, &#123;</span><br><span class="line">  <span class="attr">b</span>: &#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">a</span> + <span class="number">1</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">c</span>: &#123;</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">x</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">a</span> = x / <span class="number">2</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Comparing-objects"><a href="#Comparing-objects" class="headerlink" title="Comparing objects"></a>Comparing objects</h3><p>In JavaScript, objects are a reference type. Two distinct objects are never equal, even if they have the same properties. Only comparing the same object reference with itself yields <code>true</code>.</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> variable </tag>
            
            <tag> javascript </tag>
            
            <tag> data types </tag>
            
            <tag> let </tag>
            
            <tag> const </tag>
            
            <tag> var </tag>
            
            <tag> operator </tag>
            
            <tag> function </tag>
            
            <tag> scope </tag>
            
            <tag> strict mode </tag>
            
            <tag> loop </tag>
            
            <tag> array </tag>
            
            <tag> object </tag>
            
            <tag> template literal </tag>
            
            <tag> regular expression </tag>
            
            <tag> control flow </tag>
            
            <tag> set </tag>
            
            <tag> map </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python Data Structures and Algorithms - Linked Lists</title>
      <link href="/posts/PDSA-Linked-Lists/"/>
      <url>/posts/PDSA-Linked-Lists/</url>
      
        <content type="html"><![CDATA[<style>    #intro {        text-align: center;    }    #intro .title {        font-size: 1.5rem;        font-weight: 700;        color: rgb(31, 45, 61);    }    #intro .subtitle {        font-size: 1.2rem;        font-weight: 700;        color: rgb(31, 45, 61);    }</style><div id="intro">    <p class="title">Linked Lists</h2>    <p class="subtitle">Learning Log: Python Data Structures and Algorithms - Linked Lists</h3></div><h2 id="What-is-a-linked-list"><a href="#What-is-a-linked-list" class="headerlink" title="What is a linked list"></a>What is a linked list</h2><p>A linked list is an abstract data type that acts as a linear collection of data elements organized as a collection of nodes that contains information about what that node contains and then a link to another node. This can take two main forms: It can be a <strong>singly linked list</strong>, which has only one direction of links between nodes, or a <strong>doubly-linked list</strong>, which can be linked to both the next and last item in the list, or a <strong>circularly-linked list</strong>.</p><p>The benefit of this over a regular array or list is that elements can be easily inserted and removed without changing the index of all other items. The memory used to store the linked list also doesn’t need to be reorganized because the data doesn’t have to be stored contiguously. However, you can’t access items in constant time (O(1)) like you can with an array because looking up an item in the list has a linear time complexity (O(n)).</p><h2 id="Types-of-linked-lists"><a href="#Types-of-linked-lists" class="headerlink" title="Types of linked lists"></a>Types of linked lists</h2><p>There are mainly three types of linked lists:</p><ul><li>Singly-linked list: Each node contains a reference to the next node in the sequence. Traversing a singly linked list is done in a forward direction.</li><li>Doubly-linked list: Each node contains references to both the next and previous nodes. This allows for traversal in both forward and backward directions, but it requires additional memory for the backward reference.</li><li>Circularly-linked list: The last node points back to the head node, creating a circular structure. It can be either singly or doubly linked.</li></ul><h2 id="Advantages-of-linked-lists"><a href="#Advantages-of-linked-lists" class="headerlink" title="Advantages of linked lists"></a>Advantages of linked lists</h2><ul><li>Dynamic size: Linked lists can grow or shrink dynamically, as memory allocation is done at runtime.</li><li>Insertion and deletion: Adding or removing elements from a linked list is efficient, especially for large lists.</li><li>Flexibility: Linked lists can be easily reorganized and modified without requiring a contiguous block of memory.</li></ul><h2 id="Disadvantages-of-linked-lists"><a href="#Disadvantages-of-linked-lists" class="headerlink" title="Disadvantages of linked lists"></a>Disadvantages of linked lists</h2><ul><li>Random access: Unlike arrays, linked lists do not allow direct access to elements by index. Traversal is required to reach a specific node.</li><li>Extra memory: Linked lists require additional memory for storing the pointers, compared to arrays.</li></ul><h2 id="Why-linked-list-data-structure-needed"><a href="#Why-linked-list-data-structure-needed" class="headerlink" title="Why linked list data structure needed"></a>Why linked list data structure needed</h2><ul><li>Dynamic data structure: The size of memory can be allocated or de-allocated at run time based on the operation insertion or deletion.</li><li>Ease of insertion&#x2F;deletion: The insertion and deletion of elements are simpler than arrays since no elements need to be shifted after insertion and deletion, just the address needed to be updated.</li><li>Efficient memory utilization: As we know linked list is a dynamic data structure the size increases or decreases as per the requirement so this avoids the wastage of memory.</li><li>Implementation: Various advanced data structures can be implemented using a linked list like a stack, queue, graph, hash maps, etc.</li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> linked list </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python Data Structures and Algorithms - Pointers</title>
      <link href="/posts/PDSA-Pointers/"/>
      <url>/posts/PDSA-Pointers/</url>
      
        <content type="html"><![CDATA[<style>    #intro {        text-align: center;    }    #intro .title {        font-size: 1.5rem;        font-weight: 700;        color: rgb(31, 45, 61);    }    #intro .subtitle {        font-size: 1.2rem;        font-weight: 700;        color: rgb(31, 45, 61);    }</style><div id="intro">    <p class="title">Pointers</h2>    <p class="subtitle">Learning Log: Python Data Structures and Algorithms - Pointers</h3></div><p>In low-level languages like C&#x2F;C++, variable declarations allocate space in memory according to the variable type; therefore, programmers must specify the variable type for each new variable. Using the language C, for example, suppose a new variable of type <code>char</code> is defined. The program will allocate space in the stack of size 1 byte, corresponding to the size of the type <code>char</code> in C. If the variable is then assigned the value <code>&#39;a&#39;</code>, the program stores the binary representation of <code>&#39;a&#39;</code> in the space allocated. Finally, without referencing any external object, the variable <em>directly</em> stores the value <code>&#39;a&#39;</code>.</p><p>Variables in Python work differently. Python does not have a variable type declaration; the same variable can be reassigned to objects of different types without having to modify the variable’s space in memory. Similar to <strong>pointers</strong> in C, <strong>variables in Python do not store values directly</strong>; they work with references <em>pointing</em> to objects in memory.</p><h2 id="Objects-in-Python"><a href="#Objects-in-Python" class="headerlink" title="Objects in Python"></a>Objects in Python</h2><p>Everything in Python is an <strong>object</strong>. Other languages like Java have <strong>primitive types</strong> that serve only for representing static values. <em>Primitive types in Java, for example, do not have any other attribute other than their values.</em> <em>In Python, on the other hand, even integers are objects (<a href="https://levelup.gitconnected.com/how-python-represents-integers-using-bignum-f8f0574d0d6b">more about Python’s integer representation</a>).</em></p><p>Python has the built-in function <code>dir()</code> that returns a list of <em>attributes</em> of an object. For the sake of demonstrating how integers in Python are objects, it is possible to call the function <code>dir()</code> with the input <code>1</code>.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="built_in">dir</span>(1)</span><br><span class="line">[<span class="string">&#x27;__abs__&#x27;</span>, <span class="string">&#x27;__add__&#x27;</span>, <span class="string">&#x27;__and__&#x27;</span>, <span class="string">&#x27;__bool__&#x27;</span>, <span class="string">&#x27;__ceil__&#x27;</span>, <span class="string">&#x27;__class__&#x27;</span>, <span class="string">&#x27;__delattr__&#x27;</span>, <span class="string">&#x27;__dir__&#x27;</span>, <span class="string">&#x27;__divmod__&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>, <span class="string">&#x27;__eq__&#x27;</span>, <span class="string">&#x27;__float__&#x27;</span>, <span class="string">&#x27;__floor__&#x27;</span>, <span class="string">&#x27;__floordiv__&#x27;</span>, <span class="string">&#x27;__format__&#x27;</span>, <span class="string">&#x27;__ge__&#x27;</span>, <span class="string">&#x27;__getattribute__&#x27;</span>, <span class="string">&#x27;__getnewargs__&#x27;</span>, <span class="string">&#x27;__getstate__&#x27;</span>, <span class="string">&#x27;__gt__&#x27;</span>, <span class="string">&#x27;__hash__&#x27;</span>, <span class="string">&#x27;__index__&#x27;</span>, <span class="string">&#x27;__init__&#x27;</span>, <span class="string">&#x27;__init_subclass__&#x27;</span>, <span class="string">&#x27;__int__&#x27;</span>, <span class="string">&#x27;__invert__&#x27;</span>, <span class="string">&#x27;__le__&#x27;</span>, <span class="string">&#x27;__lshift__&#x27;</span>, <span class="string">&#x27;__lt__&#x27;</span>, <span class="string">&#x27;__mod__&#x27;</span>, <span class="string">&#x27;__mul__&#x27;</span>, <span class="string">&#x27;__ne__&#x27;</span>, <span class="string">&#x27;__neg__&#x27;</span>, <span class="string">&#x27;__new__&#x27;</span>, <span class="string">&#x27;__or__&#x27;</span>, <span class="string">&#x27;__pos__&#x27;</span>, <span class="string">&#x27;__pow__&#x27;</span>, <span class="string">&#x27;__radd__&#x27;</span>, <span class="string">&#x27;__rand__&#x27;</span>, <span class="string">&#x27;__rdivmod__&#x27;</span>, <span class="string">&#x27;__reduce__&#x27;</span>, <span class="string">&#x27;__reduce_ex__&#x27;</span>, <span class="string">&#x27;__repr__&#x27;</span>, <span class="string">&#x27;__rfloordiv__&#x27;</span>, <span class="string">&#x27;__rlshift__&#x27;</span>, <span class="string">&#x27;__rmod__&#x27;</span>, <span class="string">&#x27;__rmul__&#x27;</span>, <span class="string">&#x27;__ror__&#x27;</span>, <span class="string">&#x27;__round__&#x27;</span>, <span class="string">&#x27;__rpow__&#x27;</span>, <span class="string">&#x27;__rrshift__&#x27;</span>, <span class="string">&#x27;__rshift__&#x27;</span>, <span class="string">&#x27;__rsub__&#x27;</span>, <span class="string">&#x27;__rtruediv__&#x27;</span>, <span class="string">&#x27;__rxor__&#x27;</span>, <span class="string">&#x27;__setattr__&#x27;</span>, <span class="string">&#x27;__sizeof__&#x27;</span>, <span class="string">&#x27;__str__&#x27;</span>, <span class="string">&#x27;__sub__&#x27;</span>, <span class="string">&#x27;__subclasshook__&#x27;</span>, <span class="string">&#x27;__truediv__&#x27;</span>, <span class="string">&#x27;__trunc__&#x27;</span>, <span class="string">&#x27;__xor__&#x27;</span>, <span class="string">&#x27;as_integer_ratio&#x27;</span>, <span class="string">&#x27;bit_count&#x27;</span>, <span class="string">&#x27;bit_length&#x27;</span>, <span class="string">&#x27;conjugate&#x27;</span>, <span class="string">&#x27;denominator&#x27;</span>, <span class="string">&#x27;from_bytes&#x27;</span>, <span class="string">&#x27;imag&#x27;</span>, <span class="string">&#x27;numerator&#x27;</span>, <span class="string">&#x27;real&#x27;</span>, <span class="string">&#x27;to_bytes&#x27;</span>]</span><br></pre></td></tr></table></figure><p>When a variable is assigned a value in Python, the variable does not store the absolute value directly. Instead, Python creates a new <em>reference</em> to an object representing that value. For example, the line <code>a = 1</code> assigns the value <code>1</code> to the variable <code>a</code>. Behind the scenes, Python creates a new reference for <code>a</code> to point at the object representing the value <code>1</code>.</p><h3 id="Creating-references"><a href="#Creating-references" class="headerlink" title="Creating references"></a>Creating references</h3><p>There are two ways of creating references in Python. One way is by assigning an expression to a variable: <code>var = expression</code>, where <code>var</code> is the variable’s name and <code>expression</code> is the value assigned to the variable.</p><p>Valid expressions reduce to <em>values</em> that can be represented by <em>objects</em> in Python. When assigning a valid expression to a variable, Python either <em>locates an object in memory</em> representing the value or it <em>creates a new object</em>. Once the object representation is <em>located</em> or <em>constructed</em>, Python creates a new reference for the variable to point at the object.</p><p>The second method of creating references in Python is by assigning a variable to another variable: <code>var1 = var2</code>, where both <code>var1</code> and <code>var2</code> are two distinct variables. For example, let the variable <code>var2</code> contain the value <code>2</code>. Now, if the variable <code>var1</code> is assigned the variable <code>var2</code>, both variables <code>var1</code> and <code>var2</code> reference the same object representing the value <code>2</code> but both variables <code>var1</code> and <code>var2</code> have different references.</p><p>Assigning one variable to another variable creates an <em>alias</em> of each variable. An alias is variable that points to the same object in memory as another variable.</p><h3 id="Destroying-references"><a href="#Destroying-references" class="headerlink" title="Destroying references"></a>Destroying references</h3><p>In Python, it is possible to destroy references. After assigning a variable or an expression to another variable, it is possible to destroy the reference created. The function <code>del()</code> destroys references. Returning to the example above, executing the command <code>del(var1)</code> results in destroying the reference from the variable <code>var1</code> to the object representing the value <code>2</code>.</p><p>Using the variable <code>var1</code> after deleting its reference would result in the following error:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line 1, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">NameError: name <span class="string">&#x27;var1&#x27;</span> is not defined</span><br></pre></td></tr></table></figure><p>Notice that <code>del()</code> does not destroy the object that the reference is pointing at. Python’s <strong>garbage collector</strong> is responsible for destroying objects. The garbage collector destroys an object when there are no more references that can access it. If the command <code>del(var2)</code> were executed in the example above and there were no more accessible references to the object representing the value <code>2</code>, Python’s garbage collector would destroy the object.</p><h2 id="Parameter-passing-styles"><a href="#Parameter-passing-styles" class="headerlink" title="Parameter passing styles"></a>Parameter passing styles</h2><p>The two common parameter passing styles are <em>pass-by-value</em> and <em>pass-by-reference</em>. Python, on the other hand, uses a variation of both of these styles called <em>pass-by-object-reference</em>.</p><p>For the sake of a running example explanation, suppose the following list <code>a</code> and function <code>modifyList</code> are defined.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">modifyList</span>(<span class="params">b</span>):</span><br><span class="line">  b.append(<span class="number">1</span>)</span><br><span class="line">  b = [<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">a = [<span class="number">0</span>]</span><br><span class="line">modifyList(a)</span><br></pre></td></tr></table></figure><h3 id="Pass-by-Value"><a href="#Pass-by-Value" class="headerlink" title="Pass-by-Value"></a>Pass-by-Value</h3><p>In pass-by-value style, parameters are passed as copies of the original variables. For example, if the function <code>modifyList()</code> is called with the list <code>a</code>, the program would create a copy of list <code>a</code> and use the copy inside the function’s scope. This method creates a complete independent reference and object representation for each argument. Any changes to the arguments inside the function will not affect the original variables passed in as parameters.</p><h3 id="Pass-by-Reference"><a href="#Pass-by-Reference" class="headerlink" title="Pass-by-Reference"></a>Pass-by-Reference</h3><p>In pass-by-reference style, parameters are passed as the same <em>reference</em> of the original variable. Any modification to the argument will directly modify the original variable outside of the function. Even a new assignment will cause the original reference to change. For example, suppose the function <code>modifyList()</code> is called with list <code>a</code>. When the third line is executed in the code above, the program creates a new reference pointing at the new list <code>[2]</code> and the variable <code>a</code> outside of the function is also modified to point at the same list. Therefore, no new reference or object is created; the function continues to use the same reference from the original variable.</p><h3 id="Pass-by-Object-Reference"><a href="#Pass-by-Object-Reference" class="headerlink" title="Pass-by-Object-Reference"></a>Pass-by-Object-Reference</h3><p>Finally, in pass-by-object-reference style, Python creates a new <em>reference</em> for each argument. However, contrary to pass-by-value style, Python does not make a copy of the original object. Instead, each new reference points at its <em>respective</em> original object.</p><p>Pass-by-object-reference style does not create a new object, allowing direct modification on the original object. The list method <code>append</code> on the second line is an example of a modification on the original object without directly passing the object to the function.</p><p>Similar to pass-by-value style, each function has its own <em>scope</em> in Python. Any new declarations to arguments within the function’s scope will not affect the original variables used as parameters. In the above example, the variable <code>b</code> is assigned a new list. This assignment has no implications on the variable <code>a</code> that was used to call the function. On the other hand, with pass-by-reference style, any new declarations on variable <code>b</code> would cause the same assignment to variable <code>a</code>.</p><p>The main implication of the pass-by-object-reference style is that <em>the function arguments become aliases of the original variables</em>. For <em>immutable</em> objects, creating the aliases has no impact on the overall program; however, for <em>mutable</em> objects, a Python programmer must be careful with in-place modifications. If the programmer does not want to modify the original object, it is possible to pass a copy of the original object to the function and make the modifications only to the copy.</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> pointer </tag>
            
            <tag> variable </tag>
            
            <tag> pass-by-value </tag>
            
            <tag> pass-by-reference </tag>
            
            <tag> object reference </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python Data Structures and Algorithms - Big O</title>
      <link href="/posts/PDSA-Big-O/"/>
      <url>/posts/PDSA-Big-O/</url>
      
        <content type="html"><![CDATA[<style>    #intro {        text-align: center;    }    #intro .title {        font-size: 1.5rem;        font-weight: 700;        color: rgb(31, 45, 61);    }    #intro .subtitle {        font-size: 1.2rem;        font-weight: 700;        color: rgb(31, 45, 61);    }</style><div id="intro">    <p class="title">Big O</h2>    <p class="subtitle">Learning Log: Python Data Structures and Algorithms - Big O</h3></div><h2 id="What-is-big-O-notation"><a href="#What-is-big-O-notation" class="headerlink" title="What is big O notation"></a>What is big O notation</h2><p>In computer science, big O notation is used to classify algorithms according to how their run time or space requirements grow as the input size grows.</p><p>Big O notation characterizes functions according to their growth rates: different functions with the same asymptotic growth rate may be represented using the same O notation. The letter O is used because the growth rate of a function is also referred to as the order of the function.</p><p>Big O is also known as the algorithm’s upper bound since it analyses the worst-case situation.</p><h2 id="How-to-measure-the-efficiency-of-an-algorithm"><a href="#How-to-measure-the-efficiency-of-an-algorithm" class="headerlink" title="How to measure the efficiency of an algorithm"></a>How to measure the efficiency of an algorithm</h2><p>Efficiency is measured in two ways: time complexity and space complexity.</p><p>A function’s time complexity measures how long it takes to execute in terms of computational steps. The space complexity of a function is determined by the amount of memory it uses.</p><p>The time complexity, computational complexity or temporal complexity describes the amount of time necessary to execute an algorithm. It is not a measure of the actual time taken to run an algorithm, instead, it is a measure of how the time taken scales with change in the input length.</p><p>The overall amount of memory or space utilized by an algorithm&#x2F;program, including the space of input values for execution, is called space complexity. To determine space complexity, simply compute how much space the variables in an algorithm&#x2F;a program take up.</p><p>Space Complexity &#x3D; Auxiliary space + Space used by input values.</p><p>The best algorithms&#x2F;programs should have the least space complexity. The lesser the space used, the faster it executes.</p><p>Following are the key time and space complexities:</p><ul><li>Constant time: O(1)</li><li>Logarithm time: O(log n)</li><li>Linear time: O(n)</li><li>Logarithmic time: O(n log n)</li><li>Quadratic time: O(n^2)</li><li>Exponential time: O(2^n)</li><li>Factorial time: O(n!)</li></ul><h2 id="Big-O-complexity-chart"><a href="#Big-O-complexity-chart" class="headerlink" title="Big O complexity chart"></a>Big O complexity chart</h2><svg id="chart" width="800" height="500" xmlns="http://www.w3.org/2000/svg">    <!-- horrible region -->    <path d="M50 450 L 50 0 L 800 0 L 800 450 Z" fill="#ff8989"></path>    <!-- bad region -->    <path d="M50 450 L 800 0 L 800 450 Z" fill="#FFC543"></path>    <!-- fair region -->    <path d="M50 450 L 800 450 L 800 330 Z" fill="yellow"></path>    <!-- good region -->    <path d="M50 450 L 800 450 L 800 410 Z" fill="#C8EA00"></path>    <!-- excellent region -->    <path d="M50 450 L 800 450 L 800 440 Z" fill="#53d000"></path>    <path d="M50 0 L 50 450 L 800 450" fill="transparent" stroke="black" stroke-width="2"></path>    <path d="M50 448 L 800 448" fill="transparent" stroke="black" stroke-width="2"></path>    <text x="700" y="438" fill="black">O(log n), O(1)</text>    <path d="M50 450 L 800 400" fill="transparent" stroke="black" stroke-width="2"></path>    <text x="760" y="390" fill="black">O(n)</text>    <path d="M50 450 Q 400 350, 800 150" fill="transparent" stroke="black" stroke-width="2"></path>    <text x="630" y="190" fill="black">O(n log n)</text>    <path d="M50 450 Q 180 380, 250 0" fill="transparent" stroke="black" stroke-width="2"></path>    <text x="260" y="30" fill="black">O(n^2)</text>    <path d="M50 450 C 100 430, 120 350, 120 0" fill="transparent" stroke="black" stroke-width="2"></path>    <text x="125" y="20" fill="black">O(2^n)</text>    <path d="M50 450 C 80 450, 80 350, 80 0" fill="transparent" stroke="black" stroke-width="2"></path>    <text x="80" y="20" fill="black">O(n!)</text>    <text x="0" y="0" transform="translate(30 230) rotate(-90)" style="dominant-baseline: middle; text-anchor: middle; font-size:20px; color: #555; font-size:20px; color: #555; font-style: italic;" fill="black">Operations</text>    <text x="0" y="0" transform="translate(420 470)" style="dominant-baseline: middle; text-anchor: middle; font-size:20px; color: #555; font-style: italic;" fill="black">Elements</text></svg><p>When writing Big O notation, we look for the fastest-growing term as the input grows larger and larger. We can simplify the equation by removing any <em>non-dominant</em> terms and <em>constants</em>.</p><p>So,</p><ul><li>O(2n) simplifies to O(n), and</li><li>O(n^2 + n + 1000) simplifies to O(n^2)</li></ul><h3 id="Constant-time-O-1"><a href="#Constant-time-O-1" class="headerlink" title="Constant time: O(1)"></a>Constant time: O(1)</h3><p>When there is no dependence on the input size n, an algorithm is said to have a constant time of order O(1).</p><h3 id="Logarithm-time-O-log-n"><a href="#Logarithm-time-O-log-n" class="headerlink" title="Logarithm time: O(log n)"></a>Logarithm time: O(log n)</h3><p>When the size of the input data decreases in each step by a certain factor, an algorithm will have logarithmic time complexity. This means as the input size grows, the number of operations that need to be executed grows comparatively much slower.</p><h3 id="Linear-time-O-n"><a href="#Linear-time-O-n" class="headerlink" title="Linear time: O(n)"></a>Linear time: O(n)</h3><p>Linear time is achieved when the running time of an algorithm increases linearly with the length of the input.</p><h3 id="Quadratic-time-O-n-2"><a href="#Quadratic-time-O-n-2" class="headerlink" title="Quadratic time: O(n^2)"></a>Quadratic time: O(n^2)</h3><p>The performance of a quadratic time complexity algorithm is directly related to the squared size of the input data collection. You will encounter such time complexity in programs when you loop within a loop.</p><h3 id="Exponential-time-O-2-n"><a href="#Exponential-time-O-2-n" class="headerlink" title="Exponential time: O(2^n)"></a>Exponential time: O(2^n)</h3><p>With each addition to the input (n), the growth rate doubles, and the algorithm iterates across all subsets of the input elements. When an input unit is increased by one, the number of operations executed is doubled.</p><h2 id="Calculating-complexity"><a href="#Calculating-complexity" class="headerlink" title="Calculating complexity"></a>Calculating complexity</h2><p>To determine the time complexity of our code, we must examine it line by line, taking note of the following factors:</p><ul><li>Assignments, bits, and math operators are all basic operations.</li><li>Loops and nested loops</li><li>Recursions and function invocations</li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> big o </tag>
            
            <tag> algorithm </tag>
            
            <tag> data structure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day 74 of 100 Days of Code</title>
      <link href="/posts/Day-74-of-100-Days-of-Code/"/>
      <url>/posts/Day-74-of-100-Days-of-Code/</url>
      
        <content type="html"><![CDATA[<style>    #intro {        text-align: center;    }    #intro .title {        font-size: 1.5rem;        font-weight: 700;        color: rgb(31, 45, 61);    }    #intro .subtitle {        font-size: 1.2rem;        font-weight: 700;        color: rgb(31, 45, 61);    }</style><div id="intro">    <p class="title">Resampling and Visualizing Time Series</h2>    <p class="subtitle">Learning Log: Day 74 of 100 Days of Code</h3>    <p>GitHub Repo: <a href="https://github.com/Freedempire/100_days_of_code.git">100_days_of_code</a></p></div><h2 id="Learning-points"><a href="#Learning-points" class="headerlink" title="Learning points"></a>Learning points</h2><ul><li>How to use <code>describe()</code> to quickly see some descriptive statistics at a glance</li><li>How to use <code>resample()</code> to make a time-series data comparable to another by changing the periodicity</li><li>How to work with <code>matplotlib.dates</code> Locators to better style a timeline</li><li>How to find the number of <code>NaN</code> values with <code>isna().values.sum()</code></li><li>How to change the resolution of a chart using the figure’s <code>dpi</code></li><li>How to create dashed <code>&#39;--&#39;</code> and dotted <code>&#39;-.&#39;</code> lines using <code>linestyles</code></li><li>How to use different kinds of markers (e.g., <code>&#39;o&#39;</code> or <code>&#39;^&#39;</code>) on charts</li><li>Fine-tuning the styling of Matplotlib charts by using limits, labels, <code>linewidth</code> and <code>color</code> (both in the form of named colors and HEX codes)</li><li>Using <code>grid()</code> to help visually identify seasonality in a time series</li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> pandas </tag>
            
            <tag> matplotlib </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day 73 of 100 Days of Code</title>
      <link href="/posts/Day-73-of-100-Days-of-Code/"/>
      <url>/posts/Day-73-of-100-Days-of-Code/</url>
      
        <content type="html"><![CDATA[<style>    #intro {        text-align: center;    }    #intro .title {        font-size: 1.5rem;        font-weight: 700;        color: rgb(31, 45, 61);    }    #intro .subtitle {        font-size: 1.2rem;        font-weight: 700;        color: rgb(31, 45, 61);    }</style><div id="intro">    <p class="title">Aggregate & Merge Data with Pandas</h2>    <p class="subtitle">Learning Log: Day 73 of 100 Days of Code</h3>    <p>GitHub Repo: <a href="https://github.com/Freedempire/100_days_of_code.git">100_days_of_code</a></p></div><h2 id="Learning-points"><a href="#Learning-points" class="headerlink" title="Learning points"></a>Learning points</h2><ul><li>combine the <code>groupby()</code> and <code>count()</code> functions to aggregate data</li><li>use the <code>value_counts()</code> function</li><li>use the <code>agg()</code> function to run an operation on a particular column</li><li><code>rename()</code> columns of DataFrames</li><li><code>merge()</code> DataFrames along a particular column</li><li>create a line chart with two separate axes to visualise data that have different scales</li><li>create a scatter plot in Matplotlib</li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> pandas </tag>
            
            <tag> matplotlib </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day 72 of 100 Days of Code</title>
      <link href="/posts/Day-72-of-100-Days-of-Code/"/>
      <url>/posts/Day-72-of-100-Days-of-Code/</url>
      
        <content type="html"><![CDATA[<style>    #intro {        text-align: center;    }    #intro .title {        font-size: 1.5rem;        font-weight: 700;        color: rgb(31, 45, 61);    }    #intro .subtitle {        font-size: 1.2rem;        font-weight: 700;        color: rgb(31, 45, 61);    }</style><div id="intro">    <p class="title">Data Visualisation with Matplotlib</h2>    <p class="subtitle">Learning Log: Day 72 of 100 Days of Code</h3>    <p>GitHub Repo: <a href="https://github.com/Freedempire/100_days_of_code.git">100_days_of_code</a></p></div><h2 id="Matplotlib"><a href="#Matplotlib" class="headerlink" title="Matplotlib"></a>Matplotlib</h2><p>Matplotlib is a comprehensive library for creating static, animated, and interactive visualizations in Python.</p><h3 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install matplotlib</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> pandas </tag>
            
            <tag> matplotlib </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day 71 of 100 Days of Code</title>
      <link href="/posts/Day-71-of-100-Days-of-Code/"/>
      <url>/posts/Day-71-of-100-Days-of-Code/</url>
      
        <content type="html"><![CDATA[<style>    #intro {        text-align: center;    }    #intro .title {        font-size: 1.5rem;        font-weight: 700;        color: rgb(31, 45, 61);    }    #intro .subtitle {        font-size: 1.2rem;        font-weight: 700;        color: rgb(31, 45, 61);    }</style><div id="intro">    <p class="title">Data Exploration with Pandas</h2>    <p class="subtitle">Learning Log: Day 71 of 100 Days of Code</h3>    <p>GitHub Repo: <a href="https://github.com/Freedempire/100_days_of_code.git">100_days_of_code</a></p></div><h2 id="Pandas"><a href="#Pandas" class="headerlink" title="Pandas"></a>Pandas</h2><p>The pandas package is the most important tool at the disposal of Data Scientists and Analysts working in Python today.</p><p>Pandas is derived from the term “panel data”, an econometrics term for data sets that include observations over multiple time periods for the same individuals.</p><p>Through pandas, you get acquainted with your data by cleaning, transforming, and analyzing it.</p><p>For example, say you want to explore a dataset stored in a CSV on your computer. Pandas will extract the data from that CSV into a <strong>DataFrame</strong> — a table, basically — then let you do things like:</p><ul><li>Calculate statistics and answer questions about the data, like<ul><li>What’s the average, median, max, or min of each column?</li><li>Does column A correlate with column B?</li><li>What does the distribution of data in column C look like?</li></ul></li><li>Clean the data by doing things like removing missing values and filtering rows or columns by some criteria</li><li>Visualize the data with help from Matplotlib. Plot bars, lines, histograms, bubbles, and more.</li><li>Store the cleaned, transformed data back into a CSV, other file or database</li></ul><p>Pandas is built on top of the <strong>NumPy</strong> package, meaning a lot of the structure of NumPy is used or replicated in Pandas. Data in pandas is often used to feed statistical analysis in <strong>SciPy</strong>, plotting functions from <strong>Matplotlib</strong>, and machine learning algorithms in <strong>Scikit-learn</strong>.</p><p>Jupyter Notebooks offer a good environment for using pandas to do data exploration and modeling, but pandas can also be used in text editors just as easily.</p><p>Jupyter Notebooks give us the ability to execute code in a particular cell as opposed to running the entire file. This saves a lot of time when working with large datasets and complex transformations. Notebooks also provide an easy way to visualize pandas’ DataFrames and plots.</p><h3 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h3><h4 id="Installing-with-Anaconda"><a href="#Installing-with-Anaconda" class="headerlink" title="Installing with Anaconda"></a>Installing with Anaconda</h4><p>The simplest way to install not only pandas, but Python and the most popular packages that make up the SciPy stack (IPython, NumPy, Matplotlib, …) is with Anaconda, a cross-platform (Linux, macOS, Windows) Python distribution for data analytics and scientific computing.</p><h4 id="Installing-with-Miniconda"><a href="#Installing-with-Miniconda" class="headerlink" title="Installing with Miniconda"></a>Installing with Miniconda</h4><p>If you want to have more control on which packages, or have a limited internet bandwidth, then installing pandas with Miniconda may be a better solution.</p><p>Conda is the package manager that the Anaconda distribution is built upon. It is a package manager that is both cross-platform and language agnostic (it can play a similar role to a pip and virtualenv combination).</p><p>Miniconda allows you to create a minimal self contained Python installation, and then use the Conda command to install additional packages.</p><h4 id="Installing-from-PyPI"><a href="#Installing-from-PyPI" class="headerlink" title="Installing from PyPI"></a>Installing from PyPI</h4><p>pandas can be installed via pip from PyPI.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pandas</span><br></pre></td></tr></table></figure><p>pandas can also be installed with sets of optional dependencies to enable certain functionality. For example, to install pandas with the optional dependencies to read Excel files.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install <span class="string">&quot;pandas[excel]&quot;</span></span><br></pre></td></tr></table></figure><h3 id="Primary-data-structure-of-pandas-Series-and-DataFrames"><a href="#Primary-data-structure-of-pandas-Series-and-DataFrames" class="headerlink" title="Primary data structure of pandas: Series and DataFrames"></a>Primary data structure of pandas: Series and DataFrames</h3><p>A Series (1D labeled homogeneously-typed array) is essentially a column.</p><p>A DataFrame (general 2D labeled, size-mutable tabular structure with potentially heterogeneously-typed column) is a multi-dimensional table made up of a collection of Series.</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> pandas </tag>
            
            <tag> csv </tag>
            
            <tag> data cleaning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day 70 of 100 Days of Code</title>
      <link href="/posts/Day-70-of-100-Days-of-Code/"/>
      <url>/posts/Day-70-of-100-Days-of-Code/</url>
      
        <content type="html"><![CDATA[<style>    #intro {        text-align: center;    }    #intro .title {        font-size: 1.5rem;        font-weight: 700;        color: rgb(31, 45, 61);    }    #intro .subtitle {        font-size: 1.2rem;        font-weight: 700;        color: rgb(31, 45, 61);    }</style><div id="intro">    <p class="title">Deploying Your Web Application with Heroku</h2>    <p class="subtitle">Learning Log: Day 70 of 100 Days of Code</h3>    <p>GitHub Repo: <a href="https://github.com/Freedempire/100_days_of_code.git">100_days_of_code</a></p></div><h2 id="Some-basic-command-line-commands"><a href="#Some-basic-command-line-commands" class="headerlink" title="Some basic command line commands"></a>Some basic command line commands</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># for windows</span></span><br><span class="line"><span class="comment"># change directory to Desktop</span></span><br><span class="line"><span class="built_in">cd</span> %userprofile%\Desktop</span><br><span class="line"><span class="comment"># create a new .txt file</span></span><br><span class="line"><span class="built_in">touch</span> new.txt</span><br><span class="line"><span class="comment"># open the file</span></span><br><span class="line">start new.txt</span><br></pre></td></tr></table></figure><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><p>Version control, also known as source control, is the practice of tracking and managing changes to software code.</p><p>Version control software keeps track of every modification to the code in a special kind of database. If a mistake is made, developers can turn back the clock and compare earlier versions of the code to help fix the mistake while minimizing disruption to all team members.</p><p>By far, the most widely used modern version control system in the world today is Git.</p><h3 id="Get-documentation-for-a-command"><a href="#Get-documentation-for-a-command" class="headerlink" title="Get documentation for a command"></a>Get documentation for a command</h3><p>You can get documentation for a command such as <code>git log --graph</code> with:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">man git-log</span><br></pre></td></tr></table></figure><p>or:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">help</span> <span class="built_in">log</span></span><br></pre></td></tr></table></figure><h3 id="Setting-up-a-repository"><a href="#Setting-up-a-repository" class="headerlink" title="Setting up a repository"></a>Setting up a repository</h3><h4 id="Initializing-a-new-repository-git-init"><a href="#Initializing-a-new-repository-git-init" class="headerlink" title="Initializing a new repository: git init"></a>Initializing a new repository: git init</h4><p>Versioning an existing project with a new git repository:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> project/path</span><br><span class="line">git init</span><br></pre></td></tr></table></figure><p>You can also point <code>git init</code> to an project directory:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init &lt;project directory&gt;</span><br></pre></td></tr></table></figure><h4 id="Cloning-an-existing-repository-git-clone"><a href="#Cloning-an-existing-repository-git-clone" class="headerlink" title="Cloning an existing repository: git clone"></a>Cloning an existing repository: git clone</h4><p>If a project has already been set up in a central repository, the clone command is the most common way for users to obtain a local development clone.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> &lt;repo url&gt;</span><br></pre></td></tr></table></figure><h4 id="Saving-changes-to-the-repository-git-add-and-git-commit"><a href="#Saving-changes-to-the-repository-git-add-and-git-commit" class="headerlink" title="Saving changes to the repository: git add and git commit"></a>Saving changes to the repository: git add and git commit</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /path/to/project </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;test content for git tutorial&quot;</span> &gt;&gt; CommitTest.txt </span><br><span class="line">git add CommitTest.txt </span><br><span class="line">git commit -m <span class="string">&quot;added CommitTest.txt to the repo&quot;</span></span><br></pre></td></tr></table></figure><ul><li><code>git add -A</code> (<code>--all</code>): Adds all modified and untracked files in the entire repository.</li><li><code>git add .</code>: Stages all files under the current directory and any subdirectory. If you are at the root of the repo, it has the same effect as <code>-A</code>.</li><li><code>git add *</code> Stages everything, but not files that begin with a dot &amp; does not remove files that have been deleted from the disk.</li><li><code>git add -u</code> (<code>--update</code>): Stages only modified files, removes files that have been deleted from disk, does not add new.</li><li><code>git add &lt;file name 1&gt; &lt;file name 2&gt;</code>: Adds only certain file(s).</li></ul><h4 id="Repo-to-repo-collaboration-git-push"><a href="#Repo-to-repo-collaboration-git-push" class="headerlink" title="Repo-to-repo collaboration: git push"></a>Repo-to-repo collaboration: git push</h4><p>If you used <code>git clone</code> to set up your local repository, your repository is already configured for remote collaboration. <code>git clone</code> will automatically configure your repo with a remote pointed to the Git URL you cloned it from. This means that once you make changes to a file and commit them, you can <code>git push</code> those changes to the remote repository.</p><p>If you used <code>git init</code> to make a fresh repo, you’ll have no remote repo to push changes to. A common pattern when initializing a new repo is to go to a hosted Git service and create a repo there. The service will provide a Git URL that you can then add to your local Git repository and git push to the hosted repo. Once you have created a remote repo with your service of choice you will need to update your local repo with a mapping.</p><p>If you prefer to host your own remote repo which is not the remote repo you cloned from, you’ll need to set up a “Bare Repository.” Both <code>git init</code> and <code>git clone</code> accept a <code>--bare</code> argument. The most common use case for bare repo is to create a remote central Git repository.</p><h4 id="Configuration-amp-set-up-git-config"><a href="#Configuration-amp-set-up-git-config" class="headerlink" title="Configuration &amp; set up: git config"></a>Configuration &amp; set up: git config</h4><p>Once you have a remote repo setup, you will need to add a remote repo url to your local <code>git config</code>, and set an upstream branch for your local branches. The <code>git remote</code> command offers such utility.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add &lt;remote_name&gt; &lt;remote_repo_url&gt;</span><br></pre></td></tr></table></figure><p>This command will map remote repository to a ref in your local repo. Once you have mapped the remote repo you can push local branches to it.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u &lt;remote_name&gt; &lt;local_branch_name&gt;</span><br></pre></td></tr></table></figure><p>This command will push the local repo branch under <code>&lt;local_branch_name&gt;</code> to the remote repo at <code>&lt;remote_name&gt;</code>.</p><p><code>-u</code>: For every branch that is up to date or successfully pushed, add upstream (tracking) reference, used by argument-less git-pull and other commands.</p><p>In addition to configuring a remote repo URL, you may also need to set global Git configuration options such as username, or email.</p><p>Define the author name and email to be used for all commits in the current repository. Typically, you’ll want to use the <code>--global</code> flag to set configuration options for the current user.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;Your Name&quot;</span></span><br><span class="line">git config --global user.email you@yourdomain.example.com</span><br></pre></td></tr></table></figure><p>Adding the <code>--local</code> option or not passing a config level option at all, will set the name and email for the current local repository.</p><p>Open the global configuration file in a text editor for manual editing:</p><p><code>git config --global --edit</code></p><h3 id="Saving-changes"><a href="#Saving-changes" class="headerlink" title="Saving changes"></a>Saving changes</h3><h4 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h4><p><code>git add &lt;file&gt;</code>: Stage all changes in <code>&lt;file&gt;</code> for the next commit.</p><p><code>git add &lt;directory&gt;</code>: Stage all changes in <code>&lt;directory&gt;</code> for the next commit.</p><p><code>git add -p</code>: Begin an interactive staging session that lets you choose portions of a file to add to the next commit.</p><h4 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h4><p><code>git commit</code>: Commit the staged snapshot. This will launch a text editor prompting you for a commit message. After you’ve entered a message, save the file and close the editor to create the actual commit.</p><p><code>git commit -a</code>: Commit a snapshot of all changes in the working directory. This only includes modifications to tracked files, i.e. the files have already been added with <code>git add</code> before.</p><p><code>git commit -m &quot;commit message&quot;</code>: A shortcut command that immediately creates a commit with a passed commit message.</p><p><code>git commit -am &quot;commit message&quot;</code>: A power user shortcut command that combines the -a and -m options. This combination immediately creates a commit of all the staged changes and takes an inline commit message.</p><p><code>git commit --amend</code>: Passing this option will modify the last commit. Instead of creating a new commit, staged changes will be added to the previous commit. This command will open up the system’s configured text editor and prompt to change the previously specified commit message.</p><h4 id="git-diff"><a href="#git-diff" class="headerlink" title="git diff"></a>git diff</h4><p><code>git diff</code>: By default git diff will show you any uncommitted changes since the last commit.</p><p><code>git diff HEAD ./path/to/file</code>: This example is scoped to <code>./path/to/file</code> when invoked, it will compare the specific changes in the working directory, against the index, showing the changes that are not staged yet. By default <code>git diff</code> will execute the comparison against <code>HEAD</code>. Omitting <code>HEAD</code> in the example above doesn’t change the effect.</p><h4 id="git-stash"><a href="#git-stash" class="headerlink" title="git stash"></a>git stash</h4><p>The <code>git stash</code> command takes your uncommitted changes (both staged and unstaged), saves them away for later use, and then reverts them from your working copy. The stash is local to your Git repository; stashes are not transferred to the server when you push.</p><h4 id="gitignore"><a href="#gitignore" class="headerlink" title=".gitignore"></a>.gitignore</h4><p>Ignored files are usually build artifacts and machine generated files that can be derived from your repository source or should otherwise not be committed.</p><p>Some common examples are:</p><ul><li>dependency caches, such as the contents of <code>/node_modules</code> or <code>/packages</code></li><li>compiled code, such as <code>.o</code>, <code>.pyc</code>, and <code>.class</code> files</li><li>build output directories, such as <code>/bin</code>, <code>/out</code>, or <code>/target</code></li><li>files generated at runtime, such as <code>.log</code>, <code>.lock</code>, or <code>.tmp</code></li><li>hidden system files, such as <code>.DS_Store</code> or <code>Thumbs.db</code></li><li>personal IDE config files, such as <code>.idea/workspace.xml</code></li></ul><p>Ignored files are tracked in a special file named <code>.gitignore</code> that is checked in at the root of your repository. <code>.gitignore</code> files contain <a href="http://linux.die.net/man/7/glob">globbing patterns</a> that are matched against file names in your repository to determine whether or not they should be ignored.</p><h3 id="Inspecting-a-repository"><a href="#Inspecting-a-repository" class="headerlink" title="Inspecting a repository"></a>Inspecting a repository</h3><h4 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a>git status</h4><p>The <code>git status</code> command displays the state of the working directory and the staging area.</p><p>Status output does not show you any information regarding the committed project history. For this, you need to use <code>git log</code>.</p><h4 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a>git log</h4><p>The <code>git log</code> command displays committed snapshots. It lets you list the project history, filter it, and search for specific changes.</p><p><code>git log</code>: Display the entire commit history using the default formatting. If the output takes up more than one screen, you can use <code>Space</code> to scroll and <code>q</code> to exit.</p><p><code>git log -n &lt;limit&gt;</code>: Limit the number of commits that display.</p><p><code>git log --oneline</code>: Condense each commit to a single line. This is useful for getting a high-level overview of the project history.</p><p><code>git log --stat</code>: Along with the ordinary git log information, include which files were altered and the relative number of lines that were added or deleted from each of them.</p><p><code>git log -p</code>: Display the patch representing each commit. This shows the full diff of each commit, which is the most detailed view you can have of your project history.</p><p><code>git log --author=&quot;&lt;pattern&gt;&quot;</code>: Search for commits by a particular author. The pattern can be a plain string or a regular expression.</p><p><code>git log --grep=&quot;&lt;pattern&gt;&quot;</code>: Search for commits with a commit message that matches pattern, which can be a plain string or a regular expression.</p><p><code>git log &lt;since&gt;..&lt;until&gt;</code>: Show only commits that occur between <code>&lt;since&gt;</code> and <code>&lt;until&gt;</code>. Both arguments can be either a commit ID, a branch name, <code>HEAD</code>, or any other kind of revision reference.</p><p><code>git log &lt;file&gt;</code>: Only display commits that include the specified file. This is an easy way to see the history of a particular file.</p><p><code>git log --graph --decorate --oneline</code>: The <code>--graph</code> flag that will draw a text based graph of the commits on the left hand side of the commit messages. <code>--decorate</code> adds the names of branches or tags of the commits that are shown. <code>--oneline</code> shows the commit information on a single line making it easier to browse through commits at-a-glance.</p><h4 id="git-tag"><a href="#git-tag" class="headerlink" title="git tag"></a>git tag</h4><p>Tags are ref’s that point to specific points in Git history. Tagging is generally used to capture a point in history that is used for a marked version release (i.e. v1.0.1). A tag is like a branch that doesn’t change. Unlike branches, tags, after being created, have no further history of commits.</p><p><code>git tag &lt;tagname&gt;</code>: To create a new tag.</p><p><code>git tag</code>: To list stored tags in a repo.</p><h4 id="git-blame"><a href="#git-blame" class="headerlink" title="git blame"></a>git blame</h4><p>The <code>git blame</code> command is a versatile troubleshooting utility that has extensive usage options. The high-level function of <code>git blame</code> is the display of author metadata attached to specific committed lines in a file. This is used to examine specific points of a file’s history and get context as to who the last author was that modified the line. This is used to explore the history of specific code and answer questions about what, how, and why the code was added to a repository.</p><p><code>git blame</code> only operates on individual files. A file-path is required for any useful output. The default execution of <code>git blame</code> will simply output the commands help menu. For example:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git blame README.MD</span><br></pre></td></tr></table></figure><h3 id="Undoing-changes"><a href="#Undoing-changes" class="headerlink" title="Undoing changes"></a>Undoing changes</h3><p>A fun metaphor is to think of Git as a timeline management utility. Commits are snapshots of a point in time or points of interest along the timeline of a project’s history. Additionally, multiple timelines can be managed through the use of branches. When ‘undoing’ in Git, you are usually moving back in time, or to another timeline where mistakes didn’t happen.</p><h4 id="git-checkout"><a href="#git-checkout" class="headerlink" title="git checkout"></a>git checkout</h4><p>When you have found a commit reference to the point in history you want to visit, you can utilize the <code>git checkout</code> command to visit that commit. <code>git checkout</code> is an easy way to “load” any of these saved snapshots onto your development machine.</p><p>During the normal course of development, the <code>HEAD</code> usually points to master or some other local branch, but when you check out a previous <em>commit</em>, <code>HEAD</code> no longer points to a branch—it points directly to a commit. This is called a “detached HEAD” state.</p><p>Checking out an old <em>file</em> does not move the <code>HEAD</code> pointer. It remains on the same branch and same commit, avoiding a “detached HEAD” state. You can then commit the old version of the file in a new snapshot. So, in effect, this usage of git checkout on a file, serves as a way to revert back to an old version of an individual file.</p><p><code>git checkout &lt;a1e8fb5&gt;</code>: This makes your working directory match the exact state of the <code>a1e8fb5</code> commit.</p><p><code>git checkout master</code>: Get back to the “current” state of your project. This assumes that you’re developing on the default master branch. Once you’re back in the master branch, you can use either <code>git revert</code> or <code>git reset</code> to undo any undesired changes.</p><p>When the repo is in “detached HEAD” state, you are no longer working on any branch. In a detached state, any new commits you make will be orphaned when you change branches back to an established branch. Orphaned commits are up for deletion by Git’s garbage collector. To prevent orphaned commits from being garbage collected, we need to ensure we are on a branch.</p><p>From the “detached HEAD” state, we can execute <code>git checkout -b &lt;new_branch&gt;</code>. This will create a new branch and switch to that state.</p><h4 id="git-clean"><a href="#git-clean" class="headerlink" title="git clean"></a>git clean</h4><p><code>git clean</code> can be considered complementary to other commands like <code>git reset</code> and <code>git checkout</code>. Whereas these other commands operate on files previously added to the Git tracking index, the <code>git clean</code> command operates on untracked files.</p><p>By default, Git is globally configured to require that <code>git clean</code> be passed a <code>-f</code> or <code>--force</code> option to initiate, unless the <code>clean.requireForce</code> configuration option is set to false. This is an important safety mechanism. When finally executed <code>git clean</code> is not undo-able. Make sure you really want to delete the untracked files before you run it.</p><h4 id="git-revert"><a href="#git-revert" class="headerlink" title="git revert"></a>git revert</h4><p>The <code>git revert</code> command can be considered an ‘undo’ type command, however, it is not a traditional undo operation. Instead of removing the commit from the project history, it figures out how to invert the changes introduced by the commit and appends a new commit with the resulting inverse content. This prevents Git from losing history, which is important for the integrity of your revision history and for reliable collaboration.</p><p>This can be useful, for example, if you’re tracking down a bug and find that it was introduced by a single commit. Instead of manually going in, fixing it, and committing a new snapshot, you can use <code>git revert</code> to automatically do all of this for you.</p><p>A revert operation will take the specified commit, inverse the changes from that commit, and create a new “revert commit”. The ref pointers are then updated to point at the new revert commit making it the tip of the branch. Other ‘undo’ commands like, <code>git checkout</code> and <code>git reset</code>, move the <code>HEAD</code> and branch ref pointers to a specified commit.</p><h4 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a>git reset</h4><p>The <code>git reset</code> command is a complex and versatile tool for undoing changes. It has three primary forms of invocation. These forms correspond to command line arguments <code>--soft</code>, <code>--mixed</code>, <code>--hard</code>. The three arguments each correspond to Git’s three internal state management mechanism’s, The Commit Tree (<code>HEAD</code>), The Staging Index, and The Working Directory.</p><p>Git’s internal state management systems are also called Git’s “three trees”. They are, actually, node and pointer-based data structures that Git uses to track a timeline of edits.</p><h5 id="The-working-directory"><a href="#The-working-directory" class="headerlink" title="The working directory"></a>The working directory</h5><p>This tree is in sync with the local filesystem and is representative of the immediate changes made to content in files and directories.</p><p><code>git status</code> can be used to show changes to the Working Directory. They will be displayed in the red with a ‘modified’ prefix.</p><h5 id="Staging-index"><a href="#Staging-index" class="headerlink" title="Staging index"></a>Staging index</h5><p>This tree is tracking Working Directory changes, that have been promoted with <code>git add</code>, to be stored in the next commit.</p><h5 id="Commit-history"><a href="#Commit-history" class="headerlink" title="Commit history"></a>Commit history</h5><p>The final tree is the Commit History. The <code>git commit</code> command adds changes to a permanent snapshot that lives in the Commit History. This snapshot also includes the state of the Staging Index at the time of commit.</p><h4 id="How-it-works"><a href="#How-it-works" class="headerlink" title="How it works"></a>How it works</h4><p>At a surface level, <code>git reset</code> is similar in behavior to <code>git checkout</code>. Where <code>git checkout</code> solely operates on the <code>HEAD</code> ref pointer, <code>git reset</code> will move the <code>HEAD</code> ref pointer and the current branch ref pointer.</p><p>The default invocation of <code>git reset</code> has implicit arguments of <code>--mixed</code> and <code>HEAD</code>. This means executing <code>git reset</code> is equivalent to executing <code>git reset --mixed HEAD</code>. In this form <code>HEAD</code> is the specified commit.</p><p>When passed <code>--hard</code>, the Commit History ref pointers are updated to the specified commit. Then, the Staging Index and Working Directory are reset to match that of the specified commit. Any previously pending changes to the Staging Index and the Working Directory gets reset to match the state of the Commit Tree. Any previously pending changes to the Staging Index and the Working Directory gets reset to match the state of the Commit Tree. This means any pending work that was hanging out in the Staging Index and Working Directory will be lost.</p><p><code>--mixed</code> is the default operating mode. When it is passed, the ref pointers are updated, and the Staging Index is reset to the state of the specified commit. Any changes that have been undone from the Staging Index are moved to the Working Directory.</p><p>When the <code>--soft</code> argument is passed, the ref pointers are updated and the reset stops there. The Staging Index and the Working Directory are left untouched.</p><p>You should never use <code>git reset</code> when any snapshots after have been pushed to a public repository. After publishing a commit, you have to assume that other developers are reliant upon it.</p><p><code>git reset ＜file＞</code>: Remove the specified file from the staging area, but leave the working directory unchanged. This unstages a file without overwriting any changes.</p><p><code>git reset</code>: Reset the staging area to match the most recent commit, but leave the working directory unchanged. This unstages all files without overwriting any changes, giving you the opportunity to re-build the staged snapshot from scratch.</p><p><code>git reset --hard</code>: Reset the staging area and the working directory to match the most recent commit.</p><p><code>git reset &lt;commit&gt;</code>: Move the current branch tip backward to <code>&lt;commit&gt;</code>, reset the staging area to match, but leave the working directory alone. All changes made since <code>&lt;commit&gt;</code> will reside in the working directory, which lets you re-commit the project history using cleaner, more atomic snapshots.</p><p><code>git reset --hard &lt;commit&gt;</code>: Move the current branch tip backward to <code>&lt;commit&gt;</code> and reset both the staging area and the working directory.</p><h4 id="git-rm"><a href="#git-rm" class="headerlink" title="git rm"></a>git rm</h4><p>The <code>git rm</code> command is used to remove files from a Git repository. It can be thought of as the inverse of the <code>git add</code> command.</p><p>The <code>git rm</code> command can be used to remove individual files or a collection of files. The primary function of <code>git rm</code> is to remove tracked files from the Git index. Additionally, <code>git rm</code> can be used to remove files from both the staging index and the working directory. The files being operated on must be identical to the files in the current <code>HEAD</code>, otherwise Git will block the removal.</p><p>Executing <code>git rm</code> is not a permanent update. The command will update the staging index and the working directory. These changes will not be persisted until a new commit is created and the changes are added to the commit history. This means that the changes here can be “undone” using common Git commands:</p><ul><li><code>git reset HEAD</code>: A reset will revert the current staging index and working directory back to the HEAD commit. This will undo a <code>git rm</code>.</li><li><code>git checkout .</code>: A checkout will have the same effect and restore the latest version of a file from <code>HEAD</code>.</li></ul><p>A Git repository will recognize when a regular shell <code>rm</code> command has been executed on a file it is tracking. It will update the working directory to reflect the removal. It will not update the staging index with the removal. An additional <code>git add</code> command will have to be executed on the removed file paths to add the changes to the staging index. The <code>git rm</code> command acts a shortcut in that it will update the working directory and the staging index with the removal.</p><h3 id="Rewriting-history"><a href="#Rewriting-history" class="headerlink" title="Rewriting history"></a>Rewriting history</h3><p>Git has several mechanisms for storing history and saving changes. These mechanisms include: <code>git commit --amend</code>, <code>git rebase</code> and <code>git reflog</code>. These options give you powerful work flow customization options.</p><h4 id="Changing-the-Last-Commit-git-commit-–amend"><a href="#Changing-the-Last-Commit-git-commit-–amend" class="headerlink" title="Changing the Last Commit: git commit –amend"></a>Changing the Last Commit: git commit –amend</h4><p>The <code>git commit --amend</code> command is a convenient way to modify the most recent commit. It lets you combine staged changes with the previous commit instead of creating an entirely new commit. It can also be used to simply edit the previous commit message without changing its snapshot. But, amending does not just alter the most recent commit, it replaces it entirely, meaning the amended commit will be a new entity with its own ref.</p><p><code>git commit --amend -m &quot;an updated commit message&quot;</code>: Adding the <code>-m</code> option allows you to pass in a new message from the command line without being prompted to open an editor.</p><p><code>git commit --amend --no-edit</code>: The <code>--no-edit</code> flag will allow you to make the amendment to your commit without changing its commit message. The resulting commit will replace the incomplete one before.</p><p>Avoid amending a commit that other developers have based their work on. This is a confusing situation for developers to be in and it’s complicated to recover from.</p><h4 id="Changing-older-or-multiple-commits"><a href="#Changing-older-or-multiple-commits" class="headerlink" title="Changing older or multiple commits"></a>Changing older or multiple commits</h4><p>To modify older or multiple commits, you can use <code>git rebase</code> to combine a sequence of commits into a new base commit. Since your new commits will be replacing the old, it’s important to not use git rebase on commits that have been pushed public, or it will appear that your project history disappeared.</p><h4 id="The-safety-net-git-reflog"><a href="#The-safety-net-git-reflog" class="headerlink" title="The safety net: git reflog"></a>The safety net: git reflog</h4><p>Reference logs, or “reflogs” are a mechanism Git uses to record updates applied to tips of branches and other commit references. Reflog allows you to go back to commits even though they are not referenced by any branch or tag. After rewriting history, the reflog contains information about the old state of branches and allows you to go back to that state if necessary.</p><h2 id="WSGI"><a href="#WSGI" class="headerlink" title="WSGI"></a>WSGI</h2><p><a href="https://flask.palletsprojects.com/en/2.3.x/deploying/">Deploying to production</a></p><p>After developing your application, you’ll want to make it available publicly to other users. When you’re developing locally, you’re probably using the built-in development server, debugger, and reloader. These should not be used in production. Instead, you should use a dedicated <em>WSGI server</em> or <em>hosting platform</em> for hosting web applications without needing to maintain your own server, networking, domain, etc.</p><p>The Python Web Server Gateway Interface (WSGI, pronounced whiskey or WIZ-ghee) is a simple and universal interface between web servers and web applications or frameworks written in the Python programming language.</p><p>A WSGI server implements the web server side of the WSGI interface for running Python web applications. A WSGI server is used to run the application, converting incoming HTTP requests to the standard WSGI environ, and converting outgoing WSGI responses to HTTP responses.</p><p>WSGI servers have HTTP servers built-in. However, a dedicated HTTP server may be safer, more efficient, or more capable. Putting an HTTP server in front of the WSGI server is called a “reverse proxy.”</p><h3 id="Gunicorn"><a href="#Gunicorn" class="headerlink" title="Gunicorn"></a>Gunicorn</h3><p>Gunicorn is a pure Python WSGI server with simple configuration and multiple worker implementations for performance tuning.</p><ul><li>It tends to integrate easily with hosting platforms.</li><li>It does not support Windows (but does run on WSL).</li><li>It is easy to install as it does not require additional dependencies or compilation.</li><li>It has built-in async worker support using gevent or eventlet.</li></ul><h4 id="Installing"><a href="#Installing" class="headerlink" title="Installing"></a>Installing</h4><p>Create a virtualenv, install your application, then install gunicorn.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> hello-app</span><br><span class="line">python -m venv .venv</span><br><span class="line">. .venv/bin/activate  <span class="comment"># . (dot) is a special built-in shell command which runs a shell script in the current environment and then returns</span></span><br><span class="line">pip install .  <span class="comment"># install your application</span></span><br><span class="line">pip install gunicorn</span><br></pre></td></tr></table></figure><h4 id="Running"><a href="#Running" class="headerlink" title="Running"></a>Running</h4><p>The only required argument to Gunicorn tells it how to load your Flask application. The syntax is <code>&#123;module_import&#125;:&#123;app_variable&#125;</code>. <code>module_import</code> is the dotted import name to the module with your application. <code>app_variable</code> is the variable with the application. It can also be a function call (with any arguments) if you’re using the app factory pattern.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># equivalent to &#x27;from hello import app&#x27;</span></span><br><span class="line">gunicorn -w 4 <span class="string">&#x27;hello:app&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># equivalent to &#x27;from hello import create_app; create_app()&#x27;</span></span><br><span class="line">gunicorn -w 4 <span class="string">&#x27;hello:create_app()&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="PostgreSQL"><a href="#PostgreSQL" class="headerlink" title="PostgreSQL"></a>PostgreSQL</h2><p>SQLite is ideal for users getting started since it can be run in memory and backed by small files on disk that are easily created and moved around. While easy to use, SQLite is not intended as a production grade database.</p><p>Heroku’s Cedar stack has an ephemeral filesystem. You can write to it, and you can read from it, but the contents will be cleared periodically. If you were to use SQLite on Heroku, you would lose your entire database at least once every 24 hours.</p><p>Even if Heroku’s disks were persistent running SQLite would still not be a good fit. Since SQLite does not run as a service, each dyno (The Heroku Platform uses the container model to run and scale all Heroku apps. The containers used at Heroku are called “dynos.”) would run a separate running copy. Each of these copies need their own disk backed store. This would mean that each dyno powering your app would have a different set of data since the disks are not synchronized.</p><p>Instead of using SQLite on Heroku you can configure your app to run on Postgres.</p><h3 id="Database-connector"><a href="#Database-connector" class="headerlink" title="Database connector"></a>Database connector</h3><p>We must use a database connector library to connect to a PostgreSQL database instance from our Python script. We can pick from a variety of alternatives in Python, but <a href="https://www.psycopg.org/docs/">Psycopg2</a> is the most well-known and widely-used one.</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> web development </tag>
            
            <tag> git </tag>
            
            <tag> version control </tag>
            
            <tag> heroku </tag>
            
            <tag> wsgi </tag>
            
            <tag> gunicorn </tag>
            
            <tag> postgresql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day 69 of 100 Days of Code</title>
      <link href="/posts/Day-69-of-100-Days-of-Code/"/>
      <url>/posts/Day-69-of-100-Days-of-Code/</url>
      
        <content type="html"><![CDATA[<style>    #intro {        text-align: center;    }    #intro .title {        font-size: 1.5rem;        font-weight: 700;        color: rgb(31, 45, 61);    }    #intro .subtitle {        font-size: 1.2rem;        font-weight: 700;        color: rgb(31, 45, 61);    }</style><div id="intro">    <p class="title">Blog Capstone Project Part 4 - Adding Users</h2>    <p class="subtitle">Learning Log: Day 69 of 100 Days of Code</h3>    <p>GitHub Repo: <a href="https://github.com/Freedempire/100_days_of_code.git">100_days_of_code</a></p></div><h2 id="Screenshots"><a href="#Screenshots" class="headerlink" title="Screenshots"></a>Screenshots</h2><p><img src="https://i.ibb.co/M8q6b4d/Blog-project-part4-1.jpg" alt="Blog screenshot 1"><br><img src="https://i.ibb.co/XW5WxSQ/Blog-project-part4-2.jpg" alt="Blog screenshot 2"><br><img src="https://i.ibb.co/Dwj1KGd/Blog-project-part4-3.jpg" alt="Blog screenshot 3"><br><img src="https://i.ibb.co/Vmq0bHv/Blog-project-part4-4.jpg" alt="Blog screenshot 4"><br><img src="https://i.ibb.co/17RCLWV/Blog-project-part4-5.jpg" alt="Blog screenshot 5"><br><img src="https://i.ibb.co/HXvCVg1/Blog-project-part4-6.jpg" alt="Blog screenshot 6"><br><img src="https://i.ibb.co/5KmQtXc/Blog-project-part4-7.jpg" alt="Blog screenshot 7"><br><img src="https://i.ibb.co/N6XT6dJ/Blog-project-part4-8.jpg" alt="Blog screenshot 8"></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> web development </tag>
            
            <tag> decorator </tag>
            
            <tag> wraps </tag>
            
            <tag> orm </tag>
            
            <tag> relationship </tag>
            
            <tag> flask-gravatar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《臨江仙 廿一史彈詞第三段說秦漢開場詞》賞析</title>
      <link href="/posts/%E3%80%8A%E8%87%A8%E6%B1%9F%E4%BB%99-%E5%BB%BF%E4%B8%80%E5%8F%B2%E5%BD%88%E8%A9%9E%E7%AC%AC%E4%B8%89%E6%AE%B5%E8%AA%AA%E7%A7%A6%E6%BC%A2%E9%96%8B%E5%A0%B4%E8%A9%9E%E3%80%8B%E8%B3%9E%E6%9E%90/"/>
      <url>/posts/%E3%80%8A%E8%87%A8%E6%B1%9F%E4%BB%99-%E5%BB%BF%E4%B8%80%E5%8F%B2%E5%BD%88%E8%A9%9E%E7%AC%AC%E4%B8%89%E6%AE%B5%E8%AA%AA%E7%A7%A6%E6%BC%A2%E9%96%8B%E5%A0%B4%E8%A9%9E%E3%80%8B%E8%B3%9E%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<style>    #intro {        font-family: Noto Serif TC;        text-align: center;        font-size: 1.3em;    }    #intro h2 {        margin-bottom: 0;    }    #intro .small.gray {        font-size: 1rem;        color: gray;    }    #article-container {        font-family: Noto Serif TC;        font-size: 1.3em;    }</style><div id="intro">    <h2>臨江仙 廿一史彈詞第三段說秦漢開場詞</h2>    <p>        <span class="small gray">明 · 楊愼</span><br>        <span class="small gray">詞</span><br>        <span>滾滾長江東逝水，浪花淘盡英雄。</span><br>        <span>是非成敗轉頭空。</span><br>        <span>靑山依舊在，幾度夕陽紅。</span><br>        <br>        <span>白髮漁樵江渚上，慣看秋月春風。</span><br>        <span>一壺濁酒喜相逢。</span><br>        <span>古今多少事，都付笑談中。</span><br>    </p></div><h2 id="作者簡介"><a href="#作者簡介" class="headerlink" title="作者簡介"></a>作者簡介</h2><p>生卒：公元1488—1559年<br>介紹：明四川新都人，字用修，號昇庵。楊廷和子。明正德六年（1511年）進士第一。謚文憲。以博洽冠一時，著述甚富。其詩清新綺縟，獨掇六朝之秀，於明代自立門戶。工詞，涉筆瑰麗富贍，有沐蘭浴芳、吐雲含雪之妙。有《昇庵全集》、《昇庵外集》、散曲集《陶情樂府》、《廿一史彈詞》。編有《百琲明珠》、《詞林全選》。詞集名《昇庵長短句》。</p><h2 id="賞析"><a href="#賞析" class="headerlink" title="賞析"></a>賞析</h2><p>這是一首詠史詞，借敘述歷史興亡抒發人生感慨，豪放中有含蓄，高亢中有深沉。</p><p>詞的上闋通過歷史現象詠嘆江水不息、靑山常在，而一代代英雄人物卻無一不轉瞬即逝。下闋寫詞人高潔的情操、曠達的胸懷，在談笑間暢論古今，表現了詞人不羈世俗、淡泊灑脫的情懷。全詞基調慷慨悲壯，讀來只覺蕩氣回腸、回味無窮、感慨萬千。</p><p>作者試圖在歷史長河的奔騰與沉澱中探索永恆的價值，在成敗得失之間尋找深刻的人生哲理，有歷史興衰之感，更有人生沉浮之慨。</p><p>大江裹挾著浪花奔騰而去，英雄人物隨著流逝的江水消失得不見蹤影。「是非成敗轉頭空」，豪邁、悲壯，既有英雄功成名就後的失落、空虛，又暗含著高山隱士對名利的淡泊、輕視。</p><p>既然「是非成敗」都如同過眼煙雲，就不必耿耿於懷、斤斤計較；不如寄情山水，託趣漁樵，與秋月春風為伴，自在自得。</p><p>「白髮漁樵江渚上，慣看秋月春風。」作者就是詞中的白髮漁樵，坐看歷史長河滾滾東流。他以旁觀者的心境，看季節的變化，看時代的更迭，頓覺人生何嘗不是如此？他看透了朝廷的腐敗，寧肯終老邊荒，也不願卑躬屈膝、阿附權貴。</p><p>「一壺濁酒喜相逢。古今多少事，都付笑談中。」他以與知己相逢為樂事，把歷代興亡作為談笑之資。留也好，去也罷，四季照樣變化，朝代照樣更迭，生命照樣老去。面對短短的人生，我們又何必一定要去強求什麼呢？人的一生，窮也好，達也罷，所有的得与失，不也在生命消亡的同時就煙消雲散了嗎？所以，只要有一壺濁酒，有幾個知己，就應該很滿足了。</p><h2 id="翻譯"><a href="#翻譯" class="headerlink" title="翻譯"></a>翻譯</h2><blockquote><p>The Immortals By The River by Yang Shen<br>The gushing waters of the Yangzi River pour and disappear into the East, washing away past heroes: their triumphs and failures, all vanish into nothingness in an instant.  Yet, the green hills stood as before, along with the perpetual rosy sunset.</p><p>A gray-haired man fishes and splits firewood in a small island, accustomed to observing the autumn moons and feeling the spring winds. A good old friend comes by happily with a bottle of crude wine; tales, old and new, shall all then be wrapped in laughter!”<br>–Translated by KS Vincent Poon, Oct 2015; revised July 2020</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> literature </category>
          
      </categories>
      
      
        <tags>
            
            <tag> poem </tag>
            
            <tag> classics </tag>
            
            <tag> literature </tag>
            
            <tag> 楊愼 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day 68 of 100 Days of Code</title>
      <link href="/posts/Day-68-of-100-Days-of-Code/"/>
      <url>/posts/Day-68-of-100-Days-of-Code/</url>
      
        <content type="html"><![CDATA[<style>    #intro {        text-align: center;    }    #intro .title {        font-size: 1.5rem;        font-weight: 700;        color: rgb(31, 45, 61);    }    #intro .subtitle {        font-size: 1.2rem;        font-weight: 700;        color: rgb(31, 45, 61);    }</style><div id="intro">    <p class="title">Authentication with Flask</h2>    <p class="subtitle">Learning Log: Day 68 of 100 Days of Code</h3>    <p>GitHub Repo: <a href="https://github.com/Freedempire/100_days_of_code.git">100_days_of_code</a></p></div><h2 id="Flask-Login"><a href="#Flask-Login" class="headerlink" title="Flask-Login"></a>Flask-Login</h2><p>Flask-Login provides user session management for Flask. It handles the common tasks of logging in, logging out, and remembering your users’ sessions over extended periods of time.</p><h3 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask-login</span><br></pre></td></tr></table></figure><h3 id="Configuring"><a href="#Configuring" class="headerlink" title="Configuring"></a>Configuring</h3><p>The most important part of an application that uses Flask-Login is the <a href="https://flask-login.readthedocs.io/en/latest/#flask_login.LoginManager">LoginManager</a> class.</p><p>The login manager contains the code that lets your application and Flask-Login work together, such as how to load a user from an ID, where to send users when they need to log in, and the like.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_login <span class="keyword">import</span> LoginManager</span><br><span class="line">login_manager = LoginManager()</span><br><span class="line"></span><br><span class="line"><span class="comment"># initialize app with flask-login extension</span></span><br><span class="line">login_manager.init_app(app)</span><br></pre></td></tr></table></figure><p>By default, Flask-Login uses <a href="https://flask.palletsprojects.com/en/latest/quickstart/#sessions">sessions</a> for authentication. This means you must set the <strong>secret key</strong> on your application.</p><h3 id="user-loader-callback"><a href="#user-loader-callback" class="headerlink" title="user_loader callback"></a>user_loader callback</h3><p>You will need to provide a <a href="https://flask-login.readthedocs.io/en/latest/#flask_login.LoginManager.user_loader">user_loader</a> callback. This callback is used to reload the user object from the user ID stored in the session. It should take the <em>str</em> ID of a user, and return the corresponding user object. For example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@login_manager.user_loader</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_user</span>(<span class="params">user_id</span>):</span><br><span class="line">    <span class="keyword">return</span> User.get(user_id)</span><br></pre></td></tr></table></figure><p>It should return <code>None</code> (not raise an exception) if the ID is not valid.</p><h3 id="User-class"><a href="#User-class" class="headerlink" title="User class"></a>User class</h3><p>The class that you use to represent users needs to implement these properties and methods:</p><ul><li>is_authenticated: return <code>True</code> if the user is authenticated.</li><li>is_active: return <code>True</code> if this is an active user.</li><li>is_anonymous: return <code>True</code> if this is an anonymous user.</li><li>get_id(): return a <code>str</code> that uniquely identifies this user, and can be used to load the user from the <code>user_loader</code> callback.</li></ul><p>To make implementing a user class easier, you can inherit from <a href="https://flask-login.readthedocs.io/en/latest/#flask_login.UserMixin">UserMixin</a>, which provides default implementations for all of these properties and methods.</p><h3 id="Login-example"><a href="#Login-example" class="headerlink" title="Login example"></a>Login example</h3><p>Once a user has authenticated, you log them in with the <a href="https://flask-login.readthedocs.io/en/latest/#flask_login.login_user">login_user</a> function.</p><p>You can then access the logged-in user with the <code>current_user</code> proxy, which is available in every template:</p><figure class="highlight jinja"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> current_user.is_authenticated %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  Hi </span><span class="template-variable">&#123;&#123; current_user.name &#125;&#125;</span><span class="language-xml">!</span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span></span><br></pre></td></tr></table></figure><p>Views that require your users to be logged in can be decorated with the <code>login_required</code> decorator:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/settings&quot;</span></span>)</span></span><br><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">settings</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>When the user is ready to log out:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/logout&quot;</span></span>)</span></span><br><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">logout</span>():</span><br><span class="line">    logout_user()</span><br><span class="line">    <span class="keyword">return</span> redirect(somewhere)</span><br></pre></td></tr></table></figure><h2 id="Password-hashing"><a href="#Password-hashing" class="headerlink" title="Password hashing"></a>Password hashing</h2><p>Hashing passwords is a cheap and secure method that keeps the passwords safe from malicious activity. Suppose, if a website is hacked, cybercriminals don’t get access to your password. Instead, they just get access to the encrypted “hash” created by the method of hashing.</p><h3 id="Difference-between-encryption-and-hashing"><a href="#Difference-between-encryption-and-hashing" class="headerlink" title="Difference between encryption and hashing"></a>Difference between encryption and hashing</h3><ul><li>Encryption: Encryption is the process of encoding plain text or any information so that only authorized people can read it with a corresponding key. Encryption is a two-way function where information is scrambled in such a way that it can be unscrambled later.</li><li>Hashing: Hashing is a one-way function where data is mapped to a fixed-length value. Hashing is primarily used for authentication.</li></ul><h3 id="Salt"><a href="#Salt" class="headerlink" title="Salt"></a>Salt</h3><p>In cryptography, a salt is random data used as an additional input to a one-way function that hashes data, such as a password. Salting adds an additional value to the end of the password that changes the hash value produced and prevents the identification of duplicate or common passwords</p><h3 id="Werkzeug-security-helpers"><a href="#Werkzeug-security-helpers" class="headerlink" title="Werkzeug security helpers"></a>Werkzeug security helpers</h3><ul><li><code>werkzeug.security.generate_password_hash(password, method=&#39;pbkdf2&#39;, salt_length=16)</code><br>Securely hash a password for storage. A password can be compared to a stored hash using <code>check_password_hash()</code>.</li><li><code>werkzeug.security.check_password_hash(pwhash, password)</code><br>Securely check that the given stored password hash, previously generated using <code>generate_password_hash()</code>, matches the given password.</li></ul><h2 id="Flask-message-flashing"><a href="#Flask-message-flashing" class="headerlink" title="Flask message flashing"></a>Flask message flashing</h2><p>Flask provides a really simple way to give feedback to a user with the <a href="https://flask.palletsprojects.com/en/2.3.x/patterns/flashing/">flashing system</a>. The flashing system basically makes it possible to record a message at the end of a request and access it next request and only next request. This is usually combined with a layout template that does this.</p><h2 id="Screenshot"><a href="#Screenshot" class="headerlink" title="Screenshot"></a>Screenshot</h2><p><img src="https://i.ibb.co/tY4cX6q/flask-authentication.jpg" alt="Flask authentication"></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> web development </tag>
            
            <tag> authentication </tag>
            
            <tag> hash </tag>
            
            <tag> salt </tag>
            
            <tag> encryption </tag>
            
            <tag> mixin </tag>
            
            <tag> flask-login </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day 67 of 100 Days of Code</title>
      <link href="/posts/Day-67-of-100-Days-of-Code/"/>
      <url>/posts/Day-67-of-100-Days-of-Code/</url>
      
        <content type="html"><![CDATA[<style>    #intro {        text-align: center;    }    #intro .title {        font-size: 1.5rem;        font-weight: 700;        color: rgb(31, 45, 61);    }    #intro .subtitle {        font-size: 1.2rem;        font-weight: 700;        color: rgb(31, 45, 61);    }</style><div id="intro">    <p class="title">Blog Capstone Project Part 3 - RESTful Routing</h2>    <p class="subtitle">Learning Log: Day 67 of 100 Days of Code</h3>    <p>GitHub Repo: <a href="https://github.com/Freedempire/100_days_of_code.git">100_days_of_code</a></p></div><h2 id="Screenshots"><a href="#Screenshots" class="headerlink" title="Screenshots"></a>Screenshots</h2><p><img src="https://i.ibb.co/Cs42ZY3/blog-project-1.jpg" alt="Blog project screenshot 1"><br><img src="https://i.ibb.co/7ycTD7g/blog-project-2.jpg" alt="Blog project screenshot 2"><br><img src="https://i.ibb.co/R426H7R/blog-project-3.jpg" alt="Blog project screenshot 3"><br><img src="https://i.ibb.co/pfhgXHR/blog-project-4.jpg" alt="Blog project screenshot 4"><br><img src="https://i.ibb.co/487MTv6/blog-project-5.jpg" alt="Blog project screenshot 5"><br><img src="https://i.ibb.co/6HddVYD/blog-project-6.jpg" alt="Blog project screenshot 6"><br><img src="https://i.ibb.co/GVwrGGB/blog-project-7.jpg" alt="Blog project screenshot 7"></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> web development </tag>
            
            <tag> rest api </tag>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day 66 of 100 Days of Code</title>
      <link href="/posts/Day-66-of-100-Days-of-Code/"/>
      <url>/posts/Day-66-of-100-Days-of-Code/</url>
      
        <content type="html"><![CDATA[<style>    #intro {        text-align: center;    }    #intro .title {        font-size: 1.5rem;        font-weight: 700;        color: rgb(31, 45, 61);    }    #intro .subtitle {        font-size: 1.2rem;        font-weight: 700;        color: rgb(31, 45, 61);    }</style><div id="intro">    <p class="title">Build Your Own REST API Service</h2>    <p class="subtitle">Learning Log: Day 66 of 100 Days of Code</h3>    <p>GitHub Repo: <a href="https://github.com/Freedempire/100_days_of_code.git">100_days_of_code</a></p></div><h2 id="REST-API"><a href="#REST-API" class="headerlink" title="REST API"></a>REST API</h2><p>REST stands for <strong>Representational State Transfer</strong>. This means that when a client requests a resource using a REST API, the server <em>transfers</em> back the current <em>state</em> of the resource in a standardized <em>representation</em>.</p><p>REST is a set of guidelines that software can use to communicate over the internet in order to make integrations simple and scalable. A REST API (also called a “RESTful” API) is a specific type of API that follows these guidelines.</p><p>REST APIs work by fielding requests for a resource and returning all relevant information about the resource, translated into a format that clients can easily interpret (this format is determined by the API receiving requests). Clients can also modify items on the server and even add new items to the server through a REST API.</p><h3 id="Six-rules-of-REST-APIs"><a href="#Six-rules-of-REST-APIs" class="headerlink" title="Six rules of REST APIs"></a>Six rules of REST APIs</h3><ol><li>Client-Server separation<br>The client and server can only interact in one way: The client sends a request to the server, then the server sends a response back to the client. Servers cannot make requests and clients cannot respond — all interactions are initiated by the client.</li><li>Uniform interface<br>All requests and all responses must follow a common protocol, or a way of formatting their messages. Applications and servers are written in all sorts of different languages that don’t do a great job of working together without an intermediary. A uniform interface is a common language for any client to communicate with any REST API.<br>For most REST APIs, this common language is HTTP, or Hyper-Text Transfer Protocol.<br>HTTP requests contain two pieces of information: HTTP method and URL.<br>HTTP request methods:<ul><li>GET: The GET method requests a representation of the specified resource. Requests using GET should only retrieve data.</li><li>POST: The POST method submits an entity to the specified resource, often causing a change in state or side effects on the server.</li><li>PUT: The PUT method replaces all current representations of the target resource with the request payload.</li><li>PATCH: The PATCH method applies partial modifications to a resource.</li><li>DELETE: The DELETE method deletes the specified resource.</li></ul></li><li>Stateless<br>Every interaction is independent, and each request and response provides all the information required to complete the interaction.</li><li>Layered system<br>There are typically more servers or layers between a client and server. They are there to add security, handle and distribute traffic, or assist with a number of other important functions.</li><li>Cacheable<br>REST APIs are created with data caching in mind. When a server sends its response to a client, the response should indicate whether the resource provided can be cached, and for how long.</li><li>Code on demand<br>If desired, an API can send computer code to clients in its response. This empowers the client to run the code in its own backend.</li></ol>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> web development </tag>
            
            <tag> rest api </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day 65 of 100 Days of Code</title>
      <link href="/posts/Day-65-of-100-Days-of-Code/"/>
      <url>/posts/Day-65-of-100-Days-of-Code/</url>
      
        <content type="html"><![CDATA[<style>    #intro {        text-align: center;    }    #intro .title {        font-size: 1.5rem;        font-weight: 700;        color: rgb(31, 45, 61);    }    #intro .subtitle {        font-size: 1.2rem;        font-weight: 700;        color: rgb(31, 45, 61);    }</style><div id="intro">    <p class="title">Web Design School</h2>    <p class="subtitle">Learning Log: Day 65 of 100 Days of Code</h3>    <p>GitHub Repo: <a href="https://github.com/Freedempire/100_days_of_code.git">100_days_of_code</a></p></div><h2 id="Color-theory"><a href="#Color-theory" class="headerlink" title="Color theory"></a>Color theory</h2><p>Color theory is a huge field of knowledge. It includes <strong>rules and guidelines about various color combinations and their uses</strong>. Apart from the basic terminology and classifications (such as color schemes), it also taps into other considerations such as <strong>human perception</strong>, <strong>cultural associations</strong>, <strong>color psychology</strong>, and more.</p><p>Learning about color theory can help you create effective, smart designs.</p><h3 id="Why-color-matters"><a href="#Why-color-matters" class="headerlink" title="Why color matters"></a>Why color matters</h3><ul><li>Colors can improve visitors’ online experiences, enabling them to find the information they need and respond to your Call to Action (CTA).</li><li>Color plays a significant role in branding and product messaging.</li></ul><h3 id="Key-color-theory-terms"><a href="#Key-color-theory-terms" class="headerlink" title="Key color theory terms"></a>Key color theory terms</h3><ul><li>Color wheel: a powerful tool that can help you visualize relationships between colors in a standard, schematic way.<br>The basic color wheel consists of 12 colors. <strong>Primary colors</strong> form the basis of all others. These as Red, Blue, and Yellow. Mixing primary colors gives you Orange, Green, and Purple. These are known as <strong>secondary colors</strong>. Mixing primary and secondary colors creates tertiary colors.</li><li>Color relationships: also known as color schemes. The four main types include:<ul><li>Monochrome: Consisting of various tints, shades, and saturation of the same color.</li><li>Complementary: Based on two colors from opposite sides of the color wheel.</li><li>Analogous: Featuring three colors that are next to each other on the color wheel.</li><li>Triadic: Using three colors that are at the points of a triangle drawn within the color wheel.</li></ul></li><li>Color warmth. Hues that contain higher amounts of yellow and red are considered <strong>warm colors</strong>. They evoke a sense of passion, happiness, and heat, but can also seem aggressive and bring feelings of danger. <strong>Cool colors</strong> contain higher amounts of blue and purple. These colors are reminiscent of chilly climates, crystal clear waters, or the sky. They are considered more soothing and relaxing than warm colors. However, they can also carry connotations of formality and sadness. Adding <strong>neutral colors</strong> such as white, black, and gray can help you achieve a harmonious palette. They can balance out your color scheme and add contrast to your designs.</li><li>Tints and shades. You can create <strong>tints</strong> by adding white to a color. Higher levels of white will produce lighter tints. Similarly, if you add black, you will produce a different <strong>shade</strong>.</li><li>Hue, saturation and lightness.<br><strong>Hue</strong> describes the degree of similarity between colors. The point of reference is usually a color such as red, green, blue, or yellow. For instance, when you describe a color as yellow-green, you’re thinking of it as having two hues.<br><strong>Saturation</strong>, on the other hand, refers to color intensity. Increasing it will make the color more vibrant and darker while decreasing it will make the color appear faded and pale.<br><strong>Lightness</strong> defines how bright a color is compared to pure white. Changing only the lightness parameter in graphic editing software will produce different tints and shades.</li><li>Contrast: a crucial element of any website, especially when it comes to background color and text. If the contrast is too low, users are more likely to have trouble differentiating between elements.<br>For the sake of readability, it’s best to use a white background and dark text color to keep pages clean and organized. On the flip side, you can also experiment with reversing the colors and using a light text over a dark background. These two combinations have become a trend in web design, with many templates and apps offering a “Dark Theme” or a “Light Theme.”</li></ul><h3 id="How-to-use-color-theory-on-websites"><a href="#How-to-use-color-theory-on-websites" class="headerlink" title="How to use color theory on websites"></a>How to use color theory on websites</h3><ul><li>Rely on color theory to come up with harmonious palettes and find the right color combinations.</li><li>Color psychology is a powerful technique that can convey a variety of messages to users.</li><li>You should always research your target audience and test their color preferences.</li></ul><h2 id="Typography-in-web-design"><a href="#Typography-in-web-design" class="headerlink" title="Typography in web design"></a>Typography in web design</h2><p>Typography in web design is similar to print design but requires certain considerations to ensure legibility on all screen types. Typeface, type size, color, line height, and letter shapes are some of the factors within typography that must be carefully balanced to provide a pleasant reading experience.</p><p>The primary purpose of typography is to communicate a written message. Type should be designed to be legible and provide a pleasant reading experience. Factors like type size, line height, and line length are elements of typography that should always be considered.</p><p>A website should keep the number of fonts to a minimum—no more than three in total. When a site has too many fonts, the user can become disoriented with so many shifts in the visual design. The chosen typefaces should have a variety of weights and styles that can be used strategically in the UI design.</p><h2 id="User-interface"><a href="#User-interface" class="headerlink" title="User interface"></a>User interface</h2><p>The user interface is the point at which human users interact with a computer, website or application. The goal of effective UI is to make the user’s experience <em>easy</em> and <em>intuitive</em>, requiring minimum effort on the user’s part to receive the maximum desired outcome.</p><p>When designing a UI for your site, it’s important to consider the user’s expectations in terms of <em>accessibility</em>, <em>visual aesthetic</em> and <em>ease of use</em>. An optimal mix of effective visuals and efficient responsiveness will improve your site’s conversion rates, as it anticipates the needs of the user and then satisfies those needs.</p><h2 id="User-experience"><a href="#User-experience" class="headerlink" title="User experience"></a>User experience</h2><p>User interface and user experience are related and equally important to the execution of a project, but the specifics differ. Mainly, UI is designed around the intended look and feel of the site, app or program while UX spans the entire process of conceptualization, development and delivery. Additionally, UX can be referenced in relation to nearly any product, while UI can only pertain to digital products.</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> web development </tag>
            
            <tag> color theory </tag>
            
            <tag> typography </tag>
            
            <tag> user interface </tag>
            
            <tag> user experience </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day 64 of 100 Days of Code</title>
      <link href="/posts/Day-64-of-100-Days-of-Code/"/>
      <url>/posts/Day-64-of-100-Days-of-Code/</url>
      
        <content type="html"><![CDATA[<style>    #intro {        text-align: center;    }    #intro .title {        font-size: 1.5rem;        font-weight: 700;        color: rgb(31, 45, 61);    }    #intro .subtitle {        font-size: 1.2rem;        font-weight: 700;        color: rgb(31, 45, 61);    }</style><div id="intro">    <p class="title">My Top 10 Movies Website</h2>    <p class="subtitle">Learning Log: Day 64 of 100 Days of Code</h3>    <p>GitHub Repo: <a href="https://github.com/Freedempire/100_days_of_code.git">100_days_of_code</a></p></div><h2 id="Screenshots"><a href="#Screenshots" class="headerlink" title="Screenshots"></a>Screenshots</h2><p><img src="https://i.ibb.co/72YYX0p/top-movies-site-1.jpg" alt="My top 10 movies 1"><br><img src="https://i.ibb.co/Tmhx0TJ/top-movies-site-2.jpg" alt="My top 10 movies 2"><br><img src="https://i.ibb.co/zhrpQBb/top-movies-site-3.jpg" alt="My top 10 movies 3"><br><img src="https://i.ibb.co/7Gk7Ttm/top-movies-site-4.jpg" alt="My top 10 movies 4"><br><img src="https://i.ibb.co/Y3rsLvm/top-movies-site-5.jpg" alt="My top 10 movies 5"><br><img src="https://i.ibb.co/0Q3KVsz/top-movies-site-6.jpg" alt="My top 10 movies 6"></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> web development </tag>
            
            <tag> flask </tag>
            
            <tag> backend </tag>
            
            <tag> sqlite </tag>
            
            <tag> sqlalchemy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day 63 of 100 Days of Code</title>
      <link href="/posts/Day-63-of-100-Days-of-Code/"/>
      <url>/posts/Day-63-of-100-Days-of-Code/</url>
      
        <content type="html"><![CDATA[<style>    #intro {        text-align: center;    }    #intro .title {        font-size: 1.5rem;        font-weight: 700;        color: rgb(31, 45, 61);    }    #intro .subtitle {        font-size: 1.2rem;        font-weight: 700;        color: rgb(31, 45, 61);    }</style><div id="intro">    <p class="title">Databases and with SQLite and SQLAlchemy</h2>    <p class="subtitle">Learning Log: Day 63 of 100 Days of Code</h3>    <p>GitHub Repo: <a href="https://github.com/Freedempire/100_days_of_code.git">100_days_of_code</a></p></div><h2 id="SQLite"><a href="#SQLite" class="headerlink" title="SQLite"></a>SQLite</h2><p>SQLite is a C library that provides a lightweight disk-based database that doesn’t require a separate server process and allows accessing the database using a nonstandard variant of the SQL query language. Some applications can use SQLite for internal data storage. It’s also possible to <em>prototype</em> an application using SQLite and then port the code to a larger database such as <strong>PostgreSQL</strong> or <strong>Oracle</strong>.</p><h3 id="Tutorial"><a href="#Tutorial" class="headerlink" title="Tutorial"></a>Tutorial</h3><p>First, we need to create a new database and open a database connection to allow sqlite3 to work with it. Call <a href="https://docs.python.org/3/library/sqlite3.html#sqlite3.connect">sqlite3.connect()</a> to create a connection to the database <code>tutorial.db</code> in the current working directory, <em>implicitly</em> creating it if it does not exist:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line">con = sqlite3.connect(<span class="string">&quot;tutorial.db&quot;</span>)</span><br></pre></td></tr></table></figure><p>The returned <a href="https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection">Connection</a> object con represents the connection to the on-disk database.</p><p>In order to execute SQL statements and fetch results from SQL queries, we will need to use a database cursor. Call <a href="https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.cursor">con.cursor()</a> to create the <a href="https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor">Cursor</a>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cur = con.cursor()</span><br></pre></td></tr></table></figure><p>For simplicity, we can just use column names in the table declaration – thanks to the <a href="https://www.sqlite.org/flextypegood.html">flexible typing</a> feature of SQLite, specifying the data types is optional. Execute the <code>CREATE TABLE</code> statement by calling <a href="https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.execute">cur.execute(…)</a>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cur.execute(<span class="string">&quot;CREATE TABLE movie(title, year, score)&quot;</span>)</span><br></pre></td></tr></table></figure><p>We can verify that the new table has been created by querying the <code>sqlite_master</code> table built-in to SQLite, which should now contain an entry for the movie table definition (see <a href="https://www.sqlite.org/schematab.html">The Schema Table</a> for details). Execute that query by calling <code>cur.execute(...)</code>, assign the result to <code>res</code>, and call <a href="https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.fetchone">res.fetchone()</a> to fetch the resulting row:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; res = cur.execute(<span class="string">&quot;SELECT name FROM sqlite_master&quot;</span>)</span><br><span class="line">&gt;&gt;&gt; res.fetchone()</span><br><span class="line">(<span class="string">&#x27;movie&#x27;</span>,)</span><br><span class="line">&gt;&gt;&gt; res = cur.execute(<span class="string">&quot;SELECT name FROM sqlite_master WHERE name=&#x27;spam&#x27;&quot;</span>)</span><br><span class="line">&gt;&gt;&gt; res.fetchone() is None</span><br><span class="line">True</span><br></pre></td></tr></table></figure><p>Now, add two rows of data supplied as SQL literals by executing an <code>INSERT</code> statement, once again by calling <code>cur.execute(...)</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cur.execute(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    INSERT INTO movie VALUES</span></span><br><span class="line"><span class="string">        (&#x27;Monty Python and the Holy Grail&#x27;, 1975, 8.2),</span></span><br><span class="line"><span class="string">        (&#x27;And Now for Something Completely Different&#x27;, 1971, 7.5)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><p>The <code>INSERT</code> statement implicitly opens a <em>transaction</em>, which needs to be committed before changes are saved in the database (see <a href="https://docs.python.org/3/library/sqlite3.html#sqlite3-controlling-transactions">Transaction control</a> for details). Call <a href="https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.commit">con.commit()</a> on the connection object to commit the transaction:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">con.commit()</span><br></pre></td></tr></table></figure><p>We can verify that the data was inserted correctly by executing a <code>SELECT</code> query. Use the now-familiar <code>cur.execute(...)</code> to assign the result to <code>res</code>, and call <a href="https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.fetchall">res.fetchall()</a> to return all resulting rows:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; res = cur.execute(<span class="string">&quot;SELECT score FROM movie&quot;</span>)</span><br><span class="line">&gt;&gt;&gt; res.fetchall()</span><br><span class="line">[(8.2,), (7.5,)]</span><br></pre></td></tr></table></figure><p>Now, insert three more rows by calling <a href="https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.executemany">cur.executemany(…)</a>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">data = [</span><br><span class="line">    (<span class="string">&quot;Monty Python Live at the Hollywood Bowl&quot;</span>, <span class="number">1982</span>, <span class="number">7.9</span>),</span><br><span class="line">    (<span class="string">&quot;Monty Python&#x27;s The Meaning of Life&quot;</span>, <span class="number">1983</span>, <span class="number">7.5</span>),</span><br><span class="line">    (<span class="string">&quot;Monty Python&#x27;s Life of Brian&quot;</span>, <span class="number">1979</span>, <span class="number">8.0</span>),</span><br><span class="line">]</span><br><span class="line">cur.executemany(<span class="string">&quot;INSERT INTO movie VALUES(?, ?, ?)&quot;</span>, data)</span><br><span class="line">con.commit()</span><br></pre></td></tr></table></figure><p>Notice that <code>?</code> placeholders are used to bind data to the query. <em>Always</em> use placeholders instead of string formatting to bind Python values to SQL statements, to avoid <a href="https://en.wikipedia.org/wiki/SQL_injection">SQL injection attacks</a>.</p><p>We can verify that the new rows were inserted by executing a <code>SELECT</code> query, this time iterating over the results of the query:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="keyword">for</span> row <span class="keyword">in</span> cur.execute(<span class="string">&quot;SELECT year, title FROM movie ORDER BY year&quot;</span>):</span><br><span class="line">&gt;&gt;&gt;     <span class="built_in">print</span>(row)</span><br><span class="line">(1971, <span class="string">&#x27;And Now for Something Completely Different&#x27;</span>)</span><br><span class="line">(1975, <span class="string">&#x27;Monty Python and the Holy Grail&#x27;</span>)</span><br><span class="line">(1979, <span class="string">&quot;Monty Python&#x27;s Life of Brian&quot;</span>)</span><br><span class="line">(1982, <span class="string">&#x27;Monty Python Live at the Hollywood Bowl&#x27;</span>)</span><br><span class="line">(1983, <span class="string">&quot;Monty Python&#x27;s The Meaning of Life&quot;</span>)</span><br></pre></td></tr></table></figure><p>Finally, verify that the database has been written to disk by calling <a href="https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.close">con.close()</a> to close the existing connection, opening a new one, creating a new cursor, then querying the database:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; con.close()</span><br><span class="line">&gt;&gt;&gt; new_con = sqlite3.connect(<span class="string">&quot;tutorial.db&quot;</span>)</span><br><span class="line">&gt;&gt;&gt; new_cur = new_con.cursor()</span><br><span class="line">&gt;&gt;&gt; res = new_cur.execute(<span class="string">&quot;SELECT title, year FROM movie ORDER BY score DESC&quot;</span>)</span><br><span class="line">&gt;&gt;&gt; title, year = res.fetchone()</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">print</span>(f<span class="string">&#x27;The highest scoring Monty Python movie is &#123;title!r&#125;, released in &#123;year&#125;&#x27;</span>)</span><br><span class="line">The highest scoring Monty Python movie is <span class="string">&#x27;Monty Python and the Holy Grail&#x27;</span>, released <span class="keyword">in</span> 1975</span><br></pre></td></tr></table></figure><p>The <code>!r</code> in the above f-string can be replace by calls to <code>repr()</code>. Similarly, <code>!s</code> can be replaced by calls to <code>str()</code> and <code>!a</code> by calls to <code>ascii()</code>.</p><h3 id="How-to-guides"><a href="#How-to-guides" class="headerlink" title="How-to guides"></a>How-to guides</h3><h4 id="How-to-use-connection-shortcut-methods"><a href="#How-to-use-connection-shortcut-methods" class="headerlink" title="How to use connection shortcut methods"></a>How to use connection shortcut methods</h4><p>Using the <a href="https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.execute">execute()</a>, <a href="https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.executemany">executemany()</a>, and <a href="https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.executescript">executescript()</a> methods of the <a href="https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection">Connection</a> class, your code can be written more concisely because you don’t have to create the (often superfluous) <a href="https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor">Cursor</a> objects explicitly. Instead, the Cursor objects are created <em>implicitly</em> and these shortcut methods <em>return the cursor objects</em>. This way, you can execute a <code>SELECT</code> statement and iterate over it directly using only a single call on the Connection object.</p><h4 id="How-to-use-the-connection-context-manager"><a href="#How-to-use-the-connection-context-manager" class="headerlink" title="How to use the connection context manager"></a>How to use the connection context manager</h4><p>A <code>Connection</code> object can be used as a context manager that automatically <em>commits</em> or <em>rolls back</em> open <em>transactions</em> when leaving the body of the context manager. If the body of the with statement finishes without exceptions, the transaction is committed. If this commit fails, or if the body of the with statement raises an uncaught exception, the transaction is rolled back.</p><p>If there is no open transaction upon leaving the body of the with statement, the context manager is a no-op (no operation).</p><p>Note The context manager neither implicitly opens a new transaction nor closes the connection.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">con = sqlite3.connect(<span class="string">&quot;:memory:&quot;</span>)</span><br><span class="line">con.execute(<span class="string">&quot;CREATE TABLE lang(id INTEGER PRIMARY KEY, name VARCHAR UNIQUE)&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Successful, con.commit() is called automatically afterwards</span></span><br><span class="line"><span class="keyword">with</span> con:</span><br><span class="line">    con.execute(<span class="string">&quot;INSERT INTO lang(name) VALUES(?)&quot;</span>, (<span class="string">&quot;Python&quot;</span>,))</span><br><span class="line"></span><br><span class="line"><span class="comment"># con.rollback() is called after the with block finishes with an exception,</span></span><br><span class="line"><span class="comment"># the exception is still raised and must be caught</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> con:</span><br><span class="line">        con.execute(<span class="string">&quot;INSERT INTO lang(name) VALUES(?)&quot;</span>, (<span class="string">&quot;Python&quot;</span>,))</span><br><span class="line"><span class="keyword">except</span> sqlite3.IntegrityError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;couldn&#x27;t add Python twice&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Connection object used as context manager only commits or rollbacks transactions,</span></span><br><span class="line"><span class="comment"># so the connection object should be closed manually</span></span><br><span class="line">con.close()</span><br></pre></td></tr></table></figure><h4 id="How-to-use-placeholders-to-bind-values-in-SQL-queries"><a href="#How-to-use-placeholders-to-bind-values-in-SQL-queries" class="headerlink" title="How to use placeholders to bind values in SQL queries"></a>How to use placeholders to bind values in SQL queries</h4><p>SQL operations usually need to use values from Python variables. However, beware of using Python’s string operations to assemble queries, as they are vulnerable to <a href="https://en.wikipedia.org/wiki/SQL_injection">SQL injection attacks</a>. For example, an attacker can simply close the single quote and inject OR TRUE to select all rows:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="comment"># Never do this -- insecure!</span></span><br><span class="line">&gt;&gt;&gt; symbol = input()</span><br><span class="line"><span class="string">&#x27; OR TRUE; --</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; sql = &quot;SELECT * FROM stocks WHERE symbol = &#x27;</span>%s<span class="string">&#x27;&quot; % symbol</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; print(sql)</span></span><br><span class="line"><span class="string">SELECT * FROM stocks WHERE symbol = &#x27;</span><span class="string">&#x27; OR TRUE; --&#x27;</span></span><br><span class="line">&gt;&gt;&gt; cur.execute(sql)</span><br></pre></td></tr></table></figure><p>Instead, use the DB-API’s parameter substitution. To insert a variable into a query string, use a <em>placeholder</em> in the string, and substitute the actual values into the query by providing them as a tuple of values to the second argument of the cursor’s <code>execute()</code> method.</p><p>An SQL statement may use one of two kinds of placeholders: <strong>question marks</strong> (qmark style) or <strong>named placeholders</strong> (named style). For the qmark style, parameters must be a <em>sequence</em> whose length must match the number of placeholders, or a <code>ProgrammingError</code> is raised. For the named style, parameters should be an instance of a <em>dict</em> (or a subclass), which must contain keys for all named parameters; any extra items are <em>ignored</em>. Here’s an example of both styles:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">con = sqlite3.connect(<span class="string">&quot;:memory:&quot;</span>)</span><br><span class="line">cur = con.execute(<span class="string">&quot;CREATE TABLE lang(name, first_appeared)&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># This is the named style used with executemany():</span></span><br><span class="line">data = (</span><br><span class="line">    &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;C&quot;</span>, <span class="string">&quot;year&quot;</span>: <span class="number">1972</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Fortran&quot;</span>, <span class="string">&quot;year&quot;</span>: <span class="number">1957</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Python&quot;</span>, <span class="string">&quot;year&quot;</span>: <span class="number">1991</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Go&quot;</span>, <span class="string">&quot;year&quot;</span>: <span class="number">2009</span>&#125;,</span><br><span class="line">)</span><br><span class="line">cur.executemany(<span class="string">&quot;INSERT INTO lang VALUES(:name, :year)&quot;</span>, data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># This is the qmark style used in a SELECT query:</span></span><br><span class="line">params = (<span class="number">1972</span>,)</span><br><span class="line">cur.execute(<span class="string">&quot;SELECT * FROM lang WHERE first_appeared = ?&quot;</span>, params)</span><br><span class="line"><span class="built_in">print</span>(cur.fetchall())</span><br></pre></td></tr></table></figure><h4 id="How-to-create-and-use-row-factories"><a href="#How-to-create-and-use-row-factories" class="headerlink" title="How to create and use row factories"></a>How to create and use row factories</h4><p>By default, sqlite3 represents each row as a tuple. If a tuple does not suit your needs, you can use the <a href="https://docs.python.org/3/library/sqlite3.html#sqlite3.Row">sqlite3.Row</a> class or a custom <a href="https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.row_factory">row_factory</a>.</p><p>While <code>row_factory</code> exists as an attribute both on the <code>Cursor</code> and the <code>Connection</code>, it is recommended to set <code>Connection.row_factory</code>, so all cursors created from the connection will use the same row factory.</p><p><code>Row</code> provides indexed and case-insensitive named access to columns, with minimal memory overhead and performance impact over a tuple. To use <code>Row</code> as a row factory, assign it to the row_factory attribute:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; con = sqlite3.connect(<span class="string">&quot;:memory:&quot;</span>)</span><br><span class="line">&gt;&gt;&gt; con.row_factory = sqlite3.Row</span><br></pre></td></tr></table></figure><p>Queries now return Row objects:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; res = con.execute(<span class="string">&quot;SELECT &#x27;Earth&#x27; AS name, 6378 AS radius&quot;</span>)</span><br><span class="line">&gt;&gt;&gt; row = res.fetchone()</span><br><span class="line">&gt;&gt;&gt; row.keys()</span><br><span class="line">[<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;radius&#x27;</span>]</span><br><span class="line">&gt;&gt;&gt; row[0]         <span class="comment"># Access by index.</span></span><br><span class="line"><span class="string">&#x27;Earth&#x27;</span></span><br><span class="line">&gt;&gt;&gt; row[<span class="string">&quot;name&quot;</span>]    <span class="comment"># Access by name.</span></span><br><span class="line"><span class="string">&#x27;Earth&#x27;</span></span><br><span class="line">&gt;&gt;&gt; row[<span class="string">&quot;RADIUS&quot;</span>]  <span class="comment"># Column names are case-insensitive.</span></span><br><span class="line">6378</span><br></pre></td></tr></table></figure><p>You can create a custom <code>row_factory</code> that returns each row as a dict, with column names mapped to values:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">dict_factory</span>(<span class="params">cursor, row</span>):</span><br><span class="line">    fields = [column[<span class="number">0</span>] <span class="keyword">for</span> column <span class="keyword">in</span> cursor.description]</span><br><span class="line">    <span class="keyword">return</span> &#123;key: value <span class="keyword">for</span> key, value <span class="keyword">in</span> <span class="built_in">zip</span>(fields, row)&#125;</span><br></pre></td></tr></table></figure><p>Using it, queries now return a dict instead of a tuple:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; con = sqlite3.connect(<span class="string">&quot;:memory:&quot;</span>)</span><br><span class="line">&gt;&gt;&gt; con.row_factory = dict_factory</span><br><span class="line">&gt;&gt;&gt; <span class="keyword">for</span> row <span class="keyword">in</span> con.execute(<span class="string">&quot;SELECT 1 AS a, 2 AS b&quot;</span>):</span><br><span class="line">...     <span class="built_in">print</span>(row)</span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>: 1, <span class="string">&#x27;b&#x27;</span>: 2&#125;</span><br></pre></td></tr></table></figure><h3 id="Standard-commands"><a href="#Standard-commands" class="headerlink" title="Standard commands"></a>Standard commands</h3><p><a href="https://www.codecademy.com/article/sql-commands">SQL Commands</a></p><h4 id="Data-definition"><a href="#Data-definition" class="headerlink" title="Data definition"></a>Data definition</h4><ul><li><a href="https://www.sqlite.org/lang_createtable.html">CREATE</a></li><li><a href="https://www.sqlite.org/lang_altertable.html">ALTER</a></li><li><a href="https://www.sqlite.org/lang_droptable.html">DROP</a></li></ul><h4 id="Data-manipulation"><a href="#Data-manipulation" class="headerlink" title="Data manipulation"></a>Data manipulation</h4><ul><li><a href="https://www.sqlite.org/lang_insert.html">INSERT</a></li><li><a href="https://www.sqlite.org/lang_update.html">UPDATE</a></li><li><a href="https://www.sqlite.org/lang_delete.html">DELETE</a></li></ul><h4 id="Data-query"><a href="#Data-query" class="headerlink" title="Data query"></a>Data query</h4><ul><li><a href="https://www.sqlite.org/lang_select.html">SELECT</a></li></ul><h3 id="Datatypes-in-SQLite"><a href="#Datatypes-in-SQLite" class="headerlink" title="Datatypes in SQLite"></a>Datatypes in SQLite</h3><ul><li>NULL. The value is a NULL value.</li><li>INTEGER. The value is a signed integer, stored in 0, 1, 2, 3, 4, 6, or 8 bytes depending on the magnitude of the value.</li><li>REAL. The value is a floating point value, stored as an 8-byte IEEE floating point number.</li><li>TEXT. The value is a text string, stored using the database encoding (UTF-8, UTF-16BE or UTF-16LE).</li><li>BLOB. The value is a blob of data, stored exactly as it was input.</li></ul><h2 id="Flask-SQLAlchemy"><a href="#Flask-SQLAlchemy" class="headerlink" title="Flask-SQLAlchemy"></a>Flask-SQLAlchemy</h2><p><a href="https://flask-sqlalchemy.palletsprojects.com/en/3.0.x/quickstart/">Flask-SQLAlchemy Documentation</a><br><a href="https://docs.sqlalchemy.org/tutorial/index.html">SQLAlchemy Tutorial</a></p><p>Flask-SQLAlchemy simplifies using SQLAlchemy by automatically handling creating, using, and cleaning up the SQLAlchemy objects you’d normally work with. While it adds a few useful features, it still works like SQLAlchemy.</p><h3 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -U Flask-SQLAlchemy</span><br></pre></td></tr></table></figure><h3 id="Configure-the-extension"><a href="#Configure-the-extension" class="headerlink" title="Configure the extension"></a>Configure the extension</h3><p>The only required Flask app config is the <code>SQLALCHEMY_DATABASE_URI</code> key. That is a connection string that tells SQLAlchemy what database to connect to.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"></span><br><span class="line"><span class="comment"># create the extension</span></span><br><span class="line">db = SQLAlchemy()</span><br><span class="line"><span class="comment"># create the app</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="comment"># configure the SQLite database, relative to the app instance folder</span></span><br><span class="line">app.config[<span class="string">&quot;SQLALCHEMY_DATABASE_URI&quot;</span>] = <span class="string">&quot;sqlite:///project.db&quot;</span></span><br><span class="line"><span class="comment"># initialize the app with the extension</span></span><br><span class="line">db.init_app(app)</span><br></pre></td></tr></table></figure><p>The <code>db</code> object gives you access to the <code>db.Model</code> class to define models, and the <code>db.session</code> to execute queries.</p><h3 id="Define-models"><a href="#Define-models" class="headerlink" title="Define models"></a>Define models</h3><p>Subclass <code>db.Model</code> to define a model class. The <code>db</code> object makes the names in <code>sqlalchemy</code> and <code>sqlalchemy.orm</code> available for convenience, such as <code>db.Column</code>. The model will generate a table name by converting the CamelCase class name to snake_case.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(db.Model):</span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    username = db.Column(db.String, unique=<span class="literal">True</span>, nullable=<span class="literal">False</span>)</span><br><span class="line">    email = db.Column(db.String)</span><br></pre></td></tr></table></figure><h3 id="Create-the-tables"><a href="#Create-the-tables" class="headerlink" title="Create the tables"></a>Create the tables</h3><p>After all models and tables are defined, call <code>SQLAlchemy.create_all()</code> to create the table schema in the database. This requires an application context. Since you’re not in a request at this point, create one manually.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> app.app_context():</span><br><span class="line">    db.create_all()</span><br></pre></td></tr></table></figure><p>If you define models in other modules, you must import them before calling <code>create_all</code>, otherwise SQLAlchemy will not know about them.</p><p><code>create_all</code> does not update tables if they are already in the database. If you change a model’s columns, use a migration library like Alembic with Flask-Alembic or Flask-Migrate to generate migrations that update the database schema.</p><h3 id="Query-the-data"><a href="#Query-the-data" class="headerlink" title="Query the data"></a>Query the data</h3><p>Within a Flask view or CLI command, you can use <code>db.session</code> to execute queries and modify model data.</p><p>SQLAlchemy automatically defines an <code>__init__</code> method for each model that assigns any keyword arguments to corresponding database columns and other attributes.</p><p><code>db.session.add(obj)</code> adds an object to the session, to be inserted. Modifying an object’s attributes updates the object. <code>db.session.delete(obj)</code> deletes an object. Remember to call <code>db.session.commit()</code> after modifying, adding, or deleting any data.</p><p><code>db.session.execute(db.select(...))</code> constructs a query to select data from the database. Building queries is the main feature of SQLAlchemy, so you’ll want to read its <a href="https://docs.sqlalchemy.org/tutorial/data_select.html">tutorial on select</a> to learn all about it. You’ll usually use the <code>Result.scalars()</code> method to get a list of results, or the <code>Result.scalar()</code> method to get a single result.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/users&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">user_list</span>():</span><br><span class="line">    users = db.session.execute(db.select(User).order_by(User.username)).scalars()</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;user/list.html&quot;</span>, users=users)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/users/create&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">user_create</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">        user = User(</span><br><span class="line">            username=request.form[<span class="string">&quot;username&quot;</span>],</span><br><span class="line">            email=request.form[<span class="string">&quot;email&quot;</span>],</span><br><span class="line">        )</span><br><span class="line">        db.session.add(user)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&quot;user_detail&quot;</span>, <span class="built_in">id</span>=user.<span class="built_in">id</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;user/create.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/user/&lt;int:id&gt;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">user_detail</span>(<span class="params"><span class="built_in">id</span></span>):</span><br><span class="line">    user = db.get_or_404(User, <span class="built_in">id</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;user/detail.html&quot;</span>, user=user)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/user/&lt;int:id&gt;/delete&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">user_delete</span>(<span class="params"><span class="built_in">id</span></span>):</span><br><span class="line">    user = db.get_or_404(User, <span class="built_in">id</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">        db.session.delete(user)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&quot;user_list&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;user/delete.html&quot;</span>, user=user)</span><br></pre></td></tr></table></figure><p>You may see uses of <code>Model.query</code> to build queries. This is an older interface for queries that is considered legacy in SQLAlchemy. Prefer using <code>db.session.execute(db.select(...))</code> instead.</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> web development </tag>
            
            <tag> flask </tag>
            
            <tag> backend </tag>
            
            <tag> sqlite </tag>
            
            <tag> sqlalchemy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day 62 of 100 Days of Code</title>
      <link href="/posts/Day-62-of-100-Days-of-Code/"/>
      <url>/posts/Day-62-of-100-Days-of-Code/</url>
      
        <content type="html"><![CDATA[<style>    #intro {        text-align: center;    }    #intro .title {        font-size: 1.5rem;        font-weight: 700;        color: rgb(31, 45, 61);    }    #intro .subtitle {        font-size: 1.2rem;        font-weight: 700;        color: rgb(31, 45, 61);    }</style><div id="intro">    <p class="title">Flask, WTForms, Bootstrap and CSV</h2>    <p class="subtitle">Learning Log: Day 62 of 100 Days of Code</h3>    <p>GitHub Repo: <a href="https://github.com/Freedempire/100_days_of_code.git">100_days_of_code</a></p></div><h2 id="Screenshots"><a href="#Screenshots" class="headerlink" title="Screenshots"></a>Screenshots</h2><p><img src="https://i.ibb.co/9t1BgyX/coffee-n-wifi1.jpg" alt="Webpage screenshot 1"><br><img src="https://i.ibb.co/hsrj0qT/coffee-n-wifi2.jpg" alt="Webpage screenshot 2"><br><img src="https://i.ibb.co/tqFC1Xj/coffee-n-wifi3.jpg" alt="Webpage screenshot 3"></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> web development </tag>
            
            <tag> flask </tag>
            
            <tag> backend </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day 61 of 100 Days of Code</title>
      <link href="/posts/Day-61-of-100-Days-of-Code/"/>
      <url>/posts/Day-61-of-100-Days-of-Code/</url>
      
        <content type="html"><![CDATA[<style>    #intro {        text-align: center;    }    #intro .title {        font-size: 1.5rem;        font-weight: 700;        color: rgb(31, 45, 61);    }    #intro .subtitle {        font-size: 1.2rem;        font-weight: 700;        color: rgb(31, 45, 61);    }</style><div id="intro">    <p class="title">Building Advanced Forms with Flask-WTForms</h2>    <p class="subtitle">Learning Log: Day 61 of 100 Days of Code</h3>    <p>GitHub Repo: <a href="https://github.com/Freedempire/100_days_of_code.git">100_days_of_code</a></p></div><h2 id="Flask-WTF"><a href="#Flask-WTF" class="headerlink" title="Flask-WTF"></a>Flask-WTF</h2><h3 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h3><p>Install or upgrade using pip:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -U Flask-WTF</span><br></pre></td></tr></table></figure><h3 id="Quick-start"><a href="#Quick-start" class="headerlink" title="Quick start"></a>Quick start</h3><h4 id="Creating-Forms"><a href="#Creating-Forms" class="headerlink" title="Creating Forms"></a>Creating Forms</h4><p>Flask-WTF provides your Flask application integration with WTForms. For example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_wtf <span class="keyword">import</span> FlaskForm</span><br><span class="line"><span class="keyword">from</span> wtforms <span class="keyword">import</span> StringField, SubmitField</span><br><span class="line"><span class="keyword">from</span> wtforms.validators <span class="keyword">import</span> DataRequired</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyForm</span>(<span class="title class_ inherited__">FlaskForm</span>):</span><br><span class="line">    name = StringField(<span class="string">&#x27;Name&#x27;</span>, validators=[DataRequired()])</span><br><span class="line">    submit = SubmitField(<span class="string">&#x27;Submit&#x27;</span>)</span><br></pre></td></tr></table></figure><p>In addition, a CSRF token hidden field is created automatically. You can render this in your template:</p><figure class="highlight jinja"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">action</span>=<span class="string">&quot;/&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-variable">&#123;&#123; form.csrf_token &#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-variable">&#123;&#123; form.name.label &#125;&#125;</span><span class="language-xml"> </span><span class="template-variable">&#123;&#123; form.name(size=20) &#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- &lt;input type=&quot;submit&quot; value=&quot;Go&quot;&gt; --&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-variable">&#123;&#123; form.submit &#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>If your form has multiple hidden fields, you can render them in one block using <code>hidden_tag()</code>.</p><figure class="highlight jinja"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">action</span>=<span class="string">&quot;/&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-variable">&#123;&#123; form.hidden_tag() &#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-variable">&#123;&#123; form.name.label &#125;&#125;</span><span class="language-xml"> </span><span class="template-variable">&#123;&#123; form.name(size=20) &#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Go&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="Validating-Forms"><a href="#Validating-Forms" class="headerlink" title="Validating Forms"></a>Validating Forms</h4><p>Validating the request in your view handlers:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/submit&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">submit</span>():</span><br><span class="line">    form = MyForm()</span><br><span class="line">    <span class="keyword">if</span> form.validate_on_submit():</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&#x27;/success&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;submit.html&#x27;</span>, form=form)</span><br></pre></td></tr></table></figure><p>Note that you don’t have to pass <code>request.form</code> to Flask-WTF; it will load automatically. And the convenient <code>validate_on_submit</code> will check if it is a POST request and if it is valid.</p><p>If your forms include validation, you’ll need to add to your template to display any error messages. Using the <code>form.name</code> field from the example above, that would look like this:</p><figure class="highlight jinja"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> form.name.errors %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;errors&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> error <span class="keyword">in</span> form.name.errors %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><span class="template-variable">&#123;&#123; error &#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">endfor</span></span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span></span><br></pre></td></tr></table></figure><h4 id="Validators"><a href="#Validators" class="headerlink" title="Validators"></a>Validators</h4><p>A <a href="https://wtforms.readthedocs.io/en/3.0.x/validators/#module-wtforms.validators">validator</a> simply takes an input, verifies it fulfills some criterion, such as a maximum length for a string and returns. Or, if the validation fails, raises a <code>ValidationError</code>.</p><h2 id="Bootstrap-Flask"><a href="#Bootstrap-Flask" class="headerlink" title="Bootstrap-Flask"></a>Bootstrap-Flask</h2><h3 id="Installation-1"><a href="#Installation-1" class="headerlink" title="Installation"></a>Installation</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install bootstrap-flask</span><br></pre></td></tr></table></figure><p>This project can’t work with Flask-Bootstrap in the same Python environment. You need to uninstall Flask-Bootstrap and then reinstall this project:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip uninstall flask-bootstrap bootstrap-flask</span><br><span class="line">pip install bootstrap-flask</span><br></pre></td></tr></table></figure><h3 id="Initialization"><a href="#Initialization" class="headerlink" title="Initialization"></a>Initialization</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_bootstrap <span class="keyword">import</span> Bootstrap4</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">bootstrap = Bootstrap4(app)</span><br></pre></td></tr></table></figure><p>If you want to use Bootstrap 5, import and instantiate the Bootstrap5 class instead.</p><h3 id="Resources-Helpers"><a href="#Resources-Helpers" class="headerlink" title="Resources Helpers"></a>Resources Helpers</h3><p>Bootstrap-Flask provides two helper functions to load Bootstrap resources in the template: <code>bootstrap.load_css()</code> and <code>bootstrap.load_js()</code>.</p><p>Call it in your base template, for example:</p><figure class="highlight jinja"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">....</span></span><br><span class="line"><span class="language-xml"></span><span class="template-variable">&#123;&#123; bootstrap.load_css() &#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">...</span></span><br><span class="line"><span class="language-xml"></span><span class="template-variable">&#123;&#123; bootstrap.load_js() &#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="Starter-template"><a href="#Starter-template" class="headerlink" title="Starter template"></a>Starter template</h3><p>For reasons of flexibility, Bootstrap-Flask doesn’t include built-in base templates (this may change in the future). For now, you have to create a base template yourself. Be sure to use an HTML5 doctype and include a viewport meta tag for proper responsive behaviors. Here’s an example base template:</p><figure class="highlight jinja"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        </span><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> head %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!-- Required meta tags --&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1, shrink-to-fit=no&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        </span><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> styles %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">            <span class="comment">&lt;!-- Bootstrap CSS --&gt;</span></span></span><br><span class="line"><span class="language-xml">            </span><span class="template-variable">&#123;&#123; bootstrap.load_css() &#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        </span><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">title</span>&gt;</span></span><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> title %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> %&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        </span><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!-- Your page content --&gt;</span></span></span><br><span class="line"><span class="language-xml">        </span><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> content %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        </span><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> scripts %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">            <span class="comment">&lt;!-- Optional JavaScript --&gt;</span></span></span><br><span class="line"><span class="language-xml">            </span><span class="template-variable">&#123;&#123; bootstrap.load_js() &#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        </span><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>Use this in your templates folder (suggested names are base.html or layout.html etc.), and inherit it in child templates.</p><h3 id="Macros"><a href="#Macros" class="headerlink" title="Macros"></a>Macros</h3><table><thead><tr><th>Macro</th><th>Templates Path</th><th>Description</th></tr></thead><tbody><tr><td>render_field()</td><td>bootstrap4&#x2F;form.html</td><td>Render a WTForms form field</td></tr><tr><td>render_form()</td><td>bootstrap4&#x2F;form.html</td><td>Render a WTForms form</td></tr><tr><td>render_form_row()</td><td>bootstrap4&#x2F;form.html</td><td>Render a row of a grid form</td></tr><tr><td>render_hidden_errors()</td><td>bootstrap4&#x2F;form.html</td><td>Render error messages for hidden form field</td></tr><tr><td>render_pager()</td><td>bootstrap4&#x2F;pagination.html</td><td>Render a basic Flask-SQLAlchemy pagniantion</td></tr><tr><td>render_pagination()</td><td>bootstrap4&#x2F;pagination.html</td><td>Render a standard Flask-SQLAlchemy pagination</td></tr><tr><td>render_nav_item()</td><td>bootstrap4&#x2F;nav.html</td><td>Render a navigation item</td></tr><tr><td>render_breadcrumb_item()</td><td>bootstrap4&#x2F;nav.html</td><td>Render a breadcrumb item</td></tr><tr><td>render_static()</td><td>bootstrap4&#x2F;utils.html</td><td>Render a resource reference code (i.e. <code>&lt;link&gt;</code>, <code>&lt;script&gt;</code>)</td></tr><tr><td>render_messages()</td><td>bootstrap4&#x2F;utils.html</td><td>Render flashed messages send by flash() function</td></tr><tr><td>render_icon()</td><td>bootstrap4&#x2F;utils.html</td><td>Render a Bootstrap icon</td></tr><tr><td>render_table()</td><td>bootstrap4&#x2F;table.html</td><td>Render a table with given data</td></tr></tbody></table><p>How to use these macros? It’s quite simple, just import them from the corresponding path and call them like any other macro:</p><figure class="highlight jinja"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name">from</span> &#x27;bootstrap4/form.html&#x27; import render_form %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-variable">&#123;&#123; render_form(form) &#125;&#125;</span></span><br></pre></td></tr></table></figure><p>Notice we import Bootstrap 4 macros from the path <code>bootstrap4/...</code>, if you are using Bootstrap 5, import them from the <code>bootstrap5/...</code> path instead.</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> web development </tag>
            
            <tag> flask </tag>
            
            <tag> backend </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day 60 of 100 Days of Code</title>
      <link href="/posts/Day-60-of-100-Days-of-Code/"/>
      <url>/posts/Day-60-of-100-Days-of-Code/</url>
      
        <content type="html"><![CDATA[<style>    #intro {        text-align: center;    }    #intro .title {        font-size: 1.5rem;        font-weight: 700;        color: rgb(31, 45, 61);    }    #intro .subtitle {        font-size: 1.2rem;        font-weight: 700;        color: rgb(31, 45, 61);    }</style><div id="intro">    <p class="title">Make POST Requests with Flask and HTML Forms</h2>    <p class="subtitle">Learning Log: Day 60 of 100 Days of Code</h3>    <p>GitHub Repo: <a href="https://github.com/Freedempire/100_days_of_code.git">100_days_of_code</a></p></div><h2 id="Flask"><a href="#Flask" class="headerlink" title="Flask"></a>Flask</h2><h3 id="HTTP-Methods"><a href="#HTTP-Methods" class="headerlink" title="HTTP Methods"></a>HTTP Methods</h3><p>Web applications use different HTTP methods when accessing URLs. By default, a route only answers to <code>GET</code> requests. You can use the methods argument of the <code>route()</code> decorator to handle different HTTP methods.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> do_the_login()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> show_the_login_form()</span><br></pre></td></tr></table></figure><p>The example above keeps all methods for the route within one function, which can be useful if each part uses some common data.</p><p>You can also separate views for different methods into different functions. Flask provides a shortcut for decorating such routes with <code>get()</code>, <code>post()</code>, etc. for each common HTTP method.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&#x27;/login&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login_get</span>():</span><br><span class="line">    <span class="keyword">return</span> show_the_login_form()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">&#x27;/login&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login_post</span>():</span><br><span class="line">    <span class="keyword">return</span> do_the_login()</span><br></pre></td></tr></table></figure><p>If <code>GET</code> is present, Flask automatically adds support for the <code>HEAD</code> method and handles <code>HEAD</code> requests according to the HTTP RFC. Likewise, <code>OPTIONS</code> is automatically implemented for you.</p><h3 id="The-Request-Object"><a href="#The-Request-Object" class="headerlink" title="The Request Object"></a>The Request Object</h3><p>First of all you have to import it from the <code>flask</code> module:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br></pre></td></tr></table></figure><p>The current request method is available by using the <code>method</code> attribute. To access form data (data transmitted in a <code>POST</code> or <code>PUT</code> request) you can use the <code>form</code> attribute.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    error = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> valid_login(request.form[<span class="string">&#x27;username&#x27;</span>],</span><br><span class="line">                       request.form[<span class="string">&#x27;password&#x27;</span>]):</span><br><span class="line">            <span class="keyword">return</span> log_the_user_in(request.form[<span class="string">&#x27;username&#x27;</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            error = <span class="string">&#x27;Invalid username/password&#x27;</span></span><br><span class="line">    <span class="comment"># the code below is executed if the request method</span></span><br><span class="line">    <span class="comment"># was GET or the credentials were invalid</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;login.html&#x27;</span>, error=error)</span><br></pre></td></tr></table></figure><p>What happens if the key does not exist in the <code>form</code> attribute? In that case a special <code>KeyError</code> is raised. You can catch it like a standard <code>KeyError</code> but if you don’t do that, a HTTP 400 Bad Request error page is shown instead. So for many situations you don’t have to deal with that problem.</p><p>To access parameters submitted in the URL (<code>?key=value</code>) you can use the args attribute:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">searchword = request.args.get(<span class="string">&#x27;key&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>We recommend accessing URL parameters with <code>get</code> or by catching the <code>KeyError</code> because users might change the URL and presenting them a 400 bad request page in that case is not user friendly.</p><p>For a full list of methods and attributes of the request object, head over to the <a href="https://flask.palletsprojects.com/en/2.3.x/api/#flask.Request">Request</a> documentation.</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> web development </tag>
            
            <tag> flask </tag>
            
            <tag> backend </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day 59 of 100 Days of Code</title>
      <link href="/posts/Day-59-of-100-Days-of-Code/"/>
      <url>/posts/Day-59-of-100-Days-of-Code/</url>
      
        <content type="html"><![CDATA[<style>    #intro {        text-align: center;    }    #intro .title {        font-size: 1.5rem;        font-weight: 700;        color: rgb(31, 45, 61);    }    #intro .subtitle {        font-size: 1.2rem;        font-weight: 700;        color: rgb(31, 45, 61);    }</style><div id="intro">    <p class="title">Blog Capstone Project Part 2 - Adding Styling</h2>    <p class="subtitle">Learning Log: Day 59 of 100 Days of Code</h3>    <p>GitHub Repo: <a href="https://github.com/Freedempire/100_days_of_code.git">100_days_of_code</a></p></div><h2 id="Screenshots"><a href="#Screenshots" class="headerlink" title="Screenshots"></a>Screenshots</h2><p><img src="https://i.ibb.co/WH3RpM8/bootstrap-blog1.jpg" alt="Screenshot 1"><br><img src="https://i.ibb.co/fX6wHvv/bootstrap-blog2.jpg" alt="Screenshot 2"><br><img src="https://i.ibb.co/q58Hs1b/bootstrap-blog3.jpg" alt="Screenshot 3"></p><h2 id="Flask"><a href="#Flask" class="headerlink" title="Flask"></a>Flask</h2><h3 id="Static-Files"><a href="#Static-Files" class="headerlink" title="Static Files"></a>Static Files</h3><p>To generate URLs for static files, use the special <code>&#39;static&#39;</code> endpoint name:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url_for(<span class="string">&#x27;static&#x27;</span>, filename=<span class="string">&#x27;style.css&#x27;</span>)</span><br></pre></td></tr></table></figure><p>The file has to be stored on the filesystem as <code>static/style.css</code>.</p><h2 id="Jinja"><a href="#Jinja" class="headerlink" title="Jinja"></a>Jinja</h2><h3 id="Template-Inheritance"><a href="#Template-Inheritance" class="headerlink" title="Template Inheritance"></a>Template Inheritance</h3><p>Template inheritance allows you to build a base “skeleton” template that contains all the common elements of your site and defines <em>blocks</em> that child templates can override.</p><h4 id="Base-Template"><a href="#Base-Template" class="headerlink" title="Base Template"></a>Base Template</h4><p>This template, which we’ll call <code>base.html</code>, defines a simple HTML skeleton document that you might use for a simple two-column page. It’s the job of “child” templates to fill the empty blocks with content:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    &#123;% block head %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>&#123;% block title %&#125;&#123;% endblock %&#125; - My Webpage<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    &#123;% endblock %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;content&quot;</span>&gt;</span>&#123;% block content %&#125;&#123;% endblock %&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;footer&quot;</span>&gt;</span></span><br><span class="line">        &#123;% block footer %&#125;</span><br><span class="line">        <span class="symbol">&amp;copy;</span> Copyright 2008 by <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://domain.invalid/&quot;</span>&gt;</span>you<span class="tag">&lt;/<span class="name">a</span>&gt;</span>.</span><br><span class="line">        &#123;% endblock %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>In this example, the <code>&#123;% block %&#125;</code> tags define four blocks that child templates can fill in. All the block tag does is tell the template engine that a child template may override those placeholders in the template.</p><p>block tags can be inside other blocks such as if, but they will <em>always</em> be executed regardless of if the if block is actually rendered.</p><h4 id="Child-Template"><a href="#Child-Template" class="headerlink" title="Child Template"></a>Child Template</h4><p>A child template might look like this:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &quot;base.html&quot; %&#125;</span><br><span class="line">&#123;% block title %&#125;Index&#123;% endblock %&#125;</span><br><span class="line">&#123;% block head %&#125;</span><br><span class="line">    &#123;&#123; super() &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.important</span> &#123; <span class="attribute">color</span>: <span class="number">#336699</span>; &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Index<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;important&quot;</span>&gt;</span></span><br><span class="line">      Welcome to my awesome homepage.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p>The <code>&#123;% extends %&#125;</code> tag is the key here. It tells the template engine that this template “extends” another template. When the template system evaluates this template, it first locates the parent. The extends tag should be the <em>first</em> tag in the template. Everything before it is printed out normally and may cause confusion. Also a block will always be filled in regardless of whether the surrounding condition is evaluated to be true or false.</p><p>The filename of the template depends on the template loader. For example, the <strong>FileSystemLoader</strong> allows you to access other templates by giving the filename. You can access templates in subdirectories with a slash:</p><figure class="highlight jinja"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">extends</span></span> &quot;layout/default.html&quot; %&#125;</span></span><br></pre></td></tr></table></figure><p>But this behavior can depend on the application embedding Jinja. Note that since the child template doesn’t define the footer block, the value from the parent template is used instead.</p><p>You can’t define multiple <code>&#123;% block %&#125;</code> tags with the same name in the same template. This limitation exists because a block tag works in “both” directions. That is, a block tag doesn’t just provide a placeholder to fill - it also defines the content that fills the placeholder in the parent. If there were two similarly-named <code>&#123;% block %&#125;</code> tags in a template, that template’s parent wouldn’t know which one of the blocks’ content to use.</p><p>If you want to print a block multiple times, you can, however, use the special <em>self</em> variable and call the block with that name:</p><figure class="highlight jinja"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span></span><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> title %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> %&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="template-variable">&#123;&#123; self.title() &#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> body %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> %&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> web development </tag>
            
            <tag> flask </tag>
            
            <tag> backend </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day 58 of 100 Days of Code</title>
      <link href="/posts/Day-58-of-100-Days-of-Code/"/>
      <url>/posts/Day-58-of-100-Days-of-Code/</url>
      
        <content type="html"><![CDATA[<style>    #intro {        text-align: center;    }    #intro .title {        font-size: 1.5rem;        font-weight: 700;        color: rgb(31, 45, 61);    }    #intro .subtitle {        font-size: 1.2rem;        font-weight: 700;        color: rgb(31, 45, 61);    }</style><div id="intro">    <p class="title">Web Foundation Bootstrap</h2>    <p class="subtitle">Learning Log: Day 58 of 100 Days of Code</h3>    <p>GitHub Repo: <a href="https://github.com/Freedempire/100_days_of_code.git">100_days_of_code</a></p></div><h2 id="CSS-framework"><a href="#CSS-framework" class="headerlink" title="CSS framework"></a>CSS framework</h2><p>A CSS framework comprises several CSS stylesheets ready for use by web developers and designers.</p><p>With a CSS framework, the user has a completed CSS stylesheet, and they only have to code the HTML with accurate classes, structure, and IDs to set up a web page. The framework already has classes built-in for common website elements – footer, slider, navigation bar, hamburger menu, column-based layouts, etc.</p><h3 id="Advantages-of-using-CSS-frameworks"><a href="#Advantages-of-using-CSS-frameworks" class="headerlink" title="Advantages of using CSS frameworks"></a>Advantages of using CSS frameworks</h3><ul><li>Developers and designers can use CSS frameworks to implement various advanced features and visual elements on a website – forms, different buttons, navbars, breadcrumbs, and even clean symmetrical layouts.</li><li>CSS frameworks make creating websites compatible with multiple browsers and browser versions simple.</li><li>Since these frameworks have ready-to-use stylesheets, using them allows faster and more convenient web development. Developers can quickly generate a user-friendly and visually appealing UI that can be modified throughout a project without starting from scratch.</li></ul><h3 id="Top-5-CSS-frameworks"><a href="#Top-5-CSS-frameworks" class="headerlink" title="Top 5 CSS frameworks"></a>Top 5 CSS frameworks</h3><ol><li>Bootstrap</li><li>Tailwind CSS</li><li>Foundation</li><li>Bulma</li><li>Skeleton</li></ol><h2 id="Bootstrap"><a href="#Bootstrap" class="headerlink" title="Bootstrap"></a>Bootstrap</h2><h3 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h3><h4 id="Download"><a href="#Download" class="headerlink" title="Download"></a>Download</h4><p><a href="https://github.com/twbs/bootstrap/releases/download/v5.3.0/bootstrap-5.3.0-dist.zip">Download</a> ready-to-use compiled code for Bootstrap v5.3.0 to easily drop into your project, which includes:</p><ul><li>Compiled and minified CSS bundles (see CSS files comparison)</li><li>Compiled and minified JavaScript plugins (see JS files comparison)</li></ul><h4 id="CDN-via-jsDelivr"><a href="#CDN-via-jsDelivr" class="headerlink" title="CDN via jsDelivr"></a>CDN via jsDelivr</h4><p>Skip the download with jsDelivr to deliver cached version of Bootstrap’s compiled CSS and JS to your project.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">integrity</span>=<span class="string">&quot;sha384-9ndCyUaIbzAi2FUVXJi0CjmCapSmO7SnpJef0486qhLnuZ2cdeRhO02iuK6FUUVM&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js&quot;</span> <span class="attr">integrity</span>=<span class="string">&quot;sha384-geWF76RCwLtnZ8qwWowPQNguL3RmwHVBC9FhGdlKrxdiJJigb/j/68SIy3Te4Bkz&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Package-managers"><a href="#Package-managers" class="headerlink" title="Package managers"></a>Package managers</h4><h5 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h5><p>Install Bootstrap in your Node.js powered apps with the npm package:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install bootstrap@5.3.0</span><br></pre></td></tr></table></figure><h5 id="yarn"><a href="#yarn" class="headerlink" title="yarn"></a>yarn</h5><p>Install Bootstrap in your Node.js powered apps with the yarn package:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add bootstrap@5.3.0</span><br></pre></td></tr></table></figure><h3 id="Quick-start"><a href="#Quick-start" class="headerlink" title="Quick start"></a>Quick start</h3><ol><li><p>Create a new index.html file in your project root. Include the <code>&lt;meta name=&quot;viewport&quot;&gt;</code> tag as well for proper responsive behavior in mobile devices.</p></li><li><p>Include Bootstrap’s CSS and JS. Place the <code>&lt;link&gt;</code> tag in the <code>&lt;head&gt;</code> for our CSS, and the <code>&lt;script&gt;</code> tag for our JavaScript bundle (including Popper for positioning dropdowns, poppers, and tooltips) before the closing <code>&lt;/body&gt;</code>.<br>You can also include Popper and our JS separately. If you don’t plan to use dropdowns, popovers, or tooltips, save some kilobytes by not including Popper.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js&quot;</span> <span class="attr">integrity</span>=<span class="string">&quot;sha384-I7E8VVD/ismYTF4hNIPjVp/Zjvgyol6VFvRkX/vR+Vc4jQkC+hVqc2pM8ODewa9r&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.min.js&quot;</span> <span class="attr">integrity</span>=<span class="string">&quot;sha384-fbbOQedDUMZZ5KreZpsbe1LCZPVmfTnH7ois6mU1QK+m14rQ1l2bGBq41eYeM/fS&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Now you can start building with Bootstrap by creating your own <a href="https://getbootstrap.com/docs/5.3/layout/grid/">layout</a>, adding dozens of <a href="https://getbootstrap.com/docs/5.3/components/buttons/">components</a>, and utilizing <a href="https://getbootstrap.com/docs/5.3/examples/">our official examples</a>.</p></li></ol><h3 id="Next-steps"><a href="#Next-steps" class="headerlink" title="Next steps"></a>Next steps</h3><ul><li>Some important <a href="https://getbootstrap.com/docs/5.3/getting-started/introduction/#important-globals">global environment settings</a> that Bootstrap utilizes.</li><li>What’s included in Bootstrap in our <a href="https://getbootstrap.com/docs/5.3/getting-started/contents/">contents section</a> and the list of <a href="https://getbootstrap.com/docs/5.3/getting-started/introduction/#js-components">components that require JavaScript</a>.</li><li>Consider building with Bootstrap by <a href="https://getbootstrap.com/docs/5.3/getting-started/download/#package-managers">including the source files via package manager</a>.</li><li>To use Bootstrap as a module with <code>&lt;script type=&quot;module&quot;&gt;</code>, refer to our <a href="https://getbootstrap.com/docs/5.3/getting-started/javascript/#using-bootstrap-as-a-module">using Bootstrap as a module</a> section.</li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> web development </tag>
            
            <tag> flask </tag>
            
            <tag> backend </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day 57 of 100 Days of Code</title>
      <link href="/posts/Day-57-of-100-Days-of-Code/"/>
      <url>/posts/Day-57-of-100-Days-of-Code/</url>
      
        <content type="html"><![CDATA[<style>    #intro {        text-align: center;    }    #intro .title {        font-size: 1.5rem;        font-weight: 700;        color: rgb(31, 45, 61);    }    #intro .subtitle {        font-size: 1.2rem;        font-weight: 700;        color: rgb(31, 45, 61);    }</style><div id="intro">    <p class="title">Templating with Jinja in Flask Applications</h2>    <p class="subtitle">Learning Log: Day 57 of 100 Days of Code</h3>    <p>GitHub Repo: <a href="https://github.com/Freedempire/100_days_of_code.git">100_days_of_code</a></p></div><h2 id="Jinja"><a href="#Jinja" class="headerlink" title="Jinja"></a>Jinja</h2><p>A Jinja template is simply a text file. Jinja can generate any text-based format (HTML, XML, CSV, LaTeX, etc.). A Jinja template <em>doesn’t</em> need to have a specific extension: <code>.html</code>, <code>.xml</code>, or any other extension is just fine.</p><p>A template contains <strong>variables</strong> and&#x2F;or <strong>expressions</strong>, which get replaced with values when a template is <em>rendered</em>; and <strong>tags</strong>, which control the logic of the template. The template syntax is heavily inspired by Django and Python.</p><h3 id="A-minimal-example"><a href="#A-minimal-example" class="headerlink" title="A minimal example"></a>A minimal example</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>My Webpage<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;navigation&quot;</span>&gt;</span></span><br><span class="line">    &#123;% for item in navigation %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; item.href &#125;&#125;&quot;</span>&gt;</span>&#123;&#123; item.caption &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>My Webpage<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    &#123;&#123; a_variable &#125;&#125;</span><br><span class="line"></span><br><span class="line">    &#123;# a comment #&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>The example shows the default configuration settings. An application developer can change the syntax configuration from <code>&#123;% foo %&#125;</code> to <code>&lt;% foo %&gt;</code>, or something similar.</p><h3 id="Default-Jinja-delimiters"><a href="#Default-Jinja-delimiters" class="headerlink" title="Default Jinja delimiters"></a>Default Jinja delimiters</h3><ul><li><code>&#123;% ... %&#125;</code> for Statements</li><li><code>&#123;&#123; ... &#125;&#125;</code> for Expressions to print to the template output</li><li>&#96;&#96; for Comments not included in the template output</li></ul><h3 id="Variables"><a href="#Variables" class="headerlink" title="Variables"></a>Variables</h3><p>Template variables are defined by the context dictionary passed to the template.</p><p>You can use a dot (<code>.</code>) to access attributes of a variable in addition to the standard Python <code>__getitem__</code> “subscript” syntax (<code>[]</code>).</p><p>The following lines do the same thing:</p><figure class="highlight jinja"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-variable">&#123;&#123; foo.bar &#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-variable">&#123;&#123; foo[&#x27;bar&#x27;] &#125;&#125;</span></span><br></pre></td></tr></table></figure><p>If a variable or attribute does not exist, you will get back an <em>undefined</em> value. What you can do with that kind of value depends on the application configuration: the default behavior is to evaluate to an empty string if printed or iterated over, and to fail for every other operation.</p><h3 id="Filters"><a href="#Filters" class="headerlink" title="Filters"></a>Filters</h3><p>Variables can be modified by filters. Filters are separated from the variable by a pipe symbol (<code>|</code>) and may have optional arguments in parentheses. Multiple filters can be chained. The output of one filter is applied to the next.</p><p>For example, <code>&#123;&#123; name|striptags|title &#125;&#125;</code> will remove all HTML Tags from variable name and title-case the output (<code>title(striptags(name))</code>).</p><p>The <a href="https://jinja.palletsprojects.com/en/3.0.x/templates/#builtin-filters">List of Builtin Filters</a> describes all the builtin filters.</p><h3 id="Escaping"><a href="#Escaping" class="headerlink" title="Escaping"></a>Escaping</h3><p>It is sometimes necessary to have Jinja ignore parts it would otherwise handle as variables or blocks.</p><p>The easiest way to output a literal variable delimiter is by using a variable expression <code>&#123;&#123; '&#123;&#123;' &#125;&#125;</code>.</p><p>For bigger sections, it makes sense to mark a block raw.</p><figure class="highlight jinja"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name">raw</span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> item <span class="keyword">in</span> seq %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><span class="template-variable">&#123;&#123; item &#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">endfor</span></span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">endraw</span> %&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> web development </tag>
            
            <tag> flask </tag>
            
            <tag> backend </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day 56 of 100 Days of Code</title>
      <link href="/posts/Day-56-of-100-Days-of-Code/"/>
      <url>/posts/Day-56-of-100-Days-of-Code/</url>
      
        <content type="html"><![CDATA[<style>    #intro {        text-align: center;    }    #intro .title {        font-size: 1.5rem;        font-weight: 700;        color: rgb(31, 45, 61);    }    #intro .subtitle {        font-size: 1.2rem;        font-weight: 700;        color: rgb(31, 45, 61);    }</style><div id="intro">    <p class="title">Rendering HTML/Static files and Using Website Templates</h2>    <p class="subtitle">Learning Log: Day 56 of 100 Days of Code</h3>    <p>GitHub Repo: <a href="https://github.com/Freedempire/100_days_of_code.git">100_days_of_code</a></p></div><h2 id="Flask"><a href="#Flask" class="headerlink" title="Flask"></a>Flask</h2><h3 id="Static-Files"><a href="#Static-Files" class="headerlink" title="Static Files"></a>Static Files</h3><p>Dynamic web applications also need static files. That’s usually where the CSS and JavaScript files are coming from. Just create a folder called <code>static</code> in your package or next to your module and it will be available at <code>/static</code> on the application.</p><p>To generate URLs for static files, use the special <code>&#39;static&#39;</code> endpoint name:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url_for(<span class="string">&#x27;static&#x27;</span>, filename=<span class="string">&#x27;style.css&#x27;</span>)</span><br></pre></td></tr></table></figure><p>The file has to be stored on the filesystem as <code>static/style.css</code>.</p><h3 id="Rendering-Templates"><a href="#Rendering-Templates" class="headerlink" title="Rendering Templates"></a>Rendering Templates</h3><p>Generating HTML from within Python is not fun, and actually pretty cumbersome because you have to do the HTML escaping on your own to keep the application secure. Because of that Flask configures the Jinja2 template engine for you automatically.</p><p>Templates can be used to generate any type of text file. For web applications, you’ll primarily be generating HTML pages, but you can also generate markdown, plain text for emails, and anything else.</p><p>To render a template you can use the <code>render_template()</code> method. All you have to do is provide the name of the template and the variables you want to pass to the template engine as <em>keyword arguments</em>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> render_template</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/hello/&#x27;</span></span>)</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/hello/&lt;name&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>(<span class="params">name=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;hello.html&#x27;</span>, name=name)</span><br></pre></td></tr></table></figure><p>Flask will look for templates in the templates folder. So if your application is a module, this folder is next to that module, if it’s a package it’s actually inside your package.</p><p>For templates you can use the full power of Jinja2 templates. Head over to the official <a href="https://jinja.palletsprojects.com/templates/">Jinja2 Template Documentation</a> for more information.</p><p>Here is an example template:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello from Flask<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">&#123;% if name %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello &#123;&#123; name &#125;&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, World!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>Inside templates you also have access to the config, request, session and g objects as well as the <code>url_for()</code> and <code>get_flashed_messages()</code> functions.</p><p>Templates are especially useful if inheritance is used. If you want to know how that works, see <a href="https://flask.palletsprojects.com/en/2.3.x/patterns/templateinheritance/">Template Inheritance</a>. Basically template inheritance makes it possible to keep certain elements on each page (like header, navigation and footer).</p><p>Automatic escaping is enabled, so if name contains HTML it will be escaped automatically. If you can trust a variable and you know that it will be safe HTML (for example because it came from a module that converts wiki markup to HTML) you can mark it as safe by using the Markup class or by using the <code>|safe</code> filter in the template.</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> web development </tag>
            
            <tag> flask </tag>
            
            <tag> backend </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day 55 of 100 Days of Code</title>
      <link href="/posts/Day-55-of-100-Days-of-Code/"/>
      <url>/posts/Day-55-of-100-Days-of-Code/</url>
      
        <content type="html"><![CDATA[<style>    #intro {        text-align: center;    }    #intro .title {        font-size: 1.5rem;        font-weight: 700;        color: rgb(31, 45, 61);    }    #intro .subtitle {        font-size: 1.2rem;        font-weight: 700;        color: rgb(31, 45, 61);    }</style><div id="intro">    <p class="title">HTML & URL Parsing in Flask</h2>    <p class="subtitle">Learning Log: Day 55 of 100 Days of Code</h3>    <p>GitHub Repo: <a href="https://github.com/Freedempire/100_days_of_code.git">100_days_of_code</a></p></div><h2 id="Flask"><a href="#Flask" class="headerlink" title="Flask"></a>Flask</h2><h3 id="A-minimal-application"><a href="#A-minimal-application" class="headerlink" title="A minimal application"></a>A minimal application</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">home</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Index&#x27;</span></span><br><span class="line"></span><br><span class="line">app.run()</span><br></pre></td></tr></table></figure><p>To run the application in CLI, use the <code>flask</code> command or <code>python -m flask</code>. You need to tell the Flask where your application is with the –app option.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flask --app hello run</span><br></pre></td></tr></table></figure><p>As a shortcut, if the file is named <code>app.py</code> or <code>wsgi.py</code>, you don’t have to use <code>--app</code>.</p><h3 id="Externally-visible-server"><a href="#Externally-visible-server" class="headerlink" title="Externally visible server"></a>Externally visible server</h3><p>If you have the debugger disabled or trust the users on your network, you can make the server publicly available simply by adding <code>--host=0.0.0.0</code> to the command line:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flask run --host=0.0.0.0</span><br></pre></td></tr></table></figure><p>This tells your operating system to listen on all public IPs.</p><h3 id="Debug-mode"><a href="#Debug-mode" class="headerlink" title="Debug mode"></a>Debug mode</h3><p>To enable debug mode, use the <code>--debug</code> option.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flask --app hello run --debug</span><br></pre></td></tr></table></figure><h3 id="HTML-escaping"><a href="#HTML-escaping" class="headerlink" title="HTML escaping"></a>HTML escaping</h3><p>When returning HTML (the default response type in Flask), any user-provided values rendered in the output must be <em>escaped</em> to protect from injection attacks. HTML templates rendered with <strong>Jinja</strong> will do this automatically.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> markupsafe <span class="keyword">import</span> escape</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&lt;name&gt;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;Hello, <span class="subst">&#123;escape(name)&#125;</span>!&quot;</span></span><br></pre></td></tr></table></figure><h3 id="Routing"><a href="#Routing" class="headerlink" title="Routing"></a>Routing</h3><p>Use the <code>route()</code> decorator to bind a function to a URL.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Index Page&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/hello&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello, World&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="Variable-rules"><a href="#Variable-rules" class="headerlink" title="Variable rules"></a>Variable rules</h3><p>You can add variable sections to a URL by marking sections with <code>&lt;variable_name&gt;</code>. Your function then receives the <code>&lt;variable_name&gt;</code> as a <em>keyword argument</em>. Optionally, you can use a converter to specify the type of the argument like <code>&lt;converter:variable_name&gt;</code>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> markupsafe <span class="keyword">import</span> escape</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/user/&lt;username&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_user_profile</span>(<span class="params">username</span>):</span><br><span class="line">    <span class="comment"># show the user profile for that user</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&#x27;User <span class="subst">&#123;escape(username)&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/post/&lt;int:post_id&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_post</span>(<span class="params">post_id</span>):</span><br><span class="line">    <span class="comment"># show the post with the given id, the id is an integer</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&#x27;Post <span class="subst">&#123;post_id&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/path/&lt;path:subpath&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_subpath</span>(<span class="params">subpath</span>):</span><br><span class="line">    <span class="comment"># show the subpath after /path/</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&#x27;Subpath <span class="subst">&#123;escape(subpath)&#125;</span>&#x27;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>Converter type</th><th>Explanation</th></tr></thead><tbody><tr><td>string</td><td>(default) accepts any text without a slash</td></tr><tr><td>int</td><td>accepts positive integers</td></tr><tr><td>float</td><td>accepts positive floating point values</td></tr><tr><td>path</td><td>like string but also accepts slashes</td></tr><tr><td>uuid</td><td>accepts UUID strings</td></tr></tbody></table><h2 id="Decorators-in-Python"><a href="#Decorators-in-Python" class="headerlink" title="Decorators in Python"></a>Decorators in Python</h2><p>Decorators allow programmers to modify the behavior of a function or class without permanently modifying it.</p><h3 id="First-class-objects"><a href="#First-class-objects" class="headerlink" title="First class objects"></a>First class objects</h3><p>In Python, functions are first class objects.</p><p>Properties of first class functions:</p><ul><li>A function is an instance of the Object type.</li><li>You can store the function in a variable.</li><li>You can pass the function as a parameter to another function.</li><li>You can return the function from a function.</li><li>You can store them in data structures such as hash tables, lists, etc.</li></ul><h3 id="Decorators"><a href="#Decorators" class="headerlink" title="Decorators"></a>Decorators</h3><p>In Decorators, functions are taken as the argument into another function and then called inside the wrapper function.</p><p>Syntax for Decorator:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@gfg_decorator</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_decorator</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Gfg&quot;</span>)</span><br></pre></td></tr></table></figure><p>Above code is equivalent to:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hello_decorator</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Gfg&quot;</span>)</span><br><span class="line">    </span><br><span class="line">hello_decorator = gfg_decorator(hello_decorator)</span><br></pre></td></tr></table></figure><h3 id="Decorate-a-function-with-arguments"><a href="#Decorate-a-function-with-arguments" class="headerlink" title="Decorate a function with arguments"></a>Decorate a function with arguments</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hello_decorator</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner1</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;before Execution&quot;</span>)</span><br><span class="line">        <span class="comment"># getting the returned value</span></span><br><span class="line">        returned_value = func(*args, **kwargs)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;after Execution&quot;</span>)</span><br><span class="line">        <span class="comment"># returning the value to the original frame</span></span><br><span class="line">        <span class="keyword">return</span> returned_value</span><br><span class="line">    <span class="keyword">return</span> inner1</span><br><span class="line"></span><br><span class="line"><span class="comment"># adding decorator to the function</span></span><br><span class="line"><span class="meta">@hello_decorator</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sum_two_numbers</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Inside the function&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br></pre></td></tr></table></figure><h3 id="Chaining-Decorators"><a href="#Chaining-Decorators" class="headerlink" title="Chaining Decorators"></a>Chaining Decorators</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">decor1</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">        x = func()</span><br><span class="line">        <span class="keyword">return</span> x * x</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decor2</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">        x = func()</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * x</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"> </span><br><span class="line"><span class="meta">@decor1</span></span><br><span class="line"><span class="meta">@decor2</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">num1</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="number">10</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">@decor2</span></span><br><span class="line"><span class="meta">@decor1</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">num2</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="number">10</span></span><br><span class="line">   </span><br><span class="line"><span class="built_in">print</span>(num1()) <span class="comment"># 400</span></span><br><span class="line"><span class="built_in">print</span>(num2()) <span class="comment"># 200</span></span><br></pre></td></tr></table></figure><p>The above example is similar to calling the function as:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">decor1(decor2(num1))</span><br><span class="line">decor2(decor1(num2))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> web development </tag>
            
            <tag> flask </tag>
            
            <tag> backend </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day 54 of 100 Days of Code</title>
      <link href="/posts/Day-54-of-100-Days-of-Code/"/>
      <url>/posts/Day-54-of-100-Days-of-Code/</url>
      
        <content type="html"><![CDATA[<style>    #intro {        text-align: center;    }    #intro .title {        font-size: 1.5rem;        font-weight: 700;        color: rgb(31, 45, 61);    }    #intro .subtitle {        font-size: 1.2rem;        font-weight: 700;        color: rgb(31, 45, 61);    }</style><div id="intro">    <p class="title">Web Development with Flask</h2>    <p class="subtitle">Learning Log: Day 54 of 100 Days of Code</h3>    <p>GitHub Repo: <a href="https://github.com/Freedempire/100_days_of_code.git">100_days_of_code</a></p></div><h2 id="Understanding-backend-web-development"><a href="#Understanding-backend-web-development" class="headerlink" title="Understanding backend web development"></a>Understanding backend web development</h2><p>Full Stack &#x3D; Front End + Back End</p><h3 id="Front-end"><a href="#Front-end" class="headerlink" title="Front end"></a>Front end</h3><ul><li>HTML: gives website structure</li><li>CSS: gives style</li><li>JavaScript: allows to have interactivity</li><li>Frameworks: Angular, React</li></ul><h3 id="Back-end"><a href="#Back-end" class="headerlink" title="Back end"></a>Back end</h3><ul><li>Can be created by different languages, e.g. Java, JavsScript, Python, Ruby, etc.</li><li>Three components: client, server, database</li><li>Frameworks: Node.js, Flask, Django</li></ul><h2 id="Key-difference-between-library-and-framework"><a href="#Key-difference-between-library-and-framework" class="headerlink" title="Key difference between library and framework"></a>Key difference between library and framework</h2><p>The <strong>Inversion of Control</strong> (IoC) describes the difference between a library and a framework.</p><p>By using a library, you control the flow of the program. The library can be invoked whenever and wherever you like. Contrary to this, when you use a framework, the flow is controlled by the framework. The framework instructs you where to put your code, but it will call your code as required. Simply put, our code calls the library’s code, but in a framework, it’s the framework’s code that calls our code as shown in the below diagram.</p><p>Developers can invoke libraries to perform specific tasks by using components, classes, and methods. A framework, however, already provides code to perform common tasks and uses code provided by a developer for custom functionality.</p><h2 id="Creating-new-empty-files-at-CML"><a href="#Creating-new-empty-files-at-CML" class="headerlink" title="Creating new empty files at CML"></a>Creating new empty files at CML</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> . &gt; filename</span><br></pre></td></tr></table></figure><h2 id="Python-decorator"><a href="#Python-decorator" class="headerlink" title="Python decorator"></a>Python decorator</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">decorator_function</span>(<span class="params">function</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper_function</span>():</span><br><span class="line">        <span class="comment"># additional functionality</span></span><br><span class="line">        function()</span><br><span class="line">        <span class="comment"># additional functionality</span></span><br><span class="line">    <span class="keyword">return</span> wrapper_function</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> web development </tag>
            
            <tag> flask </tag>
            
            <tag> backend </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《天道》詩賞析</title>
      <link href="/posts/%E3%80%8A%E5%A4%A9%E9%81%93%E3%80%8B%E8%A9%A9%E8%B3%9E%E6%9E%90/"/>
      <url>/posts/%E3%80%8A%E5%A4%A9%E9%81%93%E3%80%8B%E8%A9%A9%E8%B3%9E%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<style>    #intro {        font-family: Noto Serif TC;        text-align: center;        font-size: 1.3em;    }    #intro h2 {        margin-bottom: 0;    }    #intro .small.gray {        font-size: 1rem;        color: gray;    }    #article-container {        font-family: Noto Serif TC;        font-size: 1.3em;    }</style><div id="intro">    <h2>天道</h2>    <p>        <span class="small gray">五代 · 馮道</span><br>        <span class="small gray">五言律詩</span><br>        <span>窮達皆由命，何勞發嘆聲。</span><br>        <span>但知行好事，莫要問前程。</span><br>        <span>冬去冰須泮，春來草自生。</span><br>        <span>請君觀此理，天道甚分明。</span><br>    </p></div><h2 id="作者簡介"><a href="#作者簡介" class="headerlink" title="作者簡介"></a>作者簡介</h2><p>生卒：公元882—954年<br>介紹：五代時瀛州景城（今河北河間東）人，字可道，自號長樂老。唐末為劉守光幽州掾。後唐莊宗同光元年（923年）為翰林學士，遷中書舍人、戶部侍郎。明宗天成元年（926年），拜端明殿學士，遷中書侍郎、刑部尚書平章事，改門下侍郎，戶部、吏部尚書，集賢殿弘文館大學士，加尚書左仆射。末帝立，出為同州節度使，入為司空。後晉時，守司空同中書門下平章事。少帝時，進封燕國公。後又歷仕契丹、後漢、後周。廣順初，拜太師兼中書令。顯德元年（954年）卒。追封瀛王，謚文懿。道歷事四朝，在相位20余年，生平見新、舊《五代史》本傳。道好學能文，暇時唯以披誦吟諷為事。《舊五代史》謂其文「典麗之外，義含古道」。吳處厚稱其「詩雖淺近而多諳理」（《青箱雜記》卷七）。《宋史·藝文誌七》著錄《馮道集》6卷、《河間集》5卷、《詩集》10卷，今皆佚。《全唐詩》存詩5首及斷句若干，《全唐詩外編》及《全唐詩續拾》補詩2首、斷句1。</p><h2 id="賞析"><a href="#賞析" class="headerlink" title="賞析"></a>賞析</h2><p>馮道歷事五朝（後唐、後晉、契丹（滅後晉後定國號「大遼」）、後漢及後周）、八姓（後唐李存勗（本姓朱邪）、李嗣源（本姓不詳）及其養子李從珂（本姓王）、後晉石氏、遼國耶律氏、後漢劉氏、後周郭威及其養子柴榮）、十一帝（後唐四代（莊宗李存勗、明宗嗣源、閔帝從厚及末帝從珂）、後晉兩代（高祖石敬瑭及出帝重貴）、遼一代（太宗耶律德光）、後漢兩代（高祖劉知遠及隱帝承祐）、後周兩代（太祖郭威及世宗柴榮）），「累朝不離將相、三公、三師之位」，前後為官四十多年，堪稱中國官場史上的不倒翁。贊其如薛居正者，說他事親濟民、提攜賢良，是「以持重鎮俗為己任」之垂範；謗其如歐陽修者，則認為他賣主求榮、反復無常，是一個「不知廉恥」的典型。忠臣也好，奸佞也罷，如仲尼之賢，尚有叔孫武叔之毀，更何況是馮道呢？</p><p>馮道能在這興亡接踵之世，不僅歷仕五朝、長居相位，而且在事親、濟民、主政、提攜賢良上的表現，也都符合傳統中君子、聖賢的行為標準，更是與其同時代的人心目中的模範。他的人生之「道」是什麼？也許，我們可以在這首《天道》中，窺知一二。</p><p>詩歌的寫作背景已無可考證，以議論入詩，語言淺近質樸，明白如話，卻含蘊頗深。</p><p>作者說，人生的窮困或是顯達皆由上天註定，不必滿身怨悱牢騷、長吁短嘆。那又應該怎樣做呢？頷聯便給予了回答：只要（自己）行端履正，所作所為於國有益、與民有利，個人的得失榮辱又何須計較呢？</p><p>頸聯又做了一個極其形象的類比，正如冬去春來，冰消草生，日月輪轉，萬物更新，以此觀之，天道自明。</p><p>寥寥數語就將抽象的自然之道、人生之理闡述得由淺入深而又發人深省，既有儒家循禮守節的風度，也不乏道家的不爭無為的心境。「但知行好事，莫要問前程。」也就此成了人們安本分、守本心、以不變應萬變的至理名言。</p><p>事實上，作者是這樣說的，也是這樣做的。</p><p>馮道出身耕讀，品性淳厚，少有才名，勤奮好學，即使大雪擁戶、塵垢滿身，依然安貧樂道。初登仕途，為燕王劉守光的參軍，他身先士卒，與士兵同甘共苦——「居一茅庵，與從人同器而食，臥則芻槁一束，其心晏如也」。哪怕是後來出將入相、位居翰林，適逢饑饉，他也能傾盡所有，開倉濟民，甚至幫助老弱，深夜負薪耕田，「不以為德」。若不是朝堂之上他執筆踟躕、正言直諫，恐怕大將郭崇韜早已身首異處，哪來的後唐盛景呢？</p><p>「莫為危時便愴神，前程往往有期因。須知海嶽歸明主，未必乾坤陷吉人。道德幾時曾去世，舟車何處不通津？但教方寸無諸惡，狼虎叢中也立身。」在他的另一首詩《偶作》中，我們可以看到與本詩幾乎相同的人生態度，馮道的個人品德、為政操守之高尚是毋庸置疑的。</p><p>在那個虎狼環伺、動蕩不安的歲月裏，士大夫們大多循規蹈矩，固守著「不求兼濟，但求獨善」的禮法原則，選擇屈就一隅、隱逸山野，用最溫和的抗爭方式，保持著人格的潔凈與獨立，雖然明哲保身，卻也無功於世。可馮道呢，他沒有置身事外，而是積極入世，救民水火，以自己的恪盡職守，去彌合戰爭帶給萬千百姓的創傷。無可否認，馮道轉事多主，稱臣胡夷（契丹），於兩宋和後世看來，確無氣節可言。但後人若以太平盛世時的道德標准，去審視一個連混世保身都要用盡全力的時代，是不是有失公允呢？</p><p>他沒有忠於一朝一君，卻忠於了蒼生黎民，恪守了自己心中的道——心存善念，順勢而為，但行好事，不問前程。和那些明哲保身、空老林泉的「君子」相較，誰才是真正的小人呢？正像馮道在《自敘》中所寫：「所願者，下不欺於地，中不欺於人，上不欺於天」——請君觀此理，天道甚分明。</p>]]></content>
      
      
      <categories>
          
          <category> literature </category>
          
      </categories>
      
      
        <tags>
            
            <tag> poem </tag>
            
            <tag> classics </tag>
            
            <tag> literature </tag>
            
            <tag> 馮道 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>A Simple Blackjack Program</title>
      <link href="/posts/A-Simple-Blackjack-Program/"/>
      <url>/posts/A-Simple-Blackjack-Program/</url>
      
        <content type="html"><![CDATA[<style>    #intro {        text-align: center;    }    #intro .title {        font-size: 1.5rem;        font-weight: 700;        color: rgb(31, 45, 61);    }    #intro .subtitle {        font-size: 1.2rem;        font-weight: 700;        color: rgb(31, 45, 61);    }</style><div id="intro">    <p class="title">Simple Blackjack</h2>    <p class="subtitle">A CLI single-player blackjack program</h3>    <p>GitHub Repo: <a href="https://github.com/Freedempire/simple_blackjack">simple_blackjack</a></p></div><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> _     _            _    _            _</span><br><span class="line">| |   | |          | |  (_)          | |      ___   ___ </span><br><span class="line">| |__ | | __ _  ___| | ___  __ _  ___| | __  |A  | |K  |</span><br><span class="line">| &#x27;_ \| |/ _` |/ __| |/ / |/ _` |/ __| |/ /  | ♠ | | ♦ |</span><br><span class="line">| |_) | | (_| | (__|   &lt;| | (_| | (__|   &lt;   |__A| |__K|</span><br><span class="line">|_.__/|_|\__,_|\___|_|\_\ |\__,_|\___|_|\_\</span><br><span class="line">                       _/ |</span><br><span class="line">                      |__/</span><br></pre></td></tr></table></figure><h2 id="Screenshots"><a href="#Screenshots" class="headerlink" title="Screenshots"></a>Screenshots</h2><p><img src="https://i.ibb.co/7KR58JV/simple-blackjack-1.png" alt="screenshot 1"><br><img src="https://i.ibb.co/4sKtmSp/simple-blackjack-2.png" alt="screenshot 2"><br><img src="https://i.ibb.co/thbDkJ5/simple-blackjack-3.png" alt="screenshot 3"><br><img src="https://i.ibb.co/Jd3WxB4/simple-blackjack-4.png" alt="screenshot 4"><br><img src="https://i.ibb.co/TTZF35k/simple-blackjack-5.png" alt="screenshot 5"></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> blackjack </tag>
            
            <tag> cli </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kiama Beach</title>
      <link href="/posts/Kiama-Beach/"/>
      <url>/posts/Kiama-Beach/</url>
      
        <content type="html"><![CDATA[<div class="gallery">    <div class="fj-gallery lazyload data" data-rowHeight="220" data-limit="5">    <span class="gallery-data">[{"url":"https://i.ibb.co/1MD2kWR/PXL-20230611-014928037.jpg","alt":""},{"url":"https://i.ibb.co/SsCH16S/PXL-20230611-011358421.jpg","alt":""},{"url":"https://i.ibb.co/g6TwnQF/PXL-20230611-011409738.jpg","alt":""},{"url":"https://i.ibb.co/Bj3j8LK/PXL-20230611-011839234-MP.jpg","alt":""},{"url":"https://i.ibb.co/M6LGDbf/PXL-20230611-011843134-MP.jpg","alt":""},{"url":"https://i.ibb.co/XLr86ZK/PXL-20230611-011915355.jpg","alt":""},{"url":"https://i.ibb.co/tqv62ds/PXL-20230611-012813274.jpg","alt":""},{"url":"https://i.ibb.co/HTFfT5r/PXL-20230611-012929199-MP.jpg","alt":""},{"url":"https://i.ibb.co/2ddgj2N/PXL-20230611-013056918-MP.jpg","alt":""},{"url":"https://i.ibb.co/Tv0DptM/PXL-20230611-013100268-MP.jpg","alt":""},{"url":"https://i.ibb.co/n1c26Cg/PXL-20230611-013505523.jpg","alt":""},{"url":"https://i.ibb.co/tz04sGk/PXL-20230611-013844745.jpg","alt":""},{"url":"https://i.ibb.co/XbFqnGt/PXL-20230611-014048250-MP.jpg","alt":""},{"url":"https://i.ibb.co/zPpWhYf/PXL-20230611-014143996-MP.jpg","alt":""},{"url":"https://i.ibb.co/T2wtw71/PXL-20230611-014717282-MP.jpg","alt":""}]</span>    </div>    <button class="gallery-load-more"><span>Load More</span><i class="fa-solid fa-arrow-down"></i></button>    </div>]]></content>
      
      
      <categories>
          
          <category> gallery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gallery </tag>
            
            <tag> beach </tag>
            
            <tag> kiama </tag>
            
            <tag> scenery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Build Your Own Password Manager with Python</title>
      <link href="/posts/Build-Your-Own-Password-Manager-with-Python/"/>
      <url>/posts/Build-Your-Own-Password-Manager-with-Python/</url>
      
        <content type="html"><![CDATA[<style>    #intro {        text-align: center;    }    #intro .title {        font-size: 1.5rem;        font-weight: 700;        color: rgb(31, 45, 61);    }    #intro .subtitle {        font-size: 1.2rem;        font-weight: 700;        color: rgb(31, 45, 61);    }</style><div id="intro">    <img src="https://i.ibb.co/qyjfYBf/cyber-crime.png" width="40%" height="40%" alt="logo" />    <p class="title">Password Manager</h2>    <p class="subtitle">A simple desktop password management tool</h3>    <p>GitHub Repo: <a href="https://github.com/Freedempire/PasswordManager">PasswordManager</a></p></div><p>The <strong>Password Manager</strong> is a simple <em>windows</em> desktop application that allows users to manage their passwords securely and easily. It uses <a href="https://en.wikipedia.org/wiki/Scrypt">scrypt</a> password-based key derivation function from standard package <a href="https://docs.python.org/3/library/hashlib.html">hashlib</a> for hashing the master password for each user of the app, and stores the hash value in a database. The password records to be managed are encrypted with unique salt using <a href="https://cryptography.io/en/latest/fernet/">Fernet</a> from <a href="https://pypi.org/project/cryptography/">cryptography</a> package.</p><h2 id="Screenshots"><a href="#Screenshots" class="headerlink" title="Screenshots"></a>Screenshots</h2><h3 id="Login-x2F-Signup-Frame"><a href="#Login-x2F-Signup-Frame" class="headerlink" title="Login &#x2F; Signup Frame"></a>Login &#x2F; Signup Frame</h3><p><img src="https://i.ibb.co/YLXjvcQ/screenshot-login.png" alt="login"></p><h3 id="Password-Entries-Frame"><a href="#Password-Entries-Frame" class="headerlink" title="Password Entries Frame"></a>Password Entries Frame</h3><p><img src="https://i.ibb.co/hVKDhNY/screenshot-passwords.png" alt="passwords"></p><h2 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h2><ul><li><strong>Multiple</strong> users can use the app, each with their own password and unique salt.</li><li>Master password is hashed using <strong>scrypt</strong> and stored in database.</li><li>Password records are encrypted with unique salt using <code>Fernet</code> from <code>cryptography</code> package.</li><li>Records can be easily <strong>searched</strong> and <strong>manipulated</strong>.</li><li>App can generate <strong>random</strong> passwords triggered by typing ‘[random]’ in the password input box.</li></ul><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><ol><li>Clone the repository to your local machine using <code>git clone https://github.com/Freedempire/PasswordManager.git</code></li><li>Install the required dependencies using <code>pip install -r requirements.txt</code></li><li>Run the app using <code>python pmapp.py</code></li></ol><h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><ol><li>Create a new user account by entering a new username and password then clicking on the “Sign Up” button and finish the password confirmation.</li><li>Log in to the app using your username and password then clicking on the “Log In” button.</li><li>To add a new password record, fill in the required details then click on the “Add” button.</li><li>To edit a password record, first double-click the record from the list and make modifications as you wish, finally click on the “Update” button.</li><li>To delete a password record, double-click the record from the list and then click on the “Delete” button.</li><li>To generate a random password, simply type in ‘[random]’ in the Password input box of the details section, then press <kbd>Tab</kbd> or <kbd>Enter</kbd> to trigger the auto generation.</li><li>You can also use <kbd>Tab</kbd> or <kbd>Enter</kbd> to jump from one input box to the next while editing password entry.</li><li>The “Clear” button can be used to clear all inputs in the input boxes. It also clears the current selection status, i.e. the status shows which has been lastly double-clicked.</li></ol><h2 id="Security"><a href="#Security" class="headerlink" title="Security"></a>Security</h2><p>This app takes security seriously and implements several measures to ensure the safety of user data. The use of scrypt for hashing the master password and unique salt with Fernet for encrypting the password records provide strong protection against brute force and dictionary attacks. Additionally, the app does not store any plaintext passwords or the master key, further reducing the risk of data breaches.</p><h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p>This project is licensed under the MIT License - see the <a href="https://opensource.org/license/mit/">LICENSE</a> file for details.</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> password </tag>
            
            <tag> cryptography </tag>
            
            <tag> tkinter </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
