<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>PDSA - Big O</title>
      <link href="/posts/PDSA-Big-O/"/>
      <url>/posts/PDSA-Big-O/</url>
      
        <content type="html"><![CDATA[<style>    #intro {        text-align: center;    }    #intro .title {        font-size: 1.5rem;        font-weight: 700;        color: rgb(31, 45, 61);    }    #intro .subtitle {        font-size: 1.2rem;        font-weight: 700;        color: rgb(31, 45, 61);    }</style><div id="intro">    <p class="title">Big O</h2>    <p class="subtitle">Learning Log: PDSA - Big O</h3>    <p>GitHub Repo: <a href="https://github.com/Freedempire/100_days_of_code.git">100_days_of_code</a></p></div><h2 id="What-is-big-O-notation"><a href="#What-is-big-O-notation" class="headerlink" title="What is big O notation"></a>What is big O notation</h2><p>In computer science, big O notation is used to classify algorithms according to how their run time or space requirements grow as the input size grows.</p><p>Big O notation characterizes functions according to their growth rates: different functions with the same asymptotic growth rate may be represented using the same O notation. The letter O is used because the growth rate of a function is also referred to as the order of the function.</p><p>Big O is also known as the algorithm’s upper bound since it analyses the worst-case situation.</p><h2 id="How-to-measure-the-efficiency-of-an-algorithm"><a href="#How-to-measure-the-efficiency-of-an-algorithm" class="headerlink" title="How to measure the efficiency of an algorithm"></a>How to measure the efficiency of an algorithm</h2><p>Efficiency is measured in two ways: time complexity and space complexity.</p><p>A function’s time complexity measures how long it takes to execute in terms of computational steps. The space complexity of a function is determined by the amount of memory it uses.</p><p>The time complexity, computational complexity or temporal complexity describes the amount of time necessary to execute an algorithm. It is not a measure of the actual time taken to run an algorithm, instead, it is a measure of how the time taken scales with change in the input length.</p><p>The overall amount of memory or space utilized by an algorithm&#x2F;program, including the space of input values for execution, is called space complexity. To determine space complexity, simply compute how much space the variables in an algorithm&#x2F;a program take up.</p><p>Space Complexity &#x3D; Auxiliary space + Space used by input values.</p><p>The best algorithms&#x2F;programs should have the least space complexity. The lesser the space used, the faster it executes.</p><p>Following are the key time and space complexities:</p><ul><li>Constant time: O(1)</li><li>Logarithm time: O(log n)</li><li>Linear time: O(n)</li><li>Logarithmic time: O(n log n)</li><li>Quadratic time: O(n^2)</li><li>Exponential time: O(2^n)</li><li>Factorial time: O(n!)</li></ul><h2 id="Big-O-complexity-chart"><a href="#Big-O-complexity-chart" class="headerlink" title="Big O complexity chart"></a>Big O complexity chart</h2><svg id="chart" width="800" height="500" xmlns="http://www.w3.org/2000/svg">    <!-- horrible region -->    <path d="M50 450 L 50 0 L 800 0 L 800 450 Z" fill="#ff8989"></path>    <!-- bad region -->    <path d="M50 450 L 800 0 L 800 450 Z" fill="#FFC543"></path>    <!-- fair region -->    <path d="M50 450 L 800 450 L 800 330 Z" fill="yellow"></path>    <!-- good region -->    <path d="M50 450 L 800 450 L 800 410 Z" fill="#C8EA00"></path>    <!-- excellent region -->    <path d="M50 450 L 800 450 L 800 440 Z" fill="#53d000"></path>    <path d="M50 0 L 50 450 L 800 450" fill="transparent" stroke="black" stroke-width="2"></path>    <path d="M50 448 L 800 448" fill="transparent" stroke="black" stroke-width="2"></path>    <text x="700" y="438" fill="black">O(log n), O(1)</text>    <path d="M50 450 L 800 400" fill="transparent" stroke="black" stroke-width="2"></path>    <text x="760" y="390" fill="black">O(n)</text>    <path d="M50 450 Q 400 350, 800 150" fill="transparent" stroke="black" stroke-width="2"></path>    <text x="630" y="190" fill="black">O(n log n)</text>    <path d="M50 450 Q 180 380, 250 0" fill="transparent" stroke="black" stroke-width="2"></path>    <text x="260" y="30" fill="black">O(n^2)</text>    <path d="M50 450 C 100 430, 120 350, 120 0" fill="transparent" stroke="black" stroke-width="2"></path>    <text x="125" y="20" fill="black">O(2^n)</text>    <path d="M50 450 C 80 450, 80 350, 80 0" fill="transparent" stroke="black" stroke-width="2"></path>    <text x="80" y="20" fill="black">O(n!)</text>    <text x="0" y="0" transform="translate(30 230) rotate(-90)" style="dominant-baseline: middle; text-anchor: middle; font-size:20px; color: #555; font-size:20px; color: #555; font-style: italic;" fill="black">Operations</text>    <text x="0" y="0" transform="translate(420 470)" style="dominant-baseline: middle; text-anchor: middle; font-size:20px; color: #555; font-style: italic;" fill="black">Elements</text></svg><p>When writing Big O notation, we look for the fastest-growing term as the input grows larger and larger. We can simplify the equation by removing any <em>non-dominant</em> terms and <em>constants</em>.</p><p>So,</p><ul><li>O(2n) simplifies to O(n), and</li><li>O(n^2 + n + 1000) simplifies to O(n^2)</li></ul><h3 id="Constant-time-O-1"><a href="#Constant-time-O-1" class="headerlink" title="Constant time: O(1)"></a>Constant time: O(1)</h3><p>When there is no dependence on the input size n, an algorithm is said to have a constant time of order O(1).</p><h3 id="Logarithm-time-O-log-n"><a href="#Logarithm-time-O-log-n" class="headerlink" title="Logarithm time: O(log n)"></a>Logarithm time: O(log n)</h3><p>When the size of the input data decreases in each step by a certain factor, an algorithm will have logarithmic time complexity. This means as the input size grows, the number of operations that need to be executed grows comparatively much slower.</p><h3 id="Linear-time-O-n"><a href="#Linear-time-O-n" class="headerlink" title="Linear time: O(n)"></a>Linear time: O(n)</h3><p>Linear time is achieved when the running time of an algorithm increases linearly with the length of the input.</p><h3 id="Quadratic-time-O-n-2"><a href="#Quadratic-time-O-n-2" class="headerlink" title="Quadratic time: O(n^2)"></a>Quadratic time: O(n^2)</h3><p>The performance of a quadratic time complexity algorithm is directly related to the squared size of the input data collection. You will encounter such time complexity in programs when you loop within a loop.</p><h3 id="Exponential-time-O-2-n"><a href="#Exponential-time-O-2-n" class="headerlink" title="Exponential time: O(2^n)"></a>Exponential time: O(2^n)</h3><p>With each addition to the input (n), the growth rate doubles, and the algorithm iterates across all subsets of the input elements. When an input unit is increased by one, the number of operations executed is doubled.</p><h2 id="Calculating-complexity"><a href="#Calculating-complexity" class="headerlink" title="Calculating complexity"></a>Calculating complexity</h2><p>To determine the time complexity of our code, we must examine it line by line, taking note of the following factors:</p><ul><li>Assignments, bits, and math operators are all basic operations.</li><li>Loops and nested loops</li><li>Recursions and function invocations</li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> big o </tag>
            
            <tag> algorithm </tag>
            
            <tag> data structure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day 74 of 100 Days of Code</title>
      <link href="/posts/Day-74-of-100-Days-of-Code/"/>
      <url>/posts/Day-74-of-100-Days-of-Code/</url>
      
        <content type="html"><![CDATA[<style>    #intro {        text-align: center;    }    #intro .title {        font-size: 1.5rem;        font-weight: 700;        color: rgb(31, 45, 61);    }    #intro .subtitle {        font-size: 1.2rem;        font-weight: 700;        color: rgb(31, 45, 61);    }</style><div id="intro">    <p class="title">Resampling and Visualizing Time Series</h2>    <p class="subtitle">Learning Log: Day 74 of 100 Days of Code</h3>    <p>GitHub Repo: <a href="https://github.com/Freedempire/100_days_of_code.git">100_days_of_code</a></p></div><h2 id="Learning-points"><a href="#Learning-points" class="headerlink" title="Learning points"></a>Learning points</h2><ul><li>How to use <code>describe()</code> to quickly see some descriptive statistics at a glance</li><li>How to use <code>resample()</code> to make a time-series data comparable to another by changing the periodicity</li><li>How to work with <code>matplotlib.dates</code> Locators to better style a timeline</li><li>How to find the number of <code>NaN</code> values with <code>isna().values.sum()</code></li><li>How to change the resolution of a chart using the figure’s <code>dpi</code></li><li>How to create dashed <code>&#39;--&#39;</code> and dotted <code>&#39;-.&#39;</code> lines using <code>linestyles</code></li><li>How to use different kinds of markers (e.g., <code>&#39;o&#39;</code> or <code>&#39;^&#39;</code>) on charts</li><li>Fine-tuning the styling of Matplotlib charts by using limits, labels, <code>linewidth</code> and <code>color</code> (both in the form of named colors and HEX codes)</li><li>Using <code>grid()</code> to help visually identify seasonality in a time series</li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> pandas </tag>
            
            <tag> matplotlib </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day 73 of 100 Days of Code</title>
      <link href="/posts/Day-73-of-100-Days-of-Code/"/>
      <url>/posts/Day-73-of-100-Days-of-Code/</url>
      
        <content type="html"><![CDATA[<style>    #intro {        text-align: center;    }    #intro .title {        font-size: 1.5rem;        font-weight: 700;        color: rgb(31, 45, 61);    }    #intro .subtitle {        font-size: 1.2rem;        font-weight: 700;        color: rgb(31, 45, 61);    }</style><div id="intro">    <p class="title">Aggregate & Merge Data with Pandas</h2>    <p class="subtitle">Learning Log: Day 73 of 100 Days of Code</h3>    <p>GitHub Repo: <a href="https://github.com/Freedempire/100_days_of_code.git">100_days_of_code</a></p></div><h2 id="Learning-points"><a href="#Learning-points" class="headerlink" title="Learning points"></a>Learning points</h2><ul><li>combine the <code>groupby()</code> and <code>count()</code> functions to aggregate data</li><li>use the <code>value_counts()</code> function</li><li>use the <code>agg()</code> function to run an operation on a particular column</li><li><code>rename()</code> columns of DataFrames</li><li><code>merge()</code> DataFrames along a particular column</li><li>create a line chart with two separate axes to visualise data that have different scales</li><li>create a scatter plot in Matplotlib</li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> pandas </tag>
            
            <tag> matplotlib </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day 72 of 100 Days of Code</title>
      <link href="/posts/Day-72-of-100-Days-of-Code/"/>
      <url>/posts/Day-72-of-100-Days-of-Code/</url>
      
        <content type="html"><![CDATA[<style>    #intro {        text-align: center;    }    #intro .title {        font-size: 1.5rem;        font-weight: 700;        color: rgb(31, 45, 61);    }    #intro .subtitle {        font-size: 1.2rem;        font-weight: 700;        color: rgb(31, 45, 61);    }</style><div id="intro">    <p class="title">Data Visualisation with Matplotlib</h2>    <p class="subtitle">Learning Log: Day 72 of 100 Days of Code</h3>    <p>GitHub Repo: <a href="https://github.com/Freedempire/100_days_of_code.git">100_days_of_code</a></p></div><h2 id="Matplotlib"><a href="#Matplotlib" class="headerlink" title="Matplotlib"></a>Matplotlib</h2><p>Matplotlib is a comprehensive library for creating static, animated, and interactive visualizations in Python.</p><h3 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install matplotlib</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> pandas </tag>
            
            <tag> matplotlib </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day 71 of 100 Days of Code</title>
      <link href="/posts/Day-71-of-100-Days-of-Code/"/>
      <url>/posts/Day-71-of-100-Days-of-Code/</url>
      
        <content type="html"><![CDATA[<style>    #intro {        text-align: center;    }    #intro .title {        font-size: 1.5rem;        font-weight: 700;        color: rgb(31, 45, 61);    }    #intro .subtitle {        font-size: 1.2rem;        font-weight: 700;        color: rgb(31, 45, 61);    }</style><div id="intro">    <p class="title">Data Exploration with Pandas</h2>    <p class="subtitle">Learning Log: Day 71 of 100 Days of Code</h3>    <p>GitHub Repo: <a href="https://github.com/Freedempire/100_days_of_code.git">100_days_of_code</a></p></div><h2 id="Pandas"><a href="#Pandas" class="headerlink" title="Pandas"></a>Pandas</h2><p>The pandas package is the most important tool at the disposal of Data Scientists and Analysts working in Python today.</p><p>Pandas is derived from the term “panel data”, an econometrics term for data sets that include observations over multiple time periods for the same individuals.</p><p>Through pandas, you get acquainted with your data by cleaning, transforming, and analyzing it.</p><p>For example, say you want to explore a dataset stored in a CSV on your computer. Pandas will extract the data from that CSV into a <strong>DataFrame</strong> — a table, basically — then let you do things like:</p><ul><li>Calculate statistics and answer questions about the data, like<ul><li>What’s the average, median, max, or min of each column?</li><li>Does column A correlate with column B?</li><li>What does the distribution of data in column C look like?</li></ul></li><li>Clean the data by doing things like removing missing values and filtering rows or columns by some criteria</li><li>Visualize the data with help from Matplotlib. Plot bars, lines, histograms, bubbles, and more.</li><li>Store the cleaned, transformed data back into a CSV, other file or database</li></ul><p>Pandas is built on top of the <strong>NumPy</strong> package, meaning a lot of the structure of NumPy is used or replicated in Pandas. Data in pandas is often used to feed statistical analysis in <strong>SciPy</strong>, plotting functions from <strong>Matplotlib</strong>, and machine learning algorithms in <strong>Scikit-learn</strong>.</p><p>Jupyter Notebooks offer a good environment for using pandas to do data exploration and modeling, but pandas can also be used in text editors just as easily.</p><p>Jupyter Notebooks give us the ability to execute code in a particular cell as opposed to running the entire file. This saves a lot of time when working with large datasets and complex transformations. Notebooks also provide an easy way to visualize pandas’ DataFrames and plots.</p><h3 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h3><h4 id="Installing-with-Anaconda"><a href="#Installing-with-Anaconda" class="headerlink" title="Installing with Anaconda"></a>Installing with Anaconda</h4><p>The simplest way to install not only pandas, but Python and the most popular packages that make up the SciPy stack (IPython, NumPy, Matplotlib, …) is with Anaconda, a cross-platform (Linux, macOS, Windows) Python distribution for data analytics and scientific computing.</p><h4 id="Installing-with-Miniconda"><a href="#Installing-with-Miniconda" class="headerlink" title="Installing with Miniconda"></a>Installing with Miniconda</h4><p>If you want to have more control on which packages, or have a limited internet bandwidth, then installing pandas with Miniconda may be a better solution.</p><p>Conda is the package manager that the Anaconda distribution is built upon. It is a package manager that is both cross-platform and language agnostic (it can play a similar role to a pip and virtualenv combination).</p><p>Miniconda allows you to create a minimal self contained Python installation, and then use the Conda command to install additional packages.</p><h4 id="Installing-from-PyPI"><a href="#Installing-from-PyPI" class="headerlink" title="Installing from PyPI"></a>Installing from PyPI</h4><p>pandas can be installed via pip from PyPI.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pandas</span><br></pre></td></tr></table></figure><p>pandas can also be installed with sets of optional dependencies to enable certain functionality. For example, to install pandas with the optional dependencies to read Excel files.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install <span class="string">&quot;pandas[excel]&quot;</span></span><br></pre></td></tr></table></figure><h3 id="Primary-data-structure-of-pandas-Series-and-DataFrames"><a href="#Primary-data-structure-of-pandas-Series-and-DataFrames" class="headerlink" title="Primary data structure of pandas: Series and DataFrames"></a>Primary data structure of pandas: Series and DataFrames</h3><p>A Series (1D labeled homogeneously-typed array) is essentially a column.</p><p>A DataFrame (general 2D labeled, size-mutable tabular structure with potentially heterogeneously-typed column) is a multi-dimensional table made up of a collection of Series.</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> pandas </tag>
            
            <tag> csv </tag>
            
            <tag> data cleaning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day 70 of 100 Days of Code</title>
      <link href="/posts/Day-70-of-100-Days-of-Code/"/>
      <url>/posts/Day-70-of-100-Days-of-Code/</url>
      
        <content type="html"><![CDATA[<style>    #intro {        text-align: center;    }    #intro .title {        font-size: 1.5rem;        font-weight: 700;        color: rgb(31, 45, 61);    }    #intro .subtitle {        font-size: 1.2rem;        font-weight: 700;        color: rgb(31, 45, 61);    }</style><div id="intro">    <p class="title">Deploying Your Web Application with Heroku</h2>    <p class="subtitle">Learning Log: Day 70 of 100 Days of Code</h3>    <p>GitHub Repo: <a href="https://github.com/Freedempire/100_days_of_code.git">100_days_of_code</a></p></div><h2 id="Some-basic-command-line-commands"><a href="#Some-basic-command-line-commands" class="headerlink" title="Some basic command line commands"></a>Some basic command line commands</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># for windows</span></span><br><span class="line"><span class="comment"># change directory to Desktop</span></span><br><span class="line"><span class="built_in">cd</span> %userprofile%\Desktop</span><br><span class="line"><span class="comment"># create a new .txt file</span></span><br><span class="line"><span class="built_in">touch</span> new.txt</span><br><span class="line"><span class="comment"># open the file</span></span><br><span class="line">start new.txt</span><br></pre></td></tr></table></figure><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><p>Version control, also known as source control, is the practice of tracking and managing changes to software code.</p><p>Version control software keeps track of every modification to the code in a special kind of database. If a mistake is made, developers can turn back the clock and compare earlier versions of the code to help fix the mistake while minimizing disruption to all team members.</p><p>By far, the most widely used modern version control system in the world today is Git.</p><h3 id="Get-documentation-for-a-command"><a href="#Get-documentation-for-a-command" class="headerlink" title="Get documentation for a command"></a>Get documentation for a command</h3><p>You can get documentation for a command such as <code>git log --graph</code> with:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">man git-log</span><br></pre></td></tr></table></figure><p>or:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">help</span> <span class="built_in">log</span></span><br></pre></td></tr></table></figure><h3 id="Setting-up-a-repository"><a href="#Setting-up-a-repository" class="headerlink" title="Setting up a repository"></a>Setting up a repository</h3><h4 id="Initializing-a-new-repository-git-init"><a href="#Initializing-a-new-repository-git-init" class="headerlink" title="Initializing a new repository: git init"></a>Initializing a new repository: git init</h4><p>Versioning an existing project with a new git repository:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> project/path</span><br><span class="line">git init</span><br></pre></td></tr></table></figure><p>You can also point <code>git init</code> to an project directory:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init &lt;project directory&gt;</span><br></pre></td></tr></table></figure><h4 id="Cloning-an-existing-repository-git-clone"><a href="#Cloning-an-existing-repository-git-clone" class="headerlink" title="Cloning an existing repository: git clone"></a>Cloning an existing repository: git clone</h4><p>If a project has already been set up in a central repository, the clone command is the most common way for users to obtain a local development clone.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> &lt;repo url&gt;</span><br></pre></td></tr></table></figure><h4 id="Saving-changes-to-the-repository-git-add-and-git-commit"><a href="#Saving-changes-to-the-repository-git-add-and-git-commit" class="headerlink" title="Saving changes to the repository: git add and git commit"></a>Saving changes to the repository: git add and git commit</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /path/to/project </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;test content for git tutorial&quot;</span> &gt;&gt; CommitTest.txt </span><br><span class="line">git add CommitTest.txt </span><br><span class="line">git commit -m <span class="string">&quot;added CommitTest.txt to the repo&quot;</span></span><br></pre></td></tr></table></figure><ul><li><code>git add -A</code> (<code>--all</code>): Adds all modified and untracked files in the entire repository.</li><li><code>git add .</code>: Stages all files under the current directory and any subdirectory. If you are at the root of the repo, it has the same effect as <code>-A</code>.</li><li><code>git add *</code> Stages everything, but not files that begin with a dot &amp; does not remove files that have been deleted from the disk.</li><li><code>git add -u</code> (<code>--update</code>): Stages only modified files, removes files that have been deleted from disk, does not add new.</li><li><code>git add &lt;file name 1&gt; &lt;file name 2&gt;</code>: Adds only certain file(s).</li></ul><h4 id="Repo-to-repo-collaboration-git-push"><a href="#Repo-to-repo-collaboration-git-push" class="headerlink" title="Repo-to-repo collaboration: git push"></a>Repo-to-repo collaboration: git push</h4><p>If you used <code>git clone</code> to set up your local repository, your repository is already configured for remote collaboration. <code>git clone</code> will automatically configure your repo with a remote pointed to the Git URL you cloned it from. This means that once you make changes to a file and commit them, you can <code>git push</code> those changes to the remote repository.</p><p>If you used <code>git init</code> to make a fresh repo, you’ll have no remote repo to push changes to. A common pattern when initializing a new repo is to go to a hosted Git service and create a repo there. The service will provide a Git URL that you can then add to your local Git repository and git push to the hosted repo. Once you have created a remote repo with your service of choice you will need to update your local repo with a mapping.</p><p>If you prefer to host your own remote repo which is not the remote repo you cloned from, you’ll need to set up a “Bare Repository.” Both <code>git init</code> and <code>git clone</code> accept a <code>--bare</code> argument. The most common use case for bare repo is to create a remote central Git repository.</p><h4 id="Configuration-amp-set-up-git-config"><a href="#Configuration-amp-set-up-git-config" class="headerlink" title="Configuration &amp; set up: git config"></a>Configuration &amp; set up: git config</h4><p>Once you have a remote repo setup, you will need to add a remote repo url to your local <code>git config</code>, and set an upstream branch for your local branches. The <code>git remote</code> command offers such utility.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add &lt;remote_name&gt; &lt;remote_repo_url&gt;</span><br></pre></td></tr></table></figure><p>This command will map remote repository to a ref in your local repo. Once you have mapped the remote repo you can push local branches to it.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u &lt;remote_name&gt; &lt;local_branch_name&gt;</span><br></pre></td></tr></table></figure><p>This command will push the local repo branch under <code>&lt;local_branch_name&gt;</code> to the remote repo at <code>&lt;remote_name&gt;</code>.</p><p><code>-u</code>: For every branch that is up to date or successfully pushed, add upstream (tracking) reference, used by argument-less git-pull and other commands.</p><p>In addition to configuring a remote repo URL, you may also need to set global Git configuration options such as username, or email.</p><p>Define the author name and email to be used for all commits in the current repository. Typically, you’ll want to use the <code>--global</code> flag to set configuration options for the current user.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;Your Name&quot;</span></span><br><span class="line">git config --global user.email you@yourdomain.example.com</span><br></pre></td></tr></table></figure><p>Adding the <code>--local</code> option or not passing a config level option at all, will set the name and email for the current local repository.</p><p>Open the global configuration file in a text editor for manual editing:</p><p><code>git config --global --edit</code></p><h3 id="Saving-changes"><a href="#Saving-changes" class="headerlink" title="Saving changes"></a>Saving changes</h3><h4 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h4><p><code>git add &lt;file&gt;</code>: Stage all changes in <code>&lt;file&gt;</code> for the next commit.</p><p><code>git add &lt;directory&gt;</code>: Stage all changes in <code>&lt;directory&gt;</code> for the next commit.</p><p><code>git add -p</code>: Begin an interactive staging session that lets you choose portions of a file to add to the next commit.</p><h4 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h4><p><code>git commit</code>: Commit the staged snapshot. This will launch a text editor prompting you for a commit message. After you’ve entered a message, save the file and close the editor to create the actual commit.</p><p><code>git commit -a</code>: Commit a snapshot of all changes in the working directory. This only includes modifications to tracked files, i.e. the files have already been added with <code>git add</code> before.</p><p><code>git commit -m &quot;commit message&quot;</code>: A shortcut command that immediately creates a commit with a passed commit message.</p><p><code>git commit -am &quot;commit message&quot;</code>: A power user shortcut command that combines the -a and -m options. This combination immediately creates a commit of all the staged changes and takes an inline commit message.</p><p><code>git commit --amend</code>: Passing this option will modify the last commit. Instead of creating a new commit, staged changes will be added to the previous commit. This command will open up the system’s configured text editor and prompt to change the previously specified commit message.</p><h4 id="git-diff"><a href="#git-diff" class="headerlink" title="git diff"></a>git diff</h4><p><code>git diff</code>: By default git diff will show you any uncommitted changes since the last commit.</p><p><code>git diff HEAD ./path/to/file</code>: This example is scoped to <code>./path/to/file</code> when invoked, it will compare the specific changes in the working directory, against the index, showing the changes that are not staged yet. By default <code>git diff</code> will execute the comparison against <code>HEAD</code>. Omitting <code>HEAD</code> in the example above doesn’t change the effect.</p><h4 id="git-stash"><a href="#git-stash" class="headerlink" title="git stash"></a>git stash</h4><p>The <code>git stash</code> command takes your uncommitted changes (both staged and unstaged), saves them away for later use, and then reverts them from your working copy. The stash is local to your Git repository; stashes are not transferred to the server when you push.</p><h4 id="gitignore"><a href="#gitignore" class="headerlink" title=".gitignore"></a>.gitignore</h4><p>Ignored files are usually build artifacts and machine generated files that can be derived from your repository source or should otherwise not be committed.</p><p>Some common examples are:</p><ul><li>dependency caches, such as the contents of <code>/node_modules</code> or <code>/packages</code></li><li>compiled code, such as <code>.o</code>, <code>.pyc</code>, and <code>.class</code> files</li><li>build output directories, such as <code>/bin</code>, <code>/out</code>, or <code>/target</code></li><li>files generated at runtime, such as <code>.log</code>, <code>.lock</code>, or <code>.tmp</code></li><li>hidden system files, such as <code>.DS_Store</code> or <code>Thumbs.db</code></li><li>personal IDE config files, such as <code>.idea/workspace.xml</code></li></ul><p>Ignored files are tracked in a special file named <code>.gitignore</code> that is checked in at the root of your repository. <code>.gitignore</code> files contain <a href="http://linux.die.net/man/7/glob">globbing patterns</a> that are matched against file names in your repository to determine whether or not they should be ignored.</p><h3 id="Inspecting-a-repository"><a href="#Inspecting-a-repository" class="headerlink" title="Inspecting a repository"></a>Inspecting a repository</h3><h4 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a>git status</h4><p>The <code>git status</code> command displays the state of the working directory and the staging area.</p><p>Status output does not show you any information regarding the committed project history. For this, you need to use <code>git log</code>.</p><h4 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a>git log</h4><p>The <code>git log</code> command displays committed snapshots. It lets you list the project history, filter it, and search for specific changes.</p><p><code>git log</code>: Display the entire commit history using the default formatting. If the output takes up more than one screen, you can use <code>Space</code> to scroll and <code>q</code> to exit.</p><p><code>git log -n &lt;limit&gt;</code>: Limit the number of commits that display.</p><p><code>git log --oneline</code>: Condense each commit to a single line. This is useful for getting a high-level overview of the project history.</p><p><code>git log --stat</code>: Along with the ordinary git log information, include which files were altered and the relative number of lines that were added or deleted from each of them.</p><p><code>git log -p</code>: Display the patch representing each commit. This shows the full diff of each commit, which is the most detailed view you can have of your project history.</p><p><code>git log --author=&quot;&lt;pattern&gt;&quot;</code>: Search for commits by a particular author. The pattern can be a plain string or a regular expression.</p><p><code>git log --grep=&quot;&lt;pattern&gt;&quot;</code>: Search for commits with a commit message that matches pattern, which can be a plain string or a regular expression.</p><p><code>git log &lt;since&gt;..&lt;until&gt;</code>: Show only commits that occur between <code>&lt;since&gt;</code> and <code>&lt;until&gt;</code>. Both arguments can be either a commit ID, a branch name, <code>HEAD</code>, or any other kind of revision reference.</p><p><code>git log &lt;file&gt;</code>: Only display commits that include the specified file. This is an easy way to see the history of a particular file.</p><p><code>git log --graph --decorate --oneline</code>: The <code>--graph</code> flag that will draw a text based graph of the commits on the left hand side of the commit messages. <code>--decorate</code> adds the names of branches or tags of the commits that are shown. <code>--oneline</code> shows the commit information on a single line making it easier to browse through commits at-a-glance.</p><h4 id="git-tag"><a href="#git-tag" class="headerlink" title="git tag"></a>git tag</h4><p>Tags are ref’s that point to specific points in Git history. Tagging is generally used to capture a point in history that is used for a marked version release (i.e. v1.0.1). A tag is like a branch that doesn’t change. Unlike branches, tags, after being created, have no further history of commits.</p><p><code>git tag &lt;tagname&gt;</code>: To create a new tag.</p><p><code>git tag</code>: To list stored tags in a repo.</p><h4 id="git-blame"><a href="#git-blame" class="headerlink" title="git blame"></a>git blame</h4><p>The <code>git blame</code> command is a versatile troubleshooting utility that has extensive usage options. The high-level function of <code>git blame</code> is the display of author metadata attached to specific committed lines in a file. This is used to examine specific points of a file’s history and get context as to who the last author was that modified the line. This is used to explore the history of specific code and answer questions about what, how, and why the code was added to a repository.</p><p><code>git blame</code> only operates on individual files. A file-path is required for any useful output. The default execution of <code>git blame</code> will simply output the commands help menu. For example:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git blame README.MD</span><br></pre></td></tr></table></figure><h3 id="Undoing-changes"><a href="#Undoing-changes" class="headerlink" title="Undoing changes"></a>Undoing changes</h3><p>A fun metaphor is to think of Git as a timeline management utility. Commits are snapshots of a point in time or points of interest along the timeline of a project’s history. Additionally, multiple timelines can be managed through the use of branches. When ‘undoing’ in Git, you are usually moving back in time, or to another timeline where mistakes didn’t happen.</p><h4 id="git-checkout"><a href="#git-checkout" class="headerlink" title="git checkout"></a>git checkout</h4><p>When you have found a commit reference to the point in history you want to visit, you can utilize the <code>git checkout</code> command to visit that commit. <code>git checkout</code> is an easy way to “load” any of these saved snapshots onto your development machine.</p><p>During the normal course of development, the <code>HEAD</code> usually points to master or some other local branch, but when you check out a previous <em>commit</em>, <code>HEAD</code> no longer points to a branch—it points directly to a commit. This is called a “detached HEAD” state.</p><p>Checking out an old <em>file</em> does not move the <code>HEAD</code> pointer. It remains on the same branch and same commit, avoiding a “detached HEAD” state. You can then commit the old version of the file in a new snapshot. So, in effect, this usage of git checkout on a file, serves as a way to revert back to an old version of an individual file.</p><p><code>git checkout &lt;a1e8fb5&gt;</code>: This makes your working directory match the exact state of the <code>a1e8fb5</code> commit.</p><p><code>git checkout master</code>: Get back to the “current” state of your project. This assumes that you’re developing on the default master branch. Once you’re back in the master branch, you can use either <code>git revert</code> or <code>git reset</code> to undo any undesired changes.</p><p>When the repo is in “detached HEAD” state, you are no longer working on any branch. In a detached state, any new commits you make will be orphaned when you change branches back to an established branch. Orphaned commits are up for deletion by Git’s garbage collector. To prevent orphaned commits from being garbage collected, we need to ensure we are on a branch.</p><p>From the “detached HEAD” state, we can execute <code>git checkout -b &lt;new_branch&gt;</code>. This will create a new branch and switch to that state.</p><h4 id="git-clean"><a href="#git-clean" class="headerlink" title="git clean"></a>git clean</h4><p><code>git clean</code> can be considered complementary to other commands like <code>git reset</code> and <code>git checkout</code>. Whereas these other commands operate on files previously added to the Git tracking index, the <code>git clean</code> command operates on untracked files.</p><p>By default, Git is globally configured to require that <code>git clean</code> be passed a <code>-f</code> or <code>--force</code> option to initiate, unless the <code>clean.requireForce</code> configuration option is set to false. This is an important safety mechanism. When finally executed <code>git clean</code> is not undo-able. Make sure you really want to delete the untracked files before you run it.</p><h4 id="git-revert"><a href="#git-revert" class="headerlink" title="git revert"></a>git revert</h4><p>The <code>git revert</code> command can be considered an ‘undo’ type command, however, it is not a traditional undo operation. Instead of removing the commit from the project history, it figures out how to invert the changes introduced by the commit and appends a new commit with the resulting inverse content. This prevents Git from losing history, which is important for the integrity of your revision history and for reliable collaboration.</p><p>This can be useful, for example, if you’re tracking down a bug and find that it was introduced by a single commit. Instead of manually going in, fixing it, and committing a new snapshot, you can use <code>git revert</code> to automatically do all of this for you.</p><p>A revert operation will take the specified commit, inverse the changes from that commit, and create a new “revert commit”. The ref pointers are then updated to point at the new revert commit making it the tip of the branch. Other ‘undo’ commands like, <code>git checkout</code> and <code>git reset</code>, move the <code>HEAD</code> and branch ref pointers to a specified commit.</p><h4 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a>git reset</h4><p>The <code>git reset</code> command is a complex and versatile tool for undoing changes. It has three primary forms of invocation. These forms correspond to command line arguments <code>--soft</code>, <code>--mixed</code>, <code>--hard</code>. The three arguments each correspond to Git’s three internal state management mechanism’s, The Commit Tree (<code>HEAD</code>), The Staging Index, and The Working Directory.</p><p>Git’s internal state management systems are also called Git’s “three trees”. They are, actually, node and pointer-based data structures that Git uses to track a timeline of edits.</p><h5 id="The-working-directory"><a href="#The-working-directory" class="headerlink" title="The working directory"></a>The working directory</h5><p>This tree is in sync with the local filesystem and is representative of the immediate changes made to content in files and directories.</p><p><code>git status</code> can be used to show changes to the Working Directory. They will be displayed in the red with a ‘modified’ prefix.</p><h5 id="Staging-index"><a href="#Staging-index" class="headerlink" title="Staging index"></a>Staging index</h5><p>This tree is tracking Working Directory changes, that have been promoted with <code>git add</code>, to be stored in the next commit.</p><h5 id="Commit-history"><a href="#Commit-history" class="headerlink" title="Commit history"></a>Commit history</h5><p>The final tree is the Commit History. The <code>git commit</code> command adds changes to a permanent snapshot that lives in the Commit History. This snapshot also includes the state of the Staging Index at the time of commit.</p><h4 id="How-it-works"><a href="#How-it-works" class="headerlink" title="How it works"></a>How it works</h4><p>At a surface level, <code>git reset</code> is similar in behavior to <code>git checkout</code>. Where <code>git checkout</code> solely operates on the <code>HEAD</code> ref pointer, <code>git reset</code> will move the <code>HEAD</code> ref pointer and the current branch ref pointer.</p><p>The default invocation of <code>git reset</code> has implicit arguments of <code>--mixed</code> and <code>HEAD</code>. This means executing <code>git reset</code> is equivalent to executing <code>git reset --mixed HEAD</code>. In this form <code>HEAD</code> is the specified commit.</p><p>When passed <code>--hard</code>, the Commit History ref pointers are updated to the specified commit. Then, the Staging Index and Working Directory are reset to match that of the specified commit. Any previously pending changes to the Staging Index and the Working Directory gets reset to match the state of the Commit Tree. Any previously pending changes to the Staging Index and the Working Directory gets reset to match the state of the Commit Tree. This means any pending work that was hanging out in the Staging Index and Working Directory will be lost.</p><p><code>--mixed</code> is the default operating mode. When it is passed, the ref pointers are updated, and the Staging Index is reset to the state of the specified commit. Any changes that have been undone from the Staging Index are moved to the Working Directory.</p><p>When the <code>--soft</code> argument is passed, the ref pointers are updated and the reset stops there. The Staging Index and the Working Directory are left untouched.</p><p>You should never use <code>git reset</code> when any snapshots after have been pushed to a public repository. After publishing a commit, you have to assume that other developers are reliant upon it.</p><p><code>git reset ＜file＞</code>: Remove the specified file from the staging area, but leave the working directory unchanged. This unstages a file without overwriting any changes.</p><p><code>git reset</code>: Reset the staging area to match the most recent commit, but leave the working directory unchanged. This unstages all files without overwriting any changes, giving you the opportunity to re-build the staged snapshot from scratch.</p><p><code>git reset --hard</code>: Reset the staging area and the working directory to match the most recent commit.</p><p><code>git reset &lt;commit&gt;</code>: Move the current branch tip backward to <code>&lt;commit&gt;</code>, reset the staging area to match, but leave the working directory alone. All changes made since <code>&lt;commit&gt;</code> will reside in the working directory, which lets you re-commit the project history using cleaner, more atomic snapshots.</p><p><code>git reset --hard &lt;commit&gt;</code>: Move the current branch tip backward to <code>&lt;commit&gt;</code> and reset both the staging area and the working directory.</p><h4 id="git-rm"><a href="#git-rm" class="headerlink" title="git rm"></a>git rm</h4><p>The <code>git rm</code> command is used to remove files from a Git repository. It can be thought of as the inverse of the <code>git add</code> command.</p><p>The <code>git rm</code> command can be used to remove individual files or a collection of files. The primary function of <code>git rm</code> is to remove tracked files from the Git index. Additionally, <code>git rm</code> can be used to remove files from both the staging index and the working directory. The files being operated on must be identical to the files in the current <code>HEAD</code>, otherwise Git will block the removal.</p><p>Executing <code>git rm</code> is not a permanent update. The command will update the staging index and the working directory. These changes will not be persisted until a new commit is created and the changes are added to the commit history. This means that the changes here can be “undone” using common Git commands:</p><ul><li><code>git reset HEAD</code>: A reset will revert the current staging index and working directory back to the HEAD commit. This will undo a <code>git rm</code>.</li><li><code>git checkout .</code>: A checkout will have the same effect and restore the latest version of a file from <code>HEAD</code>.</li></ul><p>A Git repository will recognize when a regular shell <code>rm</code> command has been executed on a file it is tracking. It will update the working directory to reflect the removal. It will not update the staging index with the removal. An additional <code>git add</code> command will have to be executed on the removed file paths to add the changes to the staging index. The <code>git rm</code> command acts a shortcut in that it will update the working directory and the staging index with the removal.</p><h3 id="Rewriting-history"><a href="#Rewriting-history" class="headerlink" title="Rewriting history"></a>Rewriting history</h3><p>Git has several mechanisms for storing history and saving changes. These mechanisms include: <code>git commit --amend</code>, <code>git rebase</code> and <code>git reflog</code>. These options give you powerful work flow customization options.</p><h4 id="Changing-the-Last-Commit-git-commit-–amend"><a href="#Changing-the-Last-Commit-git-commit-–amend" class="headerlink" title="Changing the Last Commit: git commit –amend"></a>Changing the Last Commit: git commit –amend</h4><p>The <code>git commit --amend</code> command is a convenient way to modify the most recent commit. It lets you combine staged changes with the previous commit instead of creating an entirely new commit. It can also be used to simply edit the previous commit message without changing its snapshot. But, amending does not just alter the most recent commit, it replaces it entirely, meaning the amended commit will be a new entity with its own ref.</p><p><code>git commit --amend -m &quot;an updated commit message&quot;</code>: Adding the <code>-m</code> option allows you to pass in a new message from the command line without being prompted to open an editor.</p><p><code>git commit --amend --no-edit</code>: The <code>--no-edit</code> flag will allow you to make the amendment to your commit without changing its commit message. The resulting commit will replace the incomplete one before.</p><p>Avoid amending a commit that other developers have based their work on. This is a confusing situation for developers to be in and it’s complicated to recover from.</p><h4 id="Changing-older-or-multiple-commits"><a href="#Changing-older-or-multiple-commits" class="headerlink" title="Changing older or multiple commits"></a>Changing older or multiple commits</h4><p>To modify older or multiple commits, you can use <code>git rebase</code> to combine a sequence of commits into a new base commit. Since your new commits will be replacing the old, it’s important to not use git rebase on commits that have been pushed public, or it will appear that your project history disappeared.</p><h4 id="The-safety-net-git-reflog"><a href="#The-safety-net-git-reflog" class="headerlink" title="The safety net: git reflog"></a>The safety net: git reflog</h4><p>Reference logs, or “reflogs” are a mechanism Git uses to record updates applied to tips of branches and other commit references. Reflog allows you to go back to commits even though they are not referenced by any branch or tag. After rewriting history, the reflog contains information about the old state of branches and allows you to go back to that state if necessary.</p><h2 id="WSGI"><a href="#WSGI" class="headerlink" title="WSGI"></a>WSGI</h2><p><a href="https://flask.palletsprojects.com/en/2.3.x/deploying/">Deploying to production</a></p><p>After developing your application, you’ll want to make it available publicly to other users. When you’re developing locally, you’re probably using the built-in development server, debugger, and reloader. These should not be used in production. Instead, you should use a dedicated <em>WSGI server</em> or <em>hosting platform</em> for hosting web applications without needing to maintain your own server, networking, domain, etc.</p><p>The Python Web Server Gateway Interface (WSGI, pronounced whiskey or WIZ-ghee) is a simple and universal interface between web servers and web applications or frameworks written in the Python programming language.</p><p>A WSGI server implements the web server side of the WSGI interface for running Python web applications. A WSGI server is used to run the application, converting incoming HTTP requests to the standard WSGI environ, and converting outgoing WSGI responses to HTTP responses.</p><p>WSGI servers have HTTP servers built-in. However, a dedicated HTTP server may be safer, more efficient, or more capable. Putting an HTTP server in front of the WSGI server is called a “reverse proxy.”</p><h3 id="Gunicorn"><a href="#Gunicorn" class="headerlink" title="Gunicorn"></a>Gunicorn</h3><p>Gunicorn is a pure Python WSGI server with simple configuration and multiple worker implementations for performance tuning.</p><ul><li>It tends to integrate easily with hosting platforms.</li><li>It does not support Windows (but does run on WSL).</li><li>It is easy to install as it does not require additional dependencies or compilation.</li><li>It has built-in async worker support using gevent or eventlet.</li></ul><h4 id="Installing"><a href="#Installing" class="headerlink" title="Installing"></a>Installing</h4><p>Create a virtualenv, install your application, then install gunicorn.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> hello-app</span><br><span class="line">python -m venv .venv</span><br><span class="line">. .venv/bin/activate  <span class="comment"># . (dot) is a special built-in shell command which runs a shell script in the current environment and then returns</span></span><br><span class="line">pip install .  <span class="comment"># install your application</span></span><br><span class="line">pip install gunicorn</span><br></pre></td></tr></table></figure><h4 id="Running"><a href="#Running" class="headerlink" title="Running"></a>Running</h4><p>The only required argument to Gunicorn tells it how to load your Flask application. The syntax is <code>&#123;module_import&#125;:&#123;app_variable&#125;</code>. <code>module_import</code> is the dotted import name to the module with your application. <code>app_variable</code> is the variable with the application. It can also be a function call (with any arguments) if you’re using the app factory pattern.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># equivalent to &#x27;from hello import app&#x27;</span></span><br><span class="line">gunicorn -w 4 <span class="string">&#x27;hello:app&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># equivalent to &#x27;from hello import create_app; create_app()&#x27;</span></span><br><span class="line">gunicorn -w 4 <span class="string">&#x27;hello:create_app()&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="PostgreSQL"><a href="#PostgreSQL" class="headerlink" title="PostgreSQL"></a>PostgreSQL</h2><p>SQLite is ideal for users getting started since it can be run in memory and backed by small files on disk that are easily created and moved around. While easy to use, SQLite is not intended as a production grade database.</p><p>Heroku’s Cedar stack has an ephemeral filesystem. You can write to it, and you can read from it, but the contents will be cleared periodically. If you were to use SQLite on Heroku, you would lose your entire database at least once every 24 hours.</p><p>Even if Heroku’s disks were persistent running SQLite would still not be a good fit. Since SQLite does not run as a service, each dyno (The Heroku Platform uses the container model to run and scale all Heroku apps. The containers used at Heroku are called “dynos.”) would run a separate running copy. Each of these copies need their own disk backed store. This would mean that each dyno powering your app would have a different set of data since the disks are not synchronized.</p><p>Instead of using SQLite on Heroku you can configure your app to run on Postgres.</p><h3 id="Database-connector"><a href="#Database-connector" class="headerlink" title="Database connector"></a>Database connector</h3><p>We must use a database connector library to connect to a PostgreSQL database instance from our Python script. We can pick from a variety of alternatives in Python, but <a href="https://www.psycopg.org/docs/">Psycopg2</a> is the most well-known and widely-used one.</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> web development </tag>
            
            <tag> git </tag>
            
            <tag> version control </tag>
            
            <tag> heroku </tag>
            
            <tag> wsgi </tag>
            
            <tag> gunicorn </tag>
            
            <tag> postgresql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day 69 of 100 Days of Code</title>
      <link href="/posts/Day-69-of-100-Days-of-Code/"/>
      <url>/posts/Day-69-of-100-Days-of-Code/</url>
      
        <content type="html"><![CDATA[<style>    #intro {        text-align: center;    }    #intro .title {        font-size: 1.5rem;        font-weight: 700;        color: rgb(31, 45, 61);    }    #intro .subtitle {        font-size: 1.2rem;        font-weight: 700;        color: rgb(31, 45, 61);    }</style><div id="intro">    <p class="title">Blog Capstone Project Part 4 - Adding Users</h2>    <p class="subtitle">Learning Log: Day 69 of 100 Days of Code</h3>    <p>GitHub Repo: <a href="https://github.com/Freedempire/100_days_of_code.git">100_days_of_code</a></p></div><h2 id="Screenshots"><a href="#Screenshots" class="headerlink" title="Screenshots"></a>Screenshots</h2><p><img src="https://i.ibb.co/M8q6b4d/Blog-project-part4-1.jpg" alt="Blog screenshot 1"><br><img src="https://i.ibb.co/XW5WxSQ/Blog-project-part4-2.jpg" alt="Blog screenshot 2"><br><img src="https://i.ibb.co/Dwj1KGd/Blog-project-part4-3.jpg" alt="Blog screenshot 3"><br><img src="https://i.ibb.co/Vmq0bHv/Blog-project-part4-4.jpg" alt="Blog screenshot 4"><br><img src="https://i.ibb.co/17RCLWV/Blog-project-part4-5.jpg" alt="Blog screenshot 5"><br><img src="https://i.ibb.co/HXvCVg1/Blog-project-part4-6.jpg" alt="Blog screenshot 6"><br><img src="https://i.ibb.co/5KmQtXc/Blog-project-part4-7.jpg" alt="Blog screenshot 7"><br><img src="https://i.ibb.co/N6XT6dJ/Blog-project-part4-8.jpg" alt="Blog screenshot 8"></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> web development </tag>
            
            <tag> decorator </tag>
            
            <tag> wraps </tag>
            
            <tag> orm </tag>
            
            <tag> relationship </tag>
            
            <tag> flask-gravatar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《臨江仙 廿一史彈詞第三段說秦漢開場詞》賞析</title>
      <link href="/posts/%E3%80%8A%E8%87%A8%E6%B1%9F%E4%BB%99-%E5%BB%BF%E4%B8%80%E5%8F%B2%E5%BD%88%E8%A9%9E%E7%AC%AC%E4%B8%89%E6%AE%B5%E8%AA%AA%E7%A7%A6%E6%BC%A2%E9%96%8B%E5%A0%B4%E8%A9%9E%E3%80%8B%E8%B3%9E%E6%9E%90/"/>
      <url>/posts/%E3%80%8A%E8%87%A8%E6%B1%9F%E4%BB%99-%E5%BB%BF%E4%B8%80%E5%8F%B2%E5%BD%88%E8%A9%9E%E7%AC%AC%E4%B8%89%E6%AE%B5%E8%AA%AA%E7%A7%A6%E6%BC%A2%E9%96%8B%E5%A0%B4%E8%A9%9E%E3%80%8B%E8%B3%9E%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<style>    #intro {        font-family: Noto Serif TC;        text-align: center;        font-size: 1.3em;    }    #intro h2 {        margin-bottom: 0;    }    #intro .small.gray {        font-size: 1rem;        color: gray;    }    #article-container {        font-family: Noto Serif TC;        font-size: 1.3em;    }</style><div id="intro">    <h2>臨江仙 廿一史彈詞第三段說秦漢開場詞</h2>    <p>        <span class="small gray">明 · 楊愼</span><br>        <span class="small gray">詞</span><br>        <span>滾滾長江東逝水，浪花淘盡英雄。</span><br>        <span>是非成敗轉頭空。</span><br>        <span>靑山依舊在，幾度夕陽紅。</span><br>        <br>        <span>白髮漁樵江渚上，慣看秋月春風。</span><br>        <span>一壺濁酒喜相逢。</span><br>        <span>古今多少事，都付笑談中。</span><br>    </p></div><h2 id="作者簡介"><a href="#作者簡介" class="headerlink" title="作者簡介"></a>作者簡介</h2><p>生卒：公元1488—1559年<br>介紹：明四川新都人，字用修，號昇庵。楊廷和子。明正德六年（1511年）進士第一。謚文憲。以博洽冠一時，著述甚富。其詩清新綺縟，獨掇六朝之秀，於明代自立門戶。工詞，涉筆瑰麗富贍，有沐蘭浴芳、吐雲含雪之妙。有《昇庵全集》、《昇庵外集》、散曲集《陶情樂府》、《廿一史彈詞》。編有《百琲明珠》、《詞林全選》。詞集名《昇庵長短句》。</p><h2 id="賞析"><a href="#賞析" class="headerlink" title="賞析"></a>賞析</h2><p>這是一首詠史詞，借敘述歷史興亡抒發人生感慨，豪放中有含蓄，高亢中有深沉。</p><p>詞的上闋通過歷史現象詠嘆江水不息、靑山常在，而一代代英雄人物卻無一不轉瞬即逝。下闋寫詞人高潔的情操、曠達的胸懷，在談笑間暢論古今，表現了詞人不羈世俗、淡泊灑脫的情懷。全詞基調慷慨悲壯，讀來只覺蕩氣回腸、回味無窮、感慨萬千。</p><p>作者試圖在歷史長河的奔騰與沉澱中探索永恆的價值，在成敗得失之間尋找深刻的人生哲理，有歷史興衰之感，更有人生沉浮之慨。</p><p>大江裹挾著浪花奔騰而去，英雄人物隨著流逝的江水消失得不見蹤影。「是非成敗轉頭空」，豪邁、悲壯，既有英雄功成名就後的失落、空虛，又暗含著高山隱士對名利的淡泊、輕視。</p><p>既然「是非成敗」都如同過眼煙雲，就不必耿耿於懷、斤斤計較；不如寄情山水，託趣漁樵，與秋月春風為伴，自在自得。</p><p>「白髮漁樵江渚上，慣看秋月春風。」作者就是詞中的白髮漁樵，坐看歷史長河滾滾東流。他以旁觀者的心境，看季節的變化，看時代的更迭，頓覺人生何嘗不是如此？他看透了朝廷的腐敗，寧肯終老邊荒，也不願卑躬屈膝、阿附權貴。</p><p>「一壺濁酒喜相逢。古今多少事，都付笑談中。」他以與知己相逢為樂事，把歷代興亡作為談笑之資。留也好，去也罷，四季照樣變化，朝代照樣更迭，生命照樣老去。面對短短的人生，我們又何必一定要去強求什麼呢？人的一生，窮也好，達也罷，所有的得与失，不也在生命消亡的同時就煙消雲散了嗎？所以，只要有一壺濁酒，有幾個知己，就應該很滿足了。</p><h2 id="翻譯"><a href="#翻譯" class="headerlink" title="翻譯"></a>翻譯</h2><blockquote><p>The Immortals By The River by Yang Shen<br>The gushing waters of the Yangzi River pour and disappear into the East, washing away past heroes: their triumphs and failures, all vanish into nothingness in an instant.  Yet, the green hills stood as before, along with the perpetual rosy sunset.</p><p>A gray-haired man fishes and splits firewood in a small island, accustomed to observing the autumn moons and feeling the spring winds. A good old friend comes by happily with a bottle of crude wine; tales, old and new, shall all then be wrapped in laughter!”<br>–Translated by KS Vincent Poon, Oct 2015; revised July 2020</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> literature </category>
          
      </categories>
      
      
        <tags>
            
            <tag> poem </tag>
            
            <tag> classics </tag>
            
            <tag> literature </tag>
            
            <tag> 楊愼 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day 68 of 100 Days of Code</title>
      <link href="/posts/Day-68-of-100-Days-of-Code/"/>
      <url>/posts/Day-68-of-100-Days-of-Code/</url>
      
        <content type="html"><![CDATA[<style>    #intro {        text-align: center;    }    #intro .title {        font-size: 1.5rem;        font-weight: 700;        color: rgb(31, 45, 61);    }    #intro .subtitle {        font-size: 1.2rem;        font-weight: 700;        color: rgb(31, 45, 61);    }</style><div id="intro">    <p class="title">Authentication with Flask</h2>    <p class="subtitle">Learning Log: Day 68 of 100 Days of Code</h3>    <p>GitHub Repo: <a href="https://github.com/Freedempire/100_days_of_code.git">100_days_of_code</a></p></div><h2 id="Flask-Login"><a href="#Flask-Login" class="headerlink" title="Flask-Login"></a>Flask-Login</h2><p>Flask-Login provides user session management for Flask. It handles the common tasks of logging in, logging out, and remembering your users’ sessions over extended periods of time.</p><h3 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask-login</span><br></pre></td></tr></table></figure><h3 id="Configuring"><a href="#Configuring" class="headerlink" title="Configuring"></a>Configuring</h3><p>The most important part of an application that uses Flask-Login is the <a href="https://flask-login.readthedocs.io/en/latest/#flask_login.LoginManager">LoginManager</a> class.</p><p>The login manager contains the code that lets your application and Flask-Login work together, such as how to load a user from an ID, where to send users when they need to log in, and the like.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_login <span class="keyword">import</span> LoginManager</span><br><span class="line">login_manager = LoginManager()</span><br><span class="line"></span><br><span class="line"><span class="comment"># initialize app with flask-login extension</span></span><br><span class="line">login_manager.init_app(app)</span><br></pre></td></tr></table></figure><p>By default, Flask-Login uses <a href="https://flask.palletsprojects.com/en/latest/quickstart/#sessions">sessions</a> for authentication. This means you must set the <strong>secret key</strong> on your application.</p><h3 id="user-loader-callback"><a href="#user-loader-callback" class="headerlink" title="user_loader callback"></a>user_loader callback</h3><p>You will need to provide a <a href="https://flask-login.readthedocs.io/en/latest/#flask_login.LoginManager.user_loader">user_loader</a> callback. This callback is used to reload the user object from the user ID stored in the session. It should take the <em>str</em> ID of a user, and return the corresponding user object. For example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@login_manager.user_loader</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_user</span>(<span class="params">user_id</span>):</span><br><span class="line">    <span class="keyword">return</span> User.get(user_id)</span><br></pre></td></tr></table></figure><p>It should return <code>None</code> (not raise an exception) if the ID is not valid.</p><h3 id="User-class"><a href="#User-class" class="headerlink" title="User class"></a>User class</h3><p>The class that you use to represent users needs to implement these properties and methods:</p><ul><li>is_authenticated: return <code>True</code> if the user is authenticated.</li><li>is_active: return <code>True</code> if this is an active user.</li><li>is_anonymous: return <code>True</code> if this is an anonymous user.</li><li>get_id(): return a <code>str</code> that uniquely identifies this user, and can be used to load the user from the <code>user_loader</code> callback.</li></ul><p>To make implementing a user class easier, you can inherit from <a href="https://flask-login.readthedocs.io/en/latest/#flask_login.UserMixin">UserMixin</a>, which provides default implementations for all of these properties and methods.</p><h3 id="Login-example"><a href="#Login-example" class="headerlink" title="Login example"></a>Login example</h3><p>Once a user has authenticated, you log them in with the <a href="https://flask-login.readthedocs.io/en/latest/#flask_login.login_user">login_user</a> function.</p><p>You can then access the logged-in user with the <code>current_user</code> proxy, which is available in every template:</p><figure class="highlight jinja"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> current_user.is_authenticated %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  Hi </span><span class="template-variable">&#123;&#123; current_user.name &#125;&#125;</span><span class="language-xml">!</span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span></span><br></pre></td></tr></table></figure><p>Views that require your users to be logged in can be decorated with the <code>login_required</code> decorator:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/settings&quot;</span></span>)</span></span><br><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">settings</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>When the user is ready to log out:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/logout&quot;</span></span>)</span></span><br><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">logout</span>():</span><br><span class="line">    logout_user()</span><br><span class="line">    <span class="keyword">return</span> redirect(somewhere)</span><br></pre></td></tr></table></figure><h2 id="Password-hashing"><a href="#Password-hashing" class="headerlink" title="Password hashing"></a>Password hashing</h2><p>Hashing passwords is a cheap and secure method that keeps the passwords safe from malicious activity. Suppose, if a website is hacked, cybercriminals don’t get access to your password. Instead, they just get access to the encrypted “hash” created by the method of hashing.</p><h3 id="Difference-between-encryption-and-hashing"><a href="#Difference-between-encryption-and-hashing" class="headerlink" title="Difference between encryption and hashing"></a>Difference between encryption and hashing</h3><ul><li>Encryption: Encryption is the process of encoding plain text or any information so that only authorized people can read it with a corresponding key. Encryption is a two-way function where information is scrambled in such a way that it can be unscrambled later.</li><li>Hashing: Hashing is a one-way function where data is mapped to a fixed-length value. Hashing is primarily used for authentication.</li></ul><h3 id="Salt"><a href="#Salt" class="headerlink" title="Salt"></a>Salt</h3><p>In cryptography, a salt is random data used as an additional input to a one-way function that hashes data, such as a password. Salting adds an additional value to the end of the password that changes the hash value produced and prevents the identification of duplicate or common passwords</p><h3 id="Werkzeug-security-helpers"><a href="#Werkzeug-security-helpers" class="headerlink" title="Werkzeug security helpers"></a>Werkzeug security helpers</h3><ul><li><code>werkzeug.security.generate_password_hash(password, method=&#39;pbkdf2&#39;, salt_length=16)</code><br>Securely hash a password for storage. A password can be compared to a stored hash using <code>check_password_hash()</code>.</li><li><code>werkzeug.security.check_password_hash(pwhash, password)</code><br>Securely check that the given stored password hash, previously generated using <code>generate_password_hash()</code>, matches the given password.</li></ul><h2 id="Flask-message-flashing"><a href="#Flask-message-flashing" class="headerlink" title="Flask message flashing"></a>Flask message flashing</h2><p>Flask provides a really simple way to give feedback to a user with the <a href="https://flask.palletsprojects.com/en/2.3.x/patterns/flashing/">flashing system</a>. The flashing system basically makes it possible to record a message at the end of a request and access it next request and only next request. This is usually combined with a layout template that does this.</p><h2 id="Screenshot"><a href="#Screenshot" class="headerlink" title="Screenshot"></a>Screenshot</h2><p><img src="https://i.ibb.co/tY4cX6q/flask-authentication.jpg" alt="Flask authentication"></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> web development </tag>
            
            <tag> authentication </tag>
            
            <tag> hash </tag>
            
            <tag> salt </tag>
            
            <tag> encryption </tag>
            
            <tag> mixin </tag>
            
            <tag> flask-login </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day 67 of 100 Days of Code</title>
      <link href="/posts/Day-67-of-100-Days-of-Code/"/>
      <url>/posts/Day-67-of-100-Days-of-Code/</url>
      
        <content type="html"><![CDATA[<style>    #intro {        text-align: center;    }    #intro .title {        font-size: 1.5rem;        font-weight: 700;        color: rgb(31, 45, 61);    }    #intro .subtitle {        font-size: 1.2rem;        font-weight: 700;        color: rgb(31, 45, 61);    }</style><div id="intro">    <p class="title">Blog Capstone Project Part 3 - RESTful Routing</h2>    <p class="subtitle">Learning Log: Day 67 of 100 Days of Code</h3>    <p>GitHub Repo: <a href="https://github.com/Freedempire/100_days_of_code.git">100_days_of_code</a></p></div><h2 id="Screenshots"><a href="#Screenshots" class="headerlink" title="Screenshots"></a>Screenshots</h2><p><img src="https://i.ibb.co/Cs42ZY3/blog-project-1.jpg" alt="Blog project screenshot 1"><br><img src="https://i.ibb.co/7ycTD7g/blog-project-2.jpg" alt="Blog project screenshot 2"><br><img src="https://i.ibb.co/R426H7R/blog-project-3.jpg" alt="Blog project screenshot 3"><br><img src="https://i.ibb.co/pfhgXHR/blog-project-4.jpg" alt="Blog project screenshot 4"><br><img src="https://i.ibb.co/487MTv6/blog-project-5.jpg" alt="Blog project screenshot 5"><br><img src="https://i.ibb.co/6HddVYD/blog-project-6.jpg" alt="Blog project screenshot 6"><br><img src="https://i.ibb.co/GVwrGGB/blog-project-7.jpg" alt="Blog project screenshot 7"></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> web development </tag>
            
            <tag> rest api </tag>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day 66 of 100 Days of Code</title>
      <link href="/posts/Day-66-of-100-Days-of-Code/"/>
      <url>/posts/Day-66-of-100-Days-of-Code/</url>
      
        <content type="html"><![CDATA[<style>    #intro {        text-align: center;    }    #intro .title {        font-size: 1.5rem;        font-weight: 700;        color: rgb(31, 45, 61);    }    #intro .subtitle {        font-size: 1.2rem;        font-weight: 700;        color: rgb(31, 45, 61);    }</style><div id="intro">    <p class="title">Build Your Own REST API Service</h2>    <p class="subtitle">Learning Log: Day 66 of 100 Days of Code</h3>    <p>GitHub Repo: <a href="https://github.com/Freedempire/100_days_of_code.git">100_days_of_code</a></p></div><h2 id="REST-API"><a href="#REST-API" class="headerlink" title="REST API"></a>REST API</h2><p>REST stands for <strong>Representational State Transfer</strong>. This means that when a client requests a resource using a REST API, the server <em>transfers</em> back the current <em>state</em> of the resource in a standardized <em>representation</em>.</p><p>REST is a set of guidelines that software can use to communicate over the internet in order to make integrations simple and scalable. A REST API (also called a “RESTful” API) is a specific type of API that follows these guidelines.</p><p>REST APIs work by fielding requests for a resource and returning all relevant information about the resource, translated into a format that clients can easily interpret (this format is determined by the API receiving requests). Clients can also modify items on the server and even add new items to the server through a REST API.</p><h3 id="Six-rules-of-REST-APIs"><a href="#Six-rules-of-REST-APIs" class="headerlink" title="Six rules of REST APIs"></a>Six rules of REST APIs</h3><ol><li>Client-Server separation<br>The client and server can only interact in one way: The client sends a request to the server, then the server sends a response back to the client. Servers cannot make requests and clients cannot respond — all interactions are initiated by the client.</li><li>Uniform interface<br>All requests and all responses must follow a common protocol, or a way of formatting their messages. Applications and servers are written in all sorts of different languages that don’t do a great job of working together without an intermediary. A uniform interface is a common language for any client to communicate with any REST API.<br>For most REST APIs, this common language is HTTP, or Hyper-Text Transfer Protocol.<br>HTTP requests contain two pieces of information: HTTP method and URL.<br>HTTP request methods:<ul><li>GET: The GET method requests a representation of the specified resource. Requests using GET should only retrieve data.</li><li>POST: The POST method submits an entity to the specified resource, often causing a change in state or side effects on the server.</li><li>PUT: The PUT method replaces all current representations of the target resource with the request payload.</li><li>PATCH: The PATCH method applies partial modifications to a resource.</li><li>DELETE: The DELETE method deletes the specified resource.</li></ul></li><li>Stateless<br>Every interaction is independent, and each request and response provides all the information required to complete the interaction.</li><li>Layered system<br>There are typically more servers or layers between a client and server. They are there to add security, handle and distribute traffic, or assist with a number of other important functions.</li><li>Cacheable<br>REST APIs are created with data caching in mind. When a server sends its response to a client, the response should indicate whether the resource provided can be cached, and for how long.</li><li>Code on demand<br>If desired, an API can send computer code to clients in its response. This empowers the client to run the code in its own backend.</li></ol>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> web development </tag>
            
            <tag> rest api </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day 65 of 100 Days of Code</title>
      <link href="/posts/Day-65-of-100-Days-of-Code/"/>
      <url>/posts/Day-65-of-100-Days-of-Code/</url>
      
        <content type="html"><![CDATA[<style>    #intro {        text-align: center;    }    #intro .title {        font-size: 1.5rem;        font-weight: 700;        color: rgb(31, 45, 61);    }    #intro .subtitle {        font-size: 1.2rem;        font-weight: 700;        color: rgb(31, 45, 61);    }</style><div id="intro">    <p class="title">Web Design School</h2>    <p class="subtitle">Learning Log: Day 65 of 100 Days of Code</h3>    <p>GitHub Repo: <a href="https://github.com/Freedempire/100_days_of_code.git">100_days_of_code</a></p></div><h2 id="Color-theory"><a href="#Color-theory" class="headerlink" title="Color theory"></a>Color theory</h2><p>Color theory is a huge field of knowledge. It includes <strong>rules and guidelines about various color combinations and their uses</strong>. Apart from the basic terminology and classifications (such as color schemes), it also taps into other considerations such as <strong>human perception</strong>, <strong>cultural associations</strong>, <strong>color psychology</strong>, and more.</p><p>Learning about color theory can help you create effective, smart designs.</p><h3 id="Why-color-matters"><a href="#Why-color-matters" class="headerlink" title="Why color matters"></a>Why color matters</h3><ul><li>Colors can improve visitors’ online experiences, enabling them to find the information they need and respond to your Call to Action (CTA).</li><li>Color plays a significant role in branding and product messaging.</li></ul><h3 id="Key-color-theory-terms"><a href="#Key-color-theory-terms" class="headerlink" title="Key color theory terms"></a>Key color theory terms</h3><ul><li>Color wheel: a powerful tool that can help you visualize relationships between colors in a standard, schematic way.<br>The basic color wheel consists of 12 colors. <strong>Primary colors</strong> form the basis of all others. These as Red, Blue, and Yellow. Mixing primary colors gives you Orange, Green, and Purple. These are known as <strong>secondary colors</strong>. Mixing primary and secondary colors creates tertiary colors.</li><li>Color relationships: also known as color schemes. The four main types include:<ul><li>Monochrome: Consisting of various tints, shades, and saturation of the same color.</li><li>Complementary: Based on two colors from opposite sides of the color wheel.</li><li>Analogous: Featuring three colors that are next to each other on the color wheel.</li><li>Triadic: Using three colors that are at the points of a triangle drawn within the color wheel.</li></ul></li><li>Color warmth. Hues that contain higher amounts of yellow and red are considered <strong>warm colors</strong>. They evoke a sense of passion, happiness, and heat, but can also seem aggressive and bring feelings of danger. <strong>Cool colors</strong> contain higher amounts of blue and purple. These colors are reminiscent of chilly climates, crystal clear waters, or the sky. They are considered more soothing and relaxing than warm colors. However, they can also carry connotations of formality and sadness. Adding <strong>neutral colors</strong> such as white, black, and gray can help you achieve a harmonious palette. They can balance out your color scheme and add contrast to your designs.</li><li>Tints and shades. You can create <strong>tints</strong> by adding white to a color. Higher levels of white will produce lighter tints. Similarly, if you add black, you will produce a different <strong>shade</strong>.</li><li>Hue, saturation and lightness.<br><strong>Hue</strong> describes the degree of similarity between colors. The point of reference is usually a color such as red, green, blue, or yellow. For instance, when you describe a color as yellow-green, you’re thinking of it as having two hues.<br><strong>Saturation</strong>, on the other hand, refers to color intensity. Increasing it will make the color more vibrant and darker while decreasing it will make the color appear faded and pale.<br><strong>Lightness</strong> defines how bright a color is compared to pure white. Changing only the lightness parameter in graphic editing software will produce different tints and shades.</li><li>Contrast: a crucial element of any website, especially when it comes to background color and text. If the contrast is too low, users are more likely to have trouble differentiating between elements.<br>For the sake of readability, it’s best to use a white background and dark text color to keep pages clean and organized. On the flip side, you can also experiment with reversing the colors and using a light text over a dark background. These two combinations have become a trend in web design, with many templates and apps offering a “Dark Theme” or a “Light Theme.”</li></ul><h3 id="How-to-use-color-theory-on-websites"><a href="#How-to-use-color-theory-on-websites" class="headerlink" title="How to use color theory on websites"></a>How to use color theory on websites</h3><ul><li>Rely on color theory to come up with harmonious palettes and find the right color combinations.</li><li>Color psychology is a powerful technique that can convey a variety of messages to users.</li><li>You should always research your target audience and test their color preferences.</li></ul><h2 id="Typography-in-web-design"><a href="#Typography-in-web-design" class="headerlink" title="Typography in web design"></a>Typography in web design</h2><p>Typography in web design is similar to print design but requires certain considerations to ensure legibility on all screen types. Typeface, type size, color, line height, and letter shapes are some of the factors within typography that must be carefully balanced to provide a pleasant reading experience.</p><p>The primary purpose of typography is to communicate a written message. Type should be designed to be legible and provide a pleasant reading experience. Factors like type size, line height, and line length are elements of typography that should always be considered.</p><p>A website should keep the number of fonts to a minimum—no more than three in total. When a site has too many fonts, the user can become disoriented with so many shifts in the visual design. The chosen typefaces should have a variety of weights and styles that can be used strategically in the UI design.</p><h2 id="User-interface"><a href="#User-interface" class="headerlink" title="User interface"></a>User interface</h2><p>The user interface is the point at which human users interact with a computer, website or application. The goal of effective UI is to make the user’s experience <em>easy</em> and <em>intuitive</em>, requiring minimum effort on the user’s part to receive the maximum desired outcome.</p><p>When designing a UI for your site, it’s important to consider the user’s expectations in terms of <em>accessibility</em>, <em>visual aesthetic</em> and <em>ease of use</em>. An optimal mix of effective visuals and efficient responsiveness will improve your site’s conversion rates, as it anticipates the needs of the user and then satisfies those needs.</p><h2 id="User-experience"><a href="#User-experience" class="headerlink" title="User experience"></a>User experience</h2><p>User interface and user experience are related and equally important to the execution of a project, but the specifics differ. Mainly, UI is designed around the intended look and feel of the site, app or program while UX spans the entire process of conceptualization, development and delivery. Additionally, UX can be referenced in relation to nearly any product, while UI can only pertain to digital products.</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> web development </tag>
            
            <tag> color theory </tag>
            
            <tag> typography </tag>
            
            <tag> user interface </tag>
            
            <tag> user experience </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day 64 of 100 Days of Code</title>
      <link href="/posts/Day-64-of-100-Days-of-Code/"/>
      <url>/posts/Day-64-of-100-Days-of-Code/</url>
      
        <content type="html"><![CDATA[<style>    #intro {        text-align: center;    }    #intro .title {        font-size: 1.5rem;        font-weight: 700;        color: rgb(31, 45, 61);    }    #intro .subtitle {        font-size: 1.2rem;        font-weight: 700;        color: rgb(31, 45, 61);    }</style><div id="intro">    <p class="title">My Top 10 Movies Website</h2>    <p class="subtitle">Learning Log: Day 64 of 100 Days of Code</h3>    <p>GitHub Repo: <a href="https://github.com/Freedempire/100_days_of_code.git">100_days_of_code</a></p></div><h2 id="Screenshots"><a href="#Screenshots" class="headerlink" title="Screenshots"></a>Screenshots</h2><p><img src="https://i.ibb.co/72YYX0p/top-movies-site-1.jpg" alt="My top 10 movies 1"><br><img src="https://i.ibb.co/Tmhx0TJ/top-movies-site-2.jpg" alt="My top 10 movies 2"><br><img src="https://i.ibb.co/zhrpQBb/top-movies-site-3.jpg" alt="My top 10 movies 3"><br><img src="https://i.ibb.co/7Gk7Ttm/top-movies-site-4.jpg" alt="My top 10 movies 4"><br><img src="https://i.ibb.co/Y3rsLvm/top-movies-site-5.jpg" alt="My top 10 movies 5"><br><img src="https://i.ibb.co/0Q3KVsz/top-movies-site-6.jpg" alt="My top 10 movies 6"></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> web development </tag>
            
            <tag> flask </tag>
            
            <tag> backend </tag>
            
            <tag> sqlite </tag>
            
            <tag> sqlalchemy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day 63 of 100 Days of Code</title>
      <link href="/posts/Day-63-of-100-Days-of-Code/"/>
      <url>/posts/Day-63-of-100-Days-of-Code/</url>
      
        <content type="html"><![CDATA[<style>    #intro {        text-align: center;    }    #intro .title {        font-size: 1.5rem;        font-weight: 700;        color: rgb(31, 45, 61);    }    #intro .subtitle {        font-size: 1.2rem;        font-weight: 700;        color: rgb(31, 45, 61);    }</style><div id="intro">    <p class="title">Databases and with SQLite and SQLAlchemy</h2>    <p class="subtitle">Learning Log: Day 63 of 100 Days of Code</h3>    <p>GitHub Repo: <a href="https://github.com/Freedempire/100_days_of_code.git">100_days_of_code</a></p></div><h2 id="SQLite"><a href="#SQLite" class="headerlink" title="SQLite"></a>SQLite</h2><p>SQLite is a C library that provides a lightweight disk-based database that doesn’t require a separate server process and allows accessing the database using a nonstandard variant of the SQL query language. Some applications can use SQLite for internal data storage. It’s also possible to <em>prototype</em> an application using SQLite and then port the code to a larger database such as <strong>PostgreSQL</strong> or <strong>Oracle</strong>.</p><h3 id="Tutorial"><a href="#Tutorial" class="headerlink" title="Tutorial"></a>Tutorial</h3><p>First, we need to create a new database and open a database connection to allow sqlite3 to work with it. Call <a href="https://docs.python.org/3/library/sqlite3.html#sqlite3.connect">sqlite3.connect()</a> to create a connection to the database <code>tutorial.db</code> in the current working directory, <em>implicitly</em> creating it if it does not exist:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line">con = sqlite3.connect(<span class="string">&quot;tutorial.db&quot;</span>)</span><br></pre></td></tr></table></figure><p>The returned <a href="https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection">Connection</a> object con represents the connection to the on-disk database.</p><p>In order to execute SQL statements and fetch results from SQL queries, we will need to use a database cursor. Call <a href="https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.cursor">con.cursor()</a> to create the <a href="https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor">Cursor</a>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cur = con.cursor()</span><br></pre></td></tr></table></figure><p>For simplicity, we can just use column names in the table declaration – thanks to the <a href="https://www.sqlite.org/flextypegood.html">flexible typing</a> feature of SQLite, specifying the data types is optional. Execute the <code>CREATE TABLE</code> statement by calling <a href="https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.execute">cur.execute(…)</a>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cur.execute(<span class="string">&quot;CREATE TABLE movie(title, year, score)&quot;</span>)</span><br></pre></td></tr></table></figure><p>We can verify that the new table has been created by querying the <code>sqlite_master</code> table built-in to SQLite, which should now contain an entry for the movie table definition (see <a href="https://www.sqlite.org/schematab.html">The Schema Table</a> for details). Execute that query by calling <code>cur.execute(...)</code>, assign the result to <code>res</code>, and call <a href="https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.fetchone">res.fetchone()</a> to fetch the resulting row:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; res = cur.execute(<span class="string">&quot;SELECT name FROM sqlite_master&quot;</span>)</span><br><span class="line">&gt;&gt;&gt; res.fetchone()</span><br><span class="line">(<span class="string">&#x27;movie&#x27;</span>,)</span><br><span class="line">&gt;&gt;&gt; res = cur.execute(<span class="string">&quot;SELECT name FROM sqlite_master WHERE name=&#x27;spam&#x27;&quot;</span>)</span><br><span class="line">&gt;&gt;&gt; res.fetchone() is None</span><br><span class="line">True</span><br></pre></td></tr></table></figure><p>Now, add two rows of data supplied as SQL literals by executing an <code>INSERT</code> statement, once again by calling <code>cur.execute(...)</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cur.execute(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    INSERT INTO movie VALUES</span></span><br><span class="line"><span class="string">        (&#x27;Monty Python and the Holy Grail&#x27;, 1975, 8.2),</span></span><br><span class="line"><span class="string">        (&#x27;And Now for Something Completely Different&#x27;, 1971, 7.5)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><p>The <code>INSERT</code> statement implicitly opens a <em>transaction</em>, which needs to be committed before changes are saved in the database (see <a href="https://docs.python.org/3/library/sqlite3.html#sqlite3-controlling-transactions">Transaction control</a> for details). Call <a href="https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.commit">con.commit()</a> on the connection object to commit the transaction:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">con.commit()</span><br></pre></td></tr></table></figure><p>We can verify that the data was inserted correctly by executing a <code>SELECT</code> query. Use the now-familiar <code>cur.execute(...)</code> to assign the result to <code>res</code>, and call <a href="https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.fetchall">res.fetchall()</a> to return all resulting rows:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; res = cur.execute(<span class="string">&quot;SELECT score FROM movie&quot;</span>)</span><br><span class="line">&gt;&gt;&gt; res.fetchall()</span><br><span class="line">[(8.2,), (7.5,)]</span><br></pre></td></tr></table></figure><p>Now, insert three more rows by calling <a href="https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.executemany">cur.executemany(…)</a>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">data = [</span><br><span class="line">    (<span class="string">&quot;Monty Python Live at the Hollywood Bowl&quot;</span>, <span class="number">1982</span>, <span class="number">7.9</span>),</span><br><span class="line">    (<span class="string">&quot;Monty Python&#x27;s The Meaning of Life&quot;</span>, <span class="number">1983</span>, <span class="number">7.5</span>),</span><br><span class="line">    (<span class="string">&quot;Monty Python&#x27;s Life of Brian&quot;</span>, <span class="number">1979</span>, <span class="number">8.0</span>),</span><br><span class="line">]</span><br><span class="line">cur.executemany(<span class="string">&quot;INSERT INTO movie VALUES(?, ?, ?)&quot;</span>, data)</span><br><span class="line">con.commit()</span><br></pre></td></tr></table></figure><p>Notice that <code>?</code> placeholders are used to bind data to the query. <em>Always</em> use placeholders instead of string formatting to bind Python values to SQL statements, to avoid <a href="https://en.wikipedia.org/wiki/SQL_injection">SQL injection attacks</a>.</p><p>We can verify that the new rows were inserted by executing a <code>SELECT</code> query, this time iterating over the results of the query:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="keyword">for</span> row <span class="keyword">in</span> cur.execute(<span class="string">&quot;SELECT year, title FROM movie ORDER BY year&quot;</span>):</span><br><span class="line">&gt;&gt;&gt;     <span class="built_in">print</span>(row)</span><br><span class="line">(1971, <span class="string">&#x27;And Now for Something Completely Different&#x27;</span>)</span><br><span class="line">(1975, <span class="string">&#x27;Monty Python and the Holy Grail&#x27;</span>)</span><br><span class="line">(1979, <span class="string">&quot;Monty Python&#x27;s Life of Brian&quot;</span>)</span><br><span class="line">(1982, <span class="string">&#x27;Monty Python Live at the Hollywood Bowl&#x27;</span>)</span><br><span class="line">(1983, <span class="string">&quot;Monty Python&#x27;s The Meaning of Life&quot;</span>)</span><br></pre></td></tr></table></figure><p>Finally, verify that the database has been written to disk by calling <a href="https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.close">con.close()</a> to close the existing connection, opening a new one, creating a new cursor, then querying the database:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; con.close()</span><br><span class="line">&gt;&gt;&gt; new_con = sqlite3.connect(<span class="string">&quot;tutorial.db&quot;</span>)</span><br><span class="line">&gt;&gt;&gt; new_cur = new_con.cursor()</span><br><span class="line">&gt;&gt;&gt; res = new_cur.execute(<span class="string">&quot;SELECT title, year FROM movie ORDER BY score DESC&quot;</span>)</span><br><span class="line">&gt;&gt;&gt; title, year = res.fetchone()</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">print</span>(f<span class="string">&#x27;The highest scoring Monty Python movie is &#123;title!r&#125;, released in &#123;year&#125;&#x27;</span>)</span><br><span class="line">The highest scoring Monty Python movie is <span class="string">&#x27;Monty Python and the Holy Grail&#x27;</span>, released <span class="keyword">in</span> 1975</span><br></pre></td></tr></table></figure><p>The <code>!r</code> in the above f-string can be replace by calls to <code>repr()</code>. Similarly, <code>!s</code> can be replaced by calls to <code>str()</code> and <code>!a</code> by calls to <code>ascii()</code>.</p><h3 id="How-to-guides"><a href="#How-to-guides" class="headerlink" title="How-to guides"></a>How-to guides</h3><h4 id="How-to-use-connection-shortcut-methods"><a href="#How-to-use-connection-shortcut-methods" class="headerlink" title="How to use connection shortcut methods"></a>How to use connection shortcut methods</h4><p>Using the <a href="https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.execute">execute()</a>, <a href="https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.executemany">executemany()</a>, and <a href="https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.executescript">executescript()</a> methods of the <a href="https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection">Connection</a> class, your code can be written more concisely because you don’t have to create the (often superfluous) <a href="https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor">Cursor</a> objects explicitly. Instead, the Cursor objects are created <em>implicitly</em> and these shortcut methods <em>return the cursor objects</em>. This way, you can execute a <code>SELECT</code> statement and iterate over it directly using only a single call on the Connection object.</p><h4 id="How-to-use-the-connection-context-manager"><a href="#How-to-use-the-connection-context-manager" class="headerlink" title="How to use the connection context manager"></a>How to use the connection context manager</h4><p>A <code>Connection</code> object can be used as a context manager that automatically <em>commits</em> or <em>rolls back</em> open <em>transactions</em> when leaving the body of the context manager. If the body of the with statement finishes without exceptions, the transaction is committed. If this commit fails, or if the body of the with statement raises an uncaught exception, the transaction is rolled back.</p><p>If there is no open transaction upon leaving the body of the with statement, the context manager is a no-op (no operation).</p><p>Note The context manager neither implicitly opens a new transaction nor closes the connection.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">con = sqlite3.connect(<span class="string">&quot;:memory:&quot;</span>)</span><br><span class="line">con.execute(<span class="string">&quot;CREATE TABLE lang(id INTEGER PRIMARY KEY, name VARCHAR UNIQUE)&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Successful, con.commit() is called automatically afterwards</span></span><br><span class="line"><span class="keyword">with</span> con:</span><br><span class="line">    con.execute(<span class="string">&quot;INSERT INTO lang(name) VALUES(?)&quot;</span>, (<span class="string">&quot;Python&quot;</span>,))</span><br><span class="line"></span><br><span class="line"><span class="comment"># con.rollback() is called after the with block finishes with an exception,</span></span><br><span class="line"><span class="comment"># the exception is still raised and must be caught</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> con:</span><br><span class="line">        con.execute(<span class="string">&quot;INSERT INTO lang(name) VALUES(?)&quot;</span>, (<span class="string">&quot;Python&quot;</span>,))</span><br><span class="line"><span class="keyword">except</span> sqlite3.IntegrityError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;couldn&#x27;t add Python twice&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Connection object used as context manager only commits or rollbacks transactions,</span></span><br><span class="line"><span class="comment"># so the connection object should be closed manually</span></span><br><span class="line">con.close()</span><br></pre></td></tr></table></figure><h4 id="How-to-use-placeholders-to-bind-values-in-SQL-queries"><a href="#How-to-use-placeholders-to-bind-values-in-SQL-queries" class="headerlink" title="How to use placeholders to bind values in SQL queries"></a>How to use placeholders to bind values in SQL queries</h4><p>SQL operations usually need to use values from Python variables. However, beware of using Python’s string operations to assemble queries, as they are vulnerable to <a href="https://en.wikipedia.org/wiki/SQL_injection">SQL injection attacks</a>. For example, an attacker can simply close the single quote and inject OR TRUE to select all rows:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="comment"># Never do this -- insecure!</span></span><br><span class="line">&gt;&gt;&gt; symbol = input()</span><br><span class="line"><span class="string">&#x27; OR TRUE; --</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; sql = &quot;SELECT * FROM stocks WHERE symbol = &#x27;</span>%s<span class="string">&#x27;&quot; % symbol</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; print(sql)</span></span><br><span class="line"><span class="string">SELECT * FROM stocks WHERE symbol = &#x27;</span><span class="string">&#x27; OR TRUE; --&#x27;</span></span><br><span class="line">&gt;&gt;&gt; cur.execute(sql)</span><br></pre></td></tr></table></figure><p>Instead, use the DB-API’s parameter substitution. To insert a variable into a query string, use a <em>placeholder</em> in the string, and substitute the actual values into the query by providing them as a tuple of values to the second argument of the cursor’s <code>execute()</code> method.</p><p>An SQL statement may use one of two kinds of placeholders: <strong>question marks</strong> (qmark style) or <strong>named placeholders</strong> (named style). For the qmark style, parameters must be a <em>sequence</em> whose length must match the number of placeholders, or a <code>ProgrammingError</code> is raised. For the named style, parameters should be an instance of a <em>dict</em> (or a subclass), which must contain keys for all named parameters; any extra items are <em>ignored</em>. Here’s an example of both styles:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">con = sqlite3.connect(<span class="string">&quot;:memory:&quot;</span>)</span><br><span class="line">cur = con.execute(<span class="string">&quot;CREATE TABLE lang(name, first_appeared)&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># This is the named style used with executemany():</span></span><br><span class="line">data = (</span><br><span class="line">    &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;C&quot;</span>, <span class="string">&quot;year&quot;</span>: <span class="number">1972</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Fortran&quot;</span>, <span class="string">&quot;year&quot;</span>: <span class="number">1957</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Python&quot;</span>, <span class="string">&quot;year&quot;</span>: <span class="number">1991</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Go&quot;</span>, <span class="string">&quot;year&quot;</span>: <span class="number">2009</span>&#125;,</span><br><span class="line">)</span><br><span class="line">cur.executemany(<span class="string">&quot;INSERT INTO lang VALUES(:name, :year)&quot;</span>, data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># This is the qmark style used in a SELECT query:</span></span><br><span class="line">params = (<span class="number">1972</span>,)</span><br><span class="line">cur.execute(<span class="string">&quot;SELECT * FROM lang WHERE first_appeared = ?&quot;</span>, params)</span><br><span class="line"><span class="built_in">print</span>(cur.fetchall())</span><br></pre></td></tr></table></figure><h4 id="How-to-create-and-use-row-factories"><a href="#How-to-create-and-use-row-factories" class="headerlink" title="How to create and use row factories"></a>How to create and use row factories</h4><p>By default, sqlite3 represents each row as a tuple. If a tuple does not suit your needs, you can use the <a href="https://docs.python.org/3/library/sqlite3.html#sqlite3.Row">sqlite3.Row</a> class or a custom <a href="https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.row_factory">row_factory</a>.</p><p>While <code>row_factory</code> exists as an attribute both on the <code>Cursor</code> and the <code>Connection</code>, it is recommended to set <code>Connection.row_factory</code>, so all cursors created from the connection will use the same row factory.</p><p><code>Row</code> provides indexed and case-insensitive named access to columns, with minimal memory overhead and performance impact over a tuple. To use <code>Row</code> as a row factory, assign it to the row_factory attribute:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; con = sqlite3.connect(<span class="string">&quot;:memory:&quot;</span>)</span><br><span class="line">&gt;&gt;&gt; con.row_factory = sqlite3.Row</span><br></pre></td></tr></table></figure><p>Queries now return Row objects:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; res = con.execute(<span class="string">&quot;SELECT &#x27;Earth&#x27; AS name, 6378 AS radius&quot;</span>)</span><br><span class="line">&gt;&gt;&gt; row = res.fetchone()</span><br><span class="line">&gt;&gt;&gt; row.keys()</span><br><span class="line">[<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;radius&#x27;</span>]</span><br><span class="line">&gt;&gt;&gt; row[0]         <span class="comment"># Access by index.</span></span><br><span class="line"><span class="string">&#x27;Earth&#x27;</span></span><br><span class="line">&gt;&gt;&gt; row[<span class="string">&quot;name&quot;</span>]    <span class="comment"># Access by name.</span></span><br><span class="line"><span class="string">&#x27;Earth&#x27;</span></span><br><span class="line">&gt;&gt;&gt; row[<span class="string">&quot;RADIUS&quot;</span>]  <span class="comment"># Column names are case-insensitive.</span></span><br><span class="line">6378</span><br></pre></td></tr></table></figure><p>You can create a custom <code>row_factory</code> that returns each row as a dict, with column names mapped to values:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">dict_factory</span>(<span class="params">cursor, row</span>):</span><br><span class="line">    fields = [column[<span class="number">0</span>] <span class="keyword">for</span> column <span class="keyword">in</span> cursor.description]</span><br><span class="line">    <span class="keyword">return</span> &#123;key: value <span class="keyword">for</span> key, value <span class="keyword">in</span> <span class="built_in">zip</span>(fields, row)&#125;</span><br></pre></td></tr></table></figure><p>Using it, queries now return a dict instead of a tuple:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; con = sqlite3.connect(<span class="string">&quot;:memory:&quot;</span>)</span><br><span class="line">&gt;&gt;&gt; con.row_factory = dict_factory</span><br><span class="line">&gt;&gt;&gt; <span class="keyword">for</span> row <span class="keyword">in</span> con.execute(<span class="string">&quot;SELECT 1 AS a, 2 AS b&quot;</span>):</span><br><span class="line">...     <span class="built_in">print</span>(row)</span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>: 1, <span class="string">&#x27;b&#x27;</span>: 2&#125;</span><br></pre></td></tr></table></figure><h3 id="Standard-commands"><a href="#Standard-commands" class="headerlink" title="Standard commands"></a>Standard commands</h3><p><a href="https://www.codecademy.com/article/sql-commands">SQL Commands</a></p><h4 id="Data-definition"><a href="#Data-definition" class="headerlink" title="Data definition"></a>Data definition</h4><ul><li><a href="https://www.sqlite.org/lang_createtable.html">CREATE</a></li><li><a href="https://www.sqlite.org/lang_altertable.html">ALTER</a></li><li><a href="https://www.sqlite.org/lang_droptable.html">DROP</a></li></ul><h4 id="Data-manipulation"><a href="#Data-manipulation" class="headerlink" title="Data manipulation"></a>Data manipulation</h4><ul><li><a href="https://www.sqlite.org/lang_insert.html">INSERT</a></li><li><a href="https://www.sqlite.org/lang_update.html">UPDATE</a></li><li><a href="https://www.sqlite.org/lang_delete.html">DELETE</a></li></ul><h4 id="Data-query"><a href="#Data-query" class="headerlink" title="Data query"></a>Data query</h4><ul><li><a href="https://www.sqlite.org/lang_select.html">SELECT</a></li></ul><h3 id="Datatypes-in-SQLite"><a href="#Datatypes-in-SQLite" class="headerlink" title="Datatypes in SQLite"></a>Datatypes in SQLite</h3><ul><li>NULL. The value is a NULL value.</li><li>INTEGER. The value is a signed integer, stored in 0, 1, 2, 3, 4, 6, or 8 bytes depending on the magnitude of the value.</li><li>REAL. The value is a floating point value, stored as an 8-byte IEEE floating point number.</li><li>TEXT. The value is a text string, stored using the database encoding (UTF-8, UTF-16BE or UTF-16LE).</li><li>BLOB. The value is a blob of data, stored exactly as it was input.</li></ul><h2 id="Flask-SQLAlchemy"><a href="#Flask-SQLAlchemy" class="headerlink" title="Flask-SQLAlchemy"></a>Flask-SQLAlchemy</h2><p><a href="https://flask-sqlalchemy.palletsprojects.com/en/3.0.x/quickstart/">Flask-SQLAlchemy Documentation</a><br><a href="https://docs.sqlalchemy.org/tutorial/index.html">SQLAlchemy Tutorial</a></p><p>Flask-SQLAlchemy simplifies using SQLAlchemy by automatically handling creating, using, and cleaning up the SQLAlchemy objects you’d normally work with. While it adds a few useful features, it still works like SQLAlchemy.</p><h3 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -U Flask-SQLAlchemy</span><br></pre></td></tr></table></figure><h3 id="Configure-the-extension"><a href="#Configure-the-extension" class="headerlink" title="Configure the extension"></a>Configure the extension</h3><p>The only required Flask app config is the <code>SQLALCHEMY_DATABASE_URI</code> key. That is a connection string that tells SQLAlchemy what database to connect to.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"></span><br><span class="line"><span class="comment"># create the extension</span></span><br><span class="line">db = SQLAlchemy()</span><br><span class="line"><span class="comment"># create the app</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="comment"># configure the SQLite database, relative to the app instance folder</span></span><br><span class="line">app.config[<span class="string">&quot;SQLALCHEMY_DATABASE_URI&quot;</span>] = <span class="string">&quot;sqlite:///project.db&quot;</span></span><br><span class="line"><span class="comment"># initialize the app with the extension</span></span><br><span class="line">db.init_app(app)</span><br></pre></td></tr></table></figure><p>The <code>db</code> object gives you access to the <code>db.Model</code> class to define models, and the <code>db.session</code> to execute queries.</p><h3 id="Define-models"><a href="#Define-models" class="headerlink" title="Define models"></a>Define models</h3><p>Subclass <code>db.Model</code> to define a model class. The <code>db</code> object makes the names in <code>sqlalchemy</code> and <code>sqlalchemy.orm</code> available for convenience, such as <code>db.Column</code>. The model will generate a table name by converting the CamelCase class name to snake_case.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(db.Model):</span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    username = db.Column(db.String, unique=<span class="literal">True</span>, nullable=<span class="literal">False</span>)</span><br><span class="line">    email = db.Column(db.String)</span><br></pre></td></tr></table></figure><h3 id="Create-the-tables"><a href="#Create-the-tables" class="headerlink" title="Create the tables"></a>Create the tables</h3><p>After all models and tables are defined, call <code>SQLAlchemy.create_all()</code> to create the table schema in the database. This requires an application context. Since you’re not in a request at this point, create one manually.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> app.app_context():</span><br><span class="line">    db.create_all()</span><br></pre></td></tr></table></figure><p>If you define models in other modules, you must import them before calling <code>create_all</code>, otherwise SQLAlchemy will not know about them.</p><p><code>create_all</code> does not update tables if they are already in the database. If you change a model’s columns, use a migration library like Alembic with Flask-Alembic or Flask-Migrate to generate migrations that update the database schema.</p><h3 id="Query-the-data"><a href="#Query-the-data" class="headerlink" title="Query the data"></a>Query the data</h3><p>Within a Flask view or CLI command, you can use <code>db.session</code> to execute queries and modify model data.</p><p>SQLAlchemy automatically defines an <code>__init__</code> method for each model that assigns any keyword arguments to corresponding database columns and other attributes.</p><p><code>db.session.add(obj)</code> adds an object to the session, to be inserted. Modifying an object’s attributes updates the object. <code>db.session.delete(obj)</code> deletes an object. Remember to call <code>db.session.commit()</code> after modifying, adding, or deleting any data.</p><p><code>db.session.execute(db.select(...))</code> constructs a query to select data from the database. Building queries is the main feature of SQLAlchemy, so you’ll want to read its <a href="https://docs.sqlalchemy.org/tutorial/data_select.html">tutorial on select</a> to learn all about it. You’ll usually use the <code>Result.scalars()</code> method to get a list of results, or the <code>Result.scalar()</code> method to get a single result.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/users&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">user_list</span>():</span><br><span class="line">    users = db.session.execute(db.select(User).order_by(User.username)).scalars()</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;user/list.html&quot;</span>, users=users)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/users/create&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">user_create</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">        user = User(</span><br><span class="line">            username=request.form[<span class="string">&quot;username&quot;</span>],</span><br><span class="line">            email=request.form[<span class="string">&quot;email&quot;</span>],</span><br><span class="line">        )</span><br><span class="line">        db.session.add(user)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&quot;user_detail&quot;</span>, <span class="built_in">id</span>=user.<span class="built_in">id</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;user/create.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/user/&lt;int:id&gt;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">user_detail</span>(<span class="params"><span class="built_in">id</span></span>):</span><br><span class="line">    user = db.get_or_404(User, <span class="built_in">id</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;user/detail.html&quot;</span>, user=user)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/user/&lt;int:id&gt;/delete&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">user_delete</span>(<span class="params"><span class="built_in">id</span></span>):</span><br><span class="line">    user = db.get_or_404(User, <span class="built_in">id</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">        db.session.delete(user)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&quot;user_list&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;user/delete.html&quot;</span>, user=user)</span><br></pre></td></tr></table></figure><p>You may see uses of <code>Model.query</code> to build queries. This is an older interface for queries that is considered legacy in SQLAlchemy. Prefer using <code>db.session.execute(db.select(...))</code> instead.</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> web development </tag>
            
            <tag> flask </tag>
            
            <tag> backend </tag>
            
            <tag> sqlite </tag>
            
            <tag> sqlalchemy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day 62 of 100 Days of Code</title>
      <link href="/posts/Day-62-of-100-Days-of-Code/"/>
      <url>/posts/Day-62-of-100-Days-of-Code/</url>
      
        <content type="html"><![CDATA[<style>    #intro {        text-align: center;    }    #intro .title {        font-size: 1.5rem;        font-weight: 700;        color: rgb(31, 45, 61);    }    #intro .subtitle {        font-size: 1.2rem;        font-weight: 700;        color: rgb(31, 45, 61);    }</style><div id="intro">    <p class="title">Flask, WTForms, Bootstrap and CSV</h2>    <p class="subtitle">Learning Log: Day 62 of 100 Days of Code</h3>    <p>GitHub Repo: <a href="https://github.com/Freedempire/100_days_of_code.git">100_days_of_code</a></p></div><h2 id="Screenshots"><a href="#Screenshots" class="headerlink" title="Screenshots"></a>Screenshots</h2><p><img src="https://i.ibb.co/9t1BgyX/coffee-n-wifi1.jpg" alt="Webpage screenshot 1"><br><img src="https://i.ibb.co/hsrj0qT/coffee-n-wifi2.jpg" alt="Webpage screenshot 2"><br><img src="https://i.ibb.co/tqFC1Xj/coffee-n-wifi3.jpg" alt="Webpage screenshot 3"></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> web development </tag>
            
            <tag> flask </tag>
            
            <tag> backend </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day 61 of 100 Days of Code</title>
      <link href="/posts/Day-61-of-100-Days-of-Code/"/>
      <url>/posts/Day-61-of-100-Days-of-Code/</url>
      
        <content type="html"><![CDATA[<style>    #intro {        text-align: center;    }    #intro .title {        font-size: 1.5rem;        font-weight: 700;        color: rgb(31, 45, 61);    }    #intro .subtitle {        font-size: 1.2rem;        font-weight: 700;        color: rgb(31, 45, 61);    }</style><div id="intro">    <p class="title">Building Advanced Forms with Flask-WTForms</h2>    <p class="subtitle">Learning Log: Day 61 of 100 Days of Code</h3>    <p>GitHub Repo: <a href="https://github.com/Freedempire/100_days_of_code.git">100_days_of_code</a></p></div><h2 id="Flask-WTF"><a href="#Flask-WTF" class="headerlink" title="Flask-WTF"></a>Flask-WTF</h2><h3 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h3><p>Install or upgrade using pip:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -U Flask-WTF</span><br></pre></td></tr></table></figure><h3 id="Quick-start"><a href="#Quick-start" class="headerlink" title="Quick start"></a>Quick start</h3><h4 id="Creating-Forms"><a href="#Creating-Forms" class="headerlink" title="Creating Forms"></a>Creating Forms</h4><p>Flask-WTF provides your Flask application integration with WTForms. For example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_wtf <span class="keyword">import</span> FlaskForm</span><br><span class="line"><span class="keyword">from</span> wtforms <span class="keyword">import</span> StringField, SubmitField</span><br><span class="line"><span class="keyword">from</span> wtforms.validators <span class="keyword">import</span> DataRequired</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyForm</span>(<span class="title class_ inherited__">FlaskForm</span>):</span><br><span class="line">    name = StringField(<span class="string">&#x27;Name&#x27;</span>, validators=[DataRequired()])</span><br><span class="line">    submit = SubmitField(<span class="string">&#x27;Submit&#x27;</span>)</span><br></pre></td></tr></table></figure><p>In addition, a CSRF token hidden field is created automatically. You can render this in your template:</p><figure class="highlight jinja"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">action</span>=<span class="string">&quot;/&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-variable">&#123;&#123; form.csrf_token &#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-variable">&#123;&#123; form.name.label &#125;&#125;</span><span class="language-xml"> </span><span class="template-variable">&#123;&#123; form.name(size=20) &#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- &lt;input type=&quot;submit&quot; value=&quot;Go&quot;&gt; --&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-variable">&#123;&#123; form.submit &#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>If your form has multiple hidden fields, you can render them in one block using <code>hidden_tag()</code>.</p><figure class="highlight jinja"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">action</span>=<span class="string">&quot;/&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-variable">&#123;&#123; form.hidden_tag() &#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-variable">&#123;&#123; form.name.label &#125;&#125;</span><span class="language-xml"> </span><span class="template-variable">&#123;&#123; form.name(size=20) &#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Go&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="Validating-Forms"><a href="#Validating-Forms" class="headerlink" title="Validating Forms"></a>Validating Forms</h4><p>Validating the request in your view handlers:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/submit&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">submit</span>():</span><br><span class="line">    form = MyForm()</span><br><span class="line">    <span class="keyword">if</span> form.validate_on_submit():</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&#x27;/success&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;submit.html&#x27;</span>, form=form)</span><br></pre></td></tr></table></figure><p>Note that you don’t have to pass <code>request.form</code> to Flask-WTF; it will load automatically. And the convenient <code>validate_on_submit</code> will check if it is a POST request and if it is valid.</p><p>If your forms include validation, you’ll need to add to your template to display any error messages. Using the <code>form.name</code> field from the example above, that would look like this:</p><figure class="highlight jinja"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> form.name.errors %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;errors&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> error <span class="keyword">in</span> form.name.errors %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><span class="template-variable">&#123;&#123; error &#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">endfor</span></span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span></span><br></pre></td></tr></table></figure><h4 id="Validators"><a href="#Validators" class="headerlink" title="Validators"></a>Validators</h4><p>A <a href="https://wtforms.readthedocs.io/en/3.0.x/validators/#module-wtforms.validators">validator</a> simply takes an input, verifies it fulfills some criterion, such as a maximum length for a string and returns. Or, if the validation fails, raises a <code>ValidationError</code>.</p><h2 id="Bootstrap-Flask"><a href="#Bootstrap-Flask" class="headerlink" title="Bootstrap-Flask"></a>Bootstrap-Flask</h2><h3 id="Installation-1"><a href="#Installation-1" class="headerlink" title="Installation"></a>Installation</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install bootstrap-flask</span><br></pre></td></tr></table></figure><p>This project can’t work with Flask-Bootstrap in the same Python environment. You need to uninstall Flask-Bootstrap and then reinstall this project:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip uninstall flask-bootstrap bootstrap-flask</span><br><span class="line">pip install bootstrap-flask</span><br></pre></td></tr></table></figure><h3 id="Initialization"><a href="#Initialization" class="headerlink" title="Initialization"></a>Initialization</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_bootstrap <span class="keyword">import</span> Bootstrap4</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">bootstrap = Bootstrap4(app)</span><br></pre></td></tr></table></figure><p>If you want to use Bootstrap 5, import and instantiate the Bootstrap5 class instead.</p><h3 id="Resources-Helpers"><a href="#Resources-Helpers" class="headerlink" title="Resources Helpers"></a>Resources Helpers</h3><p>Bootstrap-Flask provides two helper functions to load Bootstrap resources in the template: <code>bootstrap.load_css()</code> and <code>bootstrap.load_js()</code>.</p><p>Call it in your base template, for example:</p><figure class="highlight jinja"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">....</span></span><br><span class="line"><span class="language-xml"></span><span class="template-variable">&#123;&#123; bootstrap.load_css() &#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">...</span></span><br><span class="line"><span class="language-xml"></span><span class="template-variable">&#123;&#123; bootstrap.load_js() &#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="Starter-template"><a href="#Starter-template" class="headerlink" title="Starter template"></a>Starter template</h3><p>For reasons of flexibility, Bootstrap-Flask doesn’t include built-in base templates (this may change in the future). For now, you have to create a base template yourself. Be sure to use an HTML5 doctype and include a viewport meta tag for proper responsive behaviors. Here’s an example base template:</p><figure class="highlight jinja"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        </span><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> head %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!-- Required meta tags --&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1, shrink-to-fit=no&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        </span><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> styles %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">            <span class="comment">&lt;!-- Bootstrap CSS --&gt;</span></span></span><br><span class="line"><span class="language-xml">            </span><span class="template-variable">&#123;&#123; bootstrap.load_css() &#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        </span><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">title</span>&gt;</span></span><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> title %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> %&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        </span><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!-- Your page content --&gt;</span></span></span><br><span class="line"><span class="language-xml">        </span><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> content %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        </span><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> scripts %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">            <span class="comment">&lt;!-- Optional JavaScript --&gt;</span></span></span><br><span class="line"><span class="language-xml">            </span><span class="template-variable">&#123;&#123; bootstrap.load_js() &#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        </span><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>Use this in your templates folder (suggested names are base.html or layout.html etc.), and inherit it in child templates.</p><h3 id="Macros"><a href="#Macros" class="headerlink" title="Macros"></a>Macros</h3><table><thead><tr><th>Macro</th><th>Templates Path</th><th>Description</th></tr></thead><tbody><tr><td>render_field()</td><td>bootstrap4&#x2F;form.html</td><td>Render a WTForms form field</td></tr><tr><td>render_form()</td><td>bootstrap4&#x2F;form.html</td><td>Render a WTForms form</td></tr><tr><td>render_form_row()</td><td>bootstrap4&#x2F;form.html</td><td>Render a row of a grid form</td></tr><tr><td>render_hidden_errors()</td><td>bootstrap4&#x2F;form.html</td><td>Render error messages for hidden form field</td></tr><tr><td>render_pager()</td><td>bootstrap4&#x2F;pagination.html</td><td>Render a basic Flask-SQLAlchemy pagniantion</td></tr><tr><td>render_pagination()</td><td>bootstrap4&#x2F;pagination.html</td><td>Render a standard Flask-SQLAlchemy pagination</td></tr><tr><td>render_nav_item()</td><td>bootstrap4&#x2F;nav.html</td><td>Render a navigation item</td></tr><tr><td>render_breadcrumb_item()</td><td>bootstrap4&#x2F;nav.html</td><td>Render a breadcrumb item</td></tr><tr><td>render_static()</td><td>bootstrap4&#x2F;utils.html</td><td>Render a resource reference code (i.e. <code>&lt;link&gt;</code>, <code>&lt;script&gt;</code>)</td></tr><tr><td>render_messages()</td><td>bootstrap4&#x2F;utils.html</td><td>Render flashed messages send by flash() function</td></tr><tr><td>render_icon()</td><td>bootstrap4&#x2F;utils.html</td><td>Render a Bootstrap icon</td></tr><tr><td>render_table()</td><td>bootstrap4&#x2F;table.html</td><td>Render a table with given data</td></tr></tbody></table><p>How to use these macros? It’s quite simple, just import them from the corresponding path and call them like any other macro:</p><figure class="highlight jinja"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name">from</span> &#x27;bootstrap4/form.html&#x27; import render_form %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-variable">&#123;&#123; render_form(form) &#125;&#125;</span></span><br></pre></td></tr></table></figure><p>Notice we import Bootstrap 4 macros from the path <code>bootstrap4/...</code>, if you are using Bootstrap 5, import them from the <code>bootstrap5/...</code> path instead.</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> web development </tag>
            
            <tag> flask </tag>
            
            <tag> backend </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day 60 of 100 Days of Code</title>
      <link href="/posts/Day-60-of-100-Days-of-Code/"/>
      <url>/posts/Day-60-of-100-Days-of-Code/</url>
      
        <content type="html"><![CDATA[<style>    #intro {        text-align: center;    }    #intro .title {        font-size: 1.5rem;        font-weight: 700;        color: rgb(31, 45, 61);    }    #intro .subtitle {        font-size: 1.2rem;        font-weight: 700;        color: rgb(31, 45, 61);    }</style><div id="intro">    <p class="title">Make POST Requests with Flask and HTML Forms</h2>    <p class="subtitle">Learning Log: Day 60 of 100 Days of Code</h3>    <p>GitHub Repo: <a href="https://github.com/Freedempire/100_days_of_code.git">100_days_of_code</a></p></div><h2 id="Flask"><a href="#Flask" class="headerlink" title="Flask"></a>Flask</h2><h3 id="HTTP-Methods"><a href="#HTTP-Methods" class="headerlink" title="HTTP Methods"></a>HTTP Methods</h3><p>Web applications use different HTTP methods when accessing URLs. By default, a route only answers to <code>GET</code> requests. You can use the methods argument of the <code>route()</code> decorator to handle different HTTP methods.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> do_the_login()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> show_the_login_form()</span><br></pre></td></tr></table></figure><p>The example above keeps all methods for the route within one function, which can be useful if each part uses some common data.</p><p>You can also separate views for different methods into different functions. Flask provides a shortcut for decorating such routes with <code>get()</code>, <code>post()</code>, etc. for each common HTTP method.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&#x27;/login&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login_get</span>():</span><br><span class="line">    <span class="keyword">return</span> show_the_login_form()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">&#x27;/login&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login_post</span>():</span><br><span class="line">    <span class="keyword">return</span> do_the_login()</span><br></pre></td></tr></table></figure><p>If <code>GET</code> is present, Flask automatically adds support for the <code>HEAD</code> method and handles <code>HEAD</code> requests according to the HTTP RFC. Likewise, <code>OPTIONS</code> is automatically implemented for you.</p><h3 id="The-Request-Object"><a href="#The-Request-Object" class="headerlink" title="The Request Object"></a>The Request Object</h3><p>First of all you have to import it from the <code>flask</code> module:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br></pre></td></tr></table></figure><p>The current request method is available by using the <code>method</code> attribute. To access form data (data transmitted in a <code>POST</code> or <code>PUT</code> request) you can use the <code>form</code> attribute.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    error = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> valid_login(request.form[<span class="string">&#x27;username&#x27;</span>],</span><br><span class="line">                       request.form[<span class="string">&#x27;password&#x27;</span>]):</span><br><span class="line">            <span class="keyword">return</span> log_the_user_in(request.form[<span class="string">&#x27;username&#x27;</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            error = <span class="string">&#x27;Invalid username/password&#x27;</span></span><br><span class="line">    <span class="comment"># the code below is executed if the request method</span></span><br><span class="line">    <span class="comment"># was GET or the credentials were invalid</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;login.html&#x27;</span>, error=error)</span><br></pre></td></tr></table></figure><p>What happens if the key does not exist in the <code>form</code> attribute? In that case a special <code>KeyError</code> is raised. You can catch it like a standard <code>KeyError</code> but if you don’t do that, a HTTP 400 Bad Request error page is shown instead. So for many situations you don’t have to deal with that problem.</p><p>To access parameters submitted in the URL (<code>?key=value</code>) you can use the args attribute:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">searchword = request.args.get(<span class="string">&#x27;key&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>We recommend accessing URL parameters with <code>get</code> or by catching the <code>KeyError</code> because users might change the URL and presenting them a 400 bad request page in that case is not user friendly.</p><p>For a full list of methods and attributes of the request object, head over to the <a href="https://flask.palletsprojects.com/en/2.3.x/api/#flask.Request">Request</a> documentation.</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> web development </tag>
            
            <tag> flask </tag>
            
            <tag> backend </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day 59 of 100 Days of Code</title>
      <link href="/posts/Day-59-of-100-Days-of-Code/"/>
      <url>/posts/Day-59-of-100-Days-of-Code/</url>
      
        <content type="html"><![CDATA[<style>    #intro {        text-align: center;    }    #intro .title {        font-size: 1.5rem;        font-weight: 700;        color: rgb(31, 45, 61);    }    #intro .subtitle {        font-size: 1.2rem;        font-weight: 700;        color: rgb(31, 45, 61);    }</style><div id="intro">    <p class="title">Blog Capstone Project Part 2 - Adding Styling</h2>    <p class="subtitle">Learning Log: Day 59 of 100 Days of Code</h3>    <p>GitHub Repo: <a href="https://github.com/Freedempire/100_days_of_code.git">100_days_of_code</a></p></div><h2 id="Screenshots"><a href="#Screenshots" class="headerlink" title="Screenshots"></a>Screenshots</h2><p><img src="https://i.ibb.co/WH3RpM8/bootstrap-blog1.jpg" alt="Screenshot 1"><br><img src="https://i.ibb.co/fX6wHvv/bootstrap-blog2.jpg" alt="Screenshot 2"><br><img src="https://i.ibb.co/q58Hs1b/bootstrap-blog3.jpg" alt="Screenshot 3"></p><h2 id="Flask"><a href="#Flask" class="headerlink" title="Flask"></a>Flask</h2><h3 id="Static-Files"><a href="#Static-Files" class="headerlink" title="Static Files"></a>Static Files</h3><p>To generate URLs for static files, use the special <code>&#39;static&#39;</code> endpoint name:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url_for(<span class="string">&#x27;static&#x27;</span>, filename=<span class="string">&#x27;style.css&#x27;</span>)</span><br></pre></td></tr></table></figure><p>The file has to be stored on the filesystem as <code>static/style.css</code>.</p><h2 id="Jinja"><a href="#Jinja" class="headerlink" title="Jinja"></a>Jinja</h2><h3 id="Template-Inheritance"><a href="#Template-Inheritance" class="headerlink" title="Template Inheritance"></a>Template Inheritance</h3><p>Template inheritance allows you to build a base “skeleton” template that contains all the common elements of your site and defines <em>blocks</em> that child templates can override.</p><h4 id="Base-Template"><a href="#Base-Template" class="headerlink" title="Base Template"></a>Base Template</h4><p>This template, which we’ll call <code>base.html</code>, defines a simple HTML skeleton document that you might use for a simple two-column page. It’s the job of “child” templates to fill the empty blocks with content:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    &#123;% block head %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>&#123;% block title %&#125;&#123;% endblock %&#125; - My Webpage<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    &#123;% endblock %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;content&quot;</span>&gt;</span>&#123;% block content %&#125;&#123;% endblock %&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;footer&quot;</span>&gt;</span></span><br><span class="line">        &#123;% block footer %&#125;</span><br><span class="line">        <span class="symbol">&amp;copy;</span> Copyright 2008 by <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://domain.invalid/&quot;</span>&gt;</span>you<span class="tag">&lt;/<span class="name">a</span>&gt;</span>.</span><br><span class="line">        &#123;% endblock %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>In this example, the <code>&#123;% block %&#125;</code> tags define four blocks that child templates can fill in. All the block tag does is tell the template engine that a child template may override those placeholders in the template.</p><p>block tags can be inside other blocks such as if, but they will <em>always</em> be executed regardless of if the if block is actually rendered.</p><h4 id="Child-Template"><a href="#Child-Template" class="headerlink" title="Child Template"></a>Child Template</h4><p>A child template might look like this:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &quot;base.html&quot; %&#125;</span><br><span class="line">&#123;% block title %&#125;Index&#123;% endblock %&#125;</span><br><span class="line">&#123;% block head %&#125;</span><br><span class="line">    &#123;&#123; super() &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.important</span> &#123; <span class="attribute">color</span>: <span class="number">#336699</span>; &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Index<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;important&quot;</span>&gt;</span></span><br><span class="line">      Welcome to my awesome homepage.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p>The <code>&#123;% extends %&#125;</code> tag is the key here. It tells the template engine that this template “extends” another template. When the template system evaluates this template, it first locates the parent. The extends tag should be the <em>first</em> tag in the template. Everything before it is printed out normally and may cause confusion. Also a block will always be filled in regardless of whether the surrounding condition is evaluated to be true or false.</p><p>The filename of the template depends on the template loader. For example, the <strong>FileSystemLoader</strong> allows you to access other templates by giving the filename. You can access templates in subdirectories with a slash:</p><figure class="highlight jinja"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">extends</span></span> &quot;layout/default.html&quot; %&#125;</span></span><br></pre></td></tr></table></figure><p>But this behavior can depend on the application embedding Jinja. Note that since the child template doesn’t define the footer block, the value from the parent template is used instead.</p><p>You can’t define multiple <code>&#123;% block %&#125;</code> tags with the same name in the same template. This limitation exists because a block tag works in “both” directions. That is, a block tag doesn’t just provide a placeholder to fill - it also defines the content that fills the placeholder in the parent. If there were two similarly-named <code>&#123;% block %&#125;</code> tags in a template, that template’s parent wouldn’t know which one of the blocks’ content to use.</p><p>If you want to print a block multiple times, you can, however, use the special <em>self</em> variable and call the block with that name:</p><figure class="highlight jinja"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span></span><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> title %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> %&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="template-variable">&#123;&#123; self.title() &#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> body %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> %&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> web development </tag>
            
            <tag> flask </tag>
            
            <tag> backend </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day 58 of 100 Days of Code</title>
      <link href="/posts/Day-58-of-100-Days-of-Code/"/>
      <url>/posts/Day-58-of-100-Days-of-Code/</url>
      
        <content type="html"><![CDATA[<style>    #intro {        text-align: center;    }    #intro .title {        font-size: 1.5rem;        font-weight: 700;        color: rgb(31, 45, 61);    }    #intro .subtitle {        font-size: 1.2rem;        font-weight: 700;        color: rgb(31, 45, 61);    }</style><div id="intro">    <p class="title">Web Foundation Bootstrap</h2>    <p class="subtitle">Learning Log: Day 58 of 100 Days of Code</h3>    <p>GitHub Repo: <a href="https://github.com/Freedempire/100_days_of_code.git">100_days_of_code</a></p></div><h2 id="CSS-framework"><a href="#CSS-framework" class="headerlink" title="CSS framework"></a>CSS framework</h2><p>A CSS framework comprises several CSS stylesheets ready for use by web developers and designers.</p><p>With a CSS framework, the user has a completed CSS stylesheet, and they only have to code the HTML with accurate classes, structure, and IDs to set up a web page. The framework already has classes built-in for common website elements – footer, slider, navigation bar, hamburger menu, column-based layouts, etc.</p><h3 id="Advantages-of-using-CSS-frameworks"><a href="#Advantages-of-using-CSS-frameworks" class="headerlink" title="Advantages of using CSS frameworks"></a>Advantages of using CSS frameworks</h3><ul><li>Developers and designers can use CSS frameworks to implement various advanced features and visual elements on a website – forms, different buttons, navbars, breadcrumbs, and even clean symmetrical layouts.</li><li>CSS frameworks make creating websites compatible with multiple browsers and browser versions simple.</li><li>Since these frameworks have ready-to-use stylesheets, using them allows faster and more convenient web development. Developers can quickly generate a user-friendly and visually appealing UI that can be modified throughout a project without starting from scratch.</li></ul><h3 id="Top-5-CSS-frameworks"><a href="#Top-5-CSS-frameworks" class="headerlink" title="Top 5 CSS frameworks"></a>Top 5 CSS frameworks</h3><ol><li>Bootstrap</li><li>Tailwind CSS</li><li>Foundation</li><li>Bulma</li><li>Skeleton</li></ol><h2 id="Bootstrap"><a href="#Bootstrap" class="headerlink" title="Bootstrap"></a>Bootstrap</h2><h3 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h3><h4 id="Download"><a href="#Download" class="headerlink" title="Download"></a>Download</h4><p><a href="https://github.com/twbs/bootstrap/releases/download/v5.3.0/bootstrap-5.3.0-dist.zip">Download</a> ready-to-use compiled code for Bootstrap v5.3.0 to easily drop into your project, which includes:</p><ul><li>Compiled and minified CSS bundles (see CSS files comparison)</li><li>Compiled and minified JavaScript plugins (see JS files comparison)</li></ul><h4 id="CDN-via-jsDelivr"><a href="#CDN-via-jsDelivr" class="headerlink" title="CDN via jsDelivr"></a>CDN via jsDelivr</h4><p>Skip the download with jsDelivr to deliver cached version of Bootstrap’s compiled CSS and JS to your project.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">integrity</span>=<span class="string">&quot;sha384-9ndCyUaIbzAi2FUVXJi0CjmCapSmO7SnpJef0486qhLnuZ2cdeRhO02iuK6FUUVM&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js&quot;</span> <span class="attr">integrity</span>=<span class="string">&quot;sha384-geWF76RCwLtnZ8qwWowPQNguL3RmwHVBC9FhGdlKrxdiJJigb/j/68SIy3Te4Bkz&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Package-managers"><a href="#Package-managers" class="headerlink" title="Package managers"></a>Package managers</h4><h5 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h5><p>Install Bootstrap in your Node.js powered apps with the npm package:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install bootstrap@5.3.0</span><br></pre></td></tr></table></figure><h5 id="yarn"><a href="#yarn" class="headerlink" title="yarn"></a>yarn</h5><p>Install Bootstrap in your Node.js powered apps with the yarn package:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add bootstrap@5.3.0</span><br></pre></td></tr></table></figure><h3 id="Quick-start"><a href="#Quick-start" class="headerlink" title="Quick start"></a>Quick start</h3><ol><li><p>Create a new index.html file in your project root. Include the <code>&lt;meta name=&quot;viewport&quot;&gt;</code> tag as well for proper responsive behavior in mobile devices.</p></li><li><p>Include Bootstrap’s CSS and JS. Place the <code>&lt;link&gt;</code> tag in the <code>&lt;head&gt;</code> for our CSS, and the <code>&lt;script&gt;</code> tag for our JavaScript bundle (including Popper for positioning dropdowns, poppers, and tooltips) before the closing <code>&lt;/body&gt;</code>.<br>You can also include Popper and our JS separately. If you don’t plan to use dropdowns, popovers, or tooltips, save some kilobytes by not including Popper.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js&quot;</span> <span class="attr">integrity</span>=<span class="string">&quot;sha384-I7E8VVD/ismYTF4hNIPjVp/Zjvgyol6VFvRkX/vR+Vc4jQkC+hVqc2pM8ODewa9r&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.min.js&quot;</span> <span class="attr">integrity</span>=<span class="string">&quot;sha384-fbbOQedDUMZZ5KreZpsbe1LCZPVmfTnH7ois6mU1QK+m14rQ1l2bGBq41eYeM/fS&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Now you can start building with Bootstrap by creating your own <a href="https://getbootstrap.com/docs/5.3/layout/grid/">layout</a>, adding dozens of <a href="https://getbootstrap.com/docs/5.3/components/buttons/">components</a>, and utilizing <a href="https://getbootstrap.com/docs/5.3/examples/">our official examples</a>.</p></li></ol><h3 id="Next-steps"><a href="#Next-steps" class="headerlink" title="Next steps"></a>Next steps</h3><ul><li>Some important <a href="https://getbootstrap.com/docs/5.3/getting-started/introduction/#important-globals">global environment settings</a> that Bootstrap utilizes.</li><li>What’s included in Bootstrap in our <a href="https://getbootstrap.com/docs/5.3/getting-started/contents/">contents section</a> and the list of <a href="https://getbootstrap.com/docs/5.3/getting-started/introduction/#js-components">components that require JavaScript</a>.</li><li>Consider building with Bootstrap by <a href="https://getbootstrap.com/docs/5.3/getting-started/download/#package-managers">including the source files via package manager</a>.</li><li>To use Bootstrap as a module with <code>&lt;script type=&quot;module&quot;&gt;</code>, refer to our <a href="https://getbootstrap.com/docs/5.3/getting-started/javascript/#using-bootstrap-as-a-module">using Bootstrap as a module</a> section.</li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> web development </tag>
            
            <tag> flask </tag>
            
            <tag> backend </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day 57 of 100 Days of Code</title>
      <link href="/posts/Day-57-of-100-Days-of-Code/"/>
      <url>/posts/Day-57-of-100-Days-of-Code/</url>
      
        <content type="html"><![CDATA[<style>    #intro {        text-align: center;    }    #intro .title {        font-size: 1.5rem;        font-weight: 700;        color: rgb(31, 45, 61);    }    #intro .subtitle {        font-size: 1.2rem;        font-weight: 700;        color: rgb(31, 45, 61);    }</style><div id="intro">    <p class="title">Templating with Jinja in Flask Applications</h2>    <p class="subtitle">Learning Log: Day 57 of 100 Days of Code</h3>    <p>GitHub Repo: <a href="https://github.com/Freedempire/100_days_of_code.git">100_days_of_code</a></p></div><h2 id="Jinja"><a href="#Jinja" class="headerlink" title="Jinja"></a>Jinja</h2><p>A Jinja template is simply a text file. Jinja can generate any text-based format (HTML, XML, CSV, LaTeX, etc.). A Jinja template <em>doesn’t</em> need to have a specific extension: <code>.html</code>, <code>.xml</code>, or any other extension is just fine.</p><p>A template contains <strong>variables</strong> and&#x2F;or <strong>expressions</strong>, which get replaced with values when a template is <em>rendered</em>; and <strong>tags</strong>, which control the logic of the template. The template syntax is heavily inspired by Django and Python.</p><h3 id="A-minimal-example"><a href="#A-minimal-example" class="headerlink" title="A minimal example"></a>A minimal example</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>My Webpage<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;navigation&quot;</span>&gt;</span></span><br><span class="line">    &#123;% for item in navigation %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; item.href &#125;&#125;&quot;</span>&gt;</span>&#123;&#123; item.caption &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>My Webpage<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    &#123;&#123; a_variable &#125;&#125;</span><br><span class="line"></span><br><span class="line">    &#123;# a comment #&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>The example shows the default configuration settings. An application developer can change the syntax configuration from <code>&#123;% foo %&#125;</code> to <code>&lt;% foo %&gt;</code>, or something similar.</p><h3 id="Default-Jinja-delimiters"><a href="#Default-Jinja-delimiters" class="headerlink" title="Default Jinja delimiters"></a>Default Jinja delimiters</h3><ul><li><code>&#123;% ... %&#125;</code> for Statements</li><li><code>&#123;&#123; ... &#125;&#125;</code> for Expressions to print to the template output</li><li>&#96;&#96; for Comments not included in the template output</li></ul><h3 id="Variables"><a href="#Variables" class="headerlink" title="Variables"></a>Variables</h3><p>Template variables are defined by the context dictionary passed to the template.</p><p>You can use a dot (<code>.</code>) to access attributes of a variable in addition to the standard Python <code>__getitem__</code> “subscript” syntax (<code>[]</code>).</p><p>The following lines do the same thing:</p><figure class="highlight jinja"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-variable">&#123;&#123; foo.bar &#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-variable">&#123;&#123; foo[&#x27;bar&#x27;] &#125;&#125;</span></span><br></pre></td></tr></table></figure><p>If a variable or attribute does not exist, you will get back an <em>undefined</em> value. What you can do with that kind of value depends on the application configuration: the default behavior is to evaluate to an empty string if printed or iterated over, and to fail for every other operation.</p><h3 id="Filters"><a href="#Filters" class="headerlink" title="Filters"></a>Filters</h3><p>Variables can be modified by filters. Filters are separated from the variable by a pipe symbol (<code>|</code>) and may have optional arguments in parentheses. Multiple filters can be chained. The output of one filter is applied to the next.</p><p>For example, <code>&#123;&#123; name|striptags|title &#125;&#125;</code> will remove all HTML Tags from variable name and title-case the output (<code>title(striptags(name))</code>).</p><p>The <a href="https://jinja.palletsprojects.com/en/3.0.x/templates/#builtin-filters">List of Builtin Filters</a> describes all the builtin filters.</p><h3 id="Escaping"><a href="#Escaping" class="headerlink" title="Escaping"></a>Escaping</h3><p>It is sometimes necessary to have Jinja ignore parts it would otherwise handle as variables or blocks.</p><p>The easiest way to output a literal variable delimiter is by using a variable expression <code>&#123;&#123; '&#123;&#123;' &#125;&#125;</code>.</p><p>For bigger sections, it makes sense to mark a block raw.</p><figure class="highlight jinja"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name">raw</span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> item <span class="keyword">in</span> seq %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><span class="template-variable">&#123;&#123; item &#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">endfor</span></span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">endraw</span> %&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> web development </tag>
            
            <tag> flask </tag>
            
            <tag> backend </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day 56 of 100 Days of Code</title>
      <link href="/posts/Day-56-of-100-Days-of-Code/"/>
      <url>/posts/Day-56-of-100-Days-of-Code/</url>
      
        <content type="html"><![CDATA[<style>    #intro {        text-align: center;    }    #intro .title {        font-size: 1.5rem;        font-weight: 700;        color: rgb(31, 45, 61);    }    #intro .subtitle {        font-size: 1.2rem;        font-weight: 700;        color: rgb(31, 45, 61);    }</style><div id="intro">    <p class="title">Rendering HTML/Static files and Using Website Templates</h2>    <p class="subtitle">Learning Log: Day 56 of 100 Days of Code</h3>    <p>GitHub Repo: <a href="https://github.com/Freedempire/100_days_of_code.git">100_days_of_code</a></p></div><h2 id="Flask"><a href="#Flask" class="headerlink" title="Flask"></a>Flask</h2><h3 id="Static-Files"><a href="#Static-Files" class="headerlink" title="Static Files"></a>Static Files</h3><p>Dynamic web applications also need static files. That’s usually where the CSS and JavaScript files are coming from. Just create a folder called <code>static</code> in your package or next to your module and it will be available at <code>/static</code> on the application.</p><p>To generate URLs for static files, use the special <code>&#39;static&#39;</code> endpoint name:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url_for(<span class="string">&#x27;static&#x27;</span>, filename=<span class="string">&#x27;style.css&#x27;</span>)</span><br></pre></td></tr></table></figure><p>The file has to be stored on the filesystem as <code>static/style.css</code>.</p><h3 id="Rendering-Templates"><a href="#Rendering-Templates" class="headerlink" title="Rendering Templates"></a>Rendering Templates</h3><p>Generating HTML from within Python is not fun, and actually pretty cumbersome because you have to do the HTML escaping on your own to keep the application secure. Because of that Flask configures the Jinja2 template engine for you automatically.</p><p>Templates can be used to generate any type of text file. For web applications, you’ll primarily be generating HTML pages, but you can also generate markdown, plain text for emails, and anything else.</p><p>To render a template you can use the <code>render_template()</code> method. All you have to do is provide the name of the template and the variables you want to pass to the template engine as <em>keyword arguments</em>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> render_template</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/hello/&#x27;</span></span>)</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/hello/&lt;name&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>(<span class="params">name=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;hello.html&#x27;</span>, name=name)</span><br></pre></td></tr></table></figure><p>Flask will look for templates in the templates folder. So if your application is a module, this folder is next to that module, if it’s a package it’s actually inside your package.</p><p>For templates you can use the full power of Jinja2 templates. Head over to the official <a href="https://jinja.palletsprojects.com/templates/">Jinja2 Template Documentation</a> for more information.</p><p>Here is an example template:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello from Flask<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">&#123;% if name %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello &#123;&#123; name &#125;&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, World!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>Inside templates you also have access to the config, request, session and g objects as well as the <code>url_for()</code> and <code>get_flashed_messages()</code> functions.</p><p>Templates are especially useful if inheritance is used. If you want to know how that works, see <a href="https://flask.palletsprojects.com/en/2.3.x/patterns/templateinheritance/">Template Inheritance</a>. Basically template inheritance makes it possible to keep certain elements on each page (like header, navigation and footer).</p><p>Automatic escaping is enabled, so if name contains HTML it will be escaped automatically. If you can trust a variable and you know that it will be safe HTML (for example because it came from a module that converts wiki markup to HTML) you can mark it as safe by using the Markup class or by using the <code>|safe</code> filter in the template.</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> web development </tag>
            
            <tag> flask </tag>
            
            <tag> backend </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day 55 of 100 Days of Code</title>
      <link href="/posts/Day-55-of-100-Days-of-Code/"/>
      <url>/posts/Day-55-of-100-Days-of-Code/</url>
      
        <content type="html"><![CDATA[<style>    #intro {        text-align: center;    }    #intro .title {        font-size: 1.5rem;        font-weight: 700;        color: rgb(31, 45, 61);    }    #intro .subtitle {        font-size: 1.2rem;        font-weight: 700;        color: rgb(31, 45, 61);    }</style><div id="intro">    <p class="title">HTML & URL Parsing in Flask</h2>    <p class="subtitle">Learning Log: Day 55 of 100 Days of Code</h3>    <p>GitHub Repo: <a href="https://github.com/Freedempire/100_days_of_code.git">100_days_of_code</a></p></div><h2 id="Flask"><a href="#Flask" class="headerlink" title="Flask"></a>Flask</h2><h3 id="A-minimal-application"><a href="#A-minimal-application" class="headerlink" title="A minimal application"></a>A minimal application</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">home</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Index&#x27;</span></span><br><span class="line"></span><br><span class="line">app.run()</span><br></pre></td></tr></table></figure><p>To run the application in CLI, use the <code>flask</code> command or <code>python -m flask</code>. You need to tell the Flask where your application is with the –app option.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flask --app hello run</span><br></pre></td></tr></table></figure><p>As a shortcut, if the file is named <code>app.py</code> or <code>wsgi.py</code>, you don’t have to use <code>--app</code>.</p><h3 id="Externally-visible-server"><a href="#Externally-visible-server" class="headerlink" title="Externally visible server"></a>Externally visible server</h3><p>If you have the debugger disabled or trust the users on your network, you can make the server publicly available simply by adding <code>--host=0.0.0.0</code> to the command line:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flask run --host=0.0.0.0</span><br></pre></td></tr></table></figure><p>This tells your operating system to listen on all public IPs.</p><h3 id="Debug-mode"><a href="#Debug-mode" class="headerlink" title="Debug mode"></a>Debug mode</h3><p>To enable debug mode, use the <code>--debug</code> option.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flask --app hello run --debug</span><br></pre></td></tr></table></figure><h3 id="HTML-escaping"><a href="#HTML-escaping" class="headerlink" title="HTML escaping"></a>HTML escaping</h3><p>When returning HTML (the default response type in Flask), any user-provided values rendered in the output must be <em>escaped</em> to protect from injection attacks. HTML templates rendered with <strong>Jinja</strong> will do this automatically.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> markupsafe <span class="keyword">import</span> escape</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&lt;name&gt;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;Hello, <span class="subst">&#123;escape(name)&#125;</span>!&quot;</span></span><br></pre></td></tr></table></figure><h3 id="Routing"><a href="#Routing" class="headerlink" title="Routing"></a>Routing</h3><p>Use the <code>route()</code> decorator to bind a function to a URL.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Index Page&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/hello&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello, World&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="Variable-rules"><a href="#Variable-rules" class="headerlink" title="Variable rules"></a>Variable rules</h3><p>You can add variable sections to a URL by marking sections with <code>&lt;variable_name&gt;</code>. Your function then receives the <code>&lt;variable_name&gt;</code> as a <em>keyword argument</em>. Optionally, you can use a converter to specify the type of the argument like <code>&lt;converter:variable_name&gt;</code>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> markupsafe <span class="keyword">import</span> escape</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/user/&lt;username&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_user_profile</span>(<span class="params">username</span>):</span><br><span class="line">    <span class="comment"># show the user profile for that user</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&#x27;User <span class="subst">&#123;escape(username)&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/post/&lt;int:post_id&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_post</span>(<span class="params">post_id</span>):</span><br><span class="line">    <span class="comment"># show the post with the given id, the id is an integer</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&#x27;Post <span class="subst">&#123;post_id&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/path/&lt;path:subpath&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_subpath</span>(<span class="params">subpath</span>):</span><br><span class="line">    <span class="comment"># show the subpath after /path/</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&#x27;Subpath <span class="subst">&#123;escape(subpath)&#125;</span>&#x27;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>Converter type</th><th>Explanation</th></tr></thead><tbody><tr><td>string</td><td>(default) accepts any text without a slash</td></tr><tr><td>int</td><td>accepts positive integers</td></tr><tr><td>float</td><td>accepts positive floating point values</td></tr><tr><td>path</td><td>like string but also accepts slashes</td></tr><tr><td>uuid</td><td>accepts UUID strings</td></tr></tbody></table><h2 id="Decorators-in-Python"><a href="#Decorators-in-Python" class="headerlink" title="Decorators in Python"></a>Decorators in Python</h2><p>Decorators allow programmers to modify the behavior of a function or class without permanently modifying it.</p><h3 id="First-class-objects"><a href="#First-class-objects" class="headerlink" title="First class objects"></a>First class objects</h3><p>In Python, functions are first class objects.</p><p>Properties of first class functions:</p><ul><li>A function is an instance of the Object type.</li><li>You can store the function in a variable.</li><li>You can pass the function as a parameter to another function.</li><li>You can return the function from a function.</li><li>You can store them in data structures such as hash tables, lists, etc.</li></ul><h3 id="Decorators"><a href="#Decorators" class="headerlink" title="Decorators"></a>Decorators</h3><p>In Decorators, functions are taken as the argument into another function and then called inside the wrapper function.</p><p>Syntax for Decorator:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@gfg_decorator</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_decorator</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Gfg&quot;</span>)</span><br></pre></td></tr></table></figure><p>Above code is equivalent to:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hello_decorator</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Gfg&quot;</span>)</span><br><span class="line">    </span><br><span class="line">hello_decorator = gfg_decorator(hello_decorator)</span><br></pre></td></tr></table></figure><h3 id="Decorate-a-function-with-arguments"><a href="#Decorate-a-function-with-arguments" class="headerlink" title="Decorate a function with arguments"></a>Decorate a function with arguments</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hello_decorator</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner1</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;before Execution&quot;</span>)</span><br><span class="line">        <span class="comment"># getting the returned value</span></span><br><span class="line">        returned_value = func(*args, **kwargs)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;after Execution&quot;</span>)</span><br><span class="line">        <span class="comment"># returning the value to the original frame</span></span><br><span class="line">        <span class="keyword">return</span> returned_value</span><br><span class="line">    <span class="keyword">return</span> inner1</span><br><span class="line"></span><br><span class="line"><span class="comment"># adding decorator to the function</span></span><br><span class="line"><span class="meta">@hello_decorator</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sum_two_numbers</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Inside the function&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br></pre></td></tr></table></figure><h3 id="Chaining-Decorators"><a href="#Chaining-Decorators" class="headerlink" title="Chaining Decorators"></a>Chaining Decorators</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">decor1</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">        x = func()</span><br><span class="line">        <span class="keyword">return</span> x * x</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decor2</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">        x = func()</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * x</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"> </span><br><span class="line"><span class="meta">@decor1</span></span><br><span class="line"><span class="meta">@decor2</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">num1</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="number">10</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">@decor2</span></span><br><span class="line"><span class="meta">@decor1</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">num2</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="number">10</span></span><br><span class="line">   </span><br><span class="line"><span class="built_in">print</span>(num1()) <span class="comment"># 400</span></span><br><span class="line"><span class="built_in">print</span>(num2()) <span class="comment"># 200</span></span><br></pre></td></tr></table></figure><p>The above example is similar to calling the function as:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">decor1(decor2(num1))</span><br><span class="line">decor2(decor1(num2))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> web development </tag>
            
            <tag> flask </tag>
            
            <tag> backend </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day 54 of 100 Days of Code</title>
      <link href="/posts/Day-54-of-100-Days-of-Code/"/>
      <url>/posts/Day-54-of-100-Days-of-Code/</url>
      
        <content type="html"><![CDATA[<style>    #intro {        text-align: center;    }    #intro .title {        font-size: 1.5rem;        font-weight: 700;        color: rgb(31, 45, 61);    }    #intro .subtitle {        font-size: 1.2rem;        font-weight: 700;        color: rgb(31, 45, 61);    }</style><div id="intro">    <p class="title">Web Development with Flask</h2>    <p class="subtitle">Learning Log: Day 54 of 100 Days of Code</h3>    <p>GitHub Repo: <a href="https://github.com/Freedempire/100_days_of_code.git">100_days_of_code</a></p></div><h2 id="Understanding-backend-web-development"><a href="#Understanding-backend-web-development" class="headerlink" title="Understanding backend web development"></a>Understanding backend web development</h2><p>Full Stack &#x3D; Front End + Back End</p><h3 id="Front-end"><a href="#Front-end" class="headerlink" title="Front end"></a>Front end</h3><ul><li>HTML: gives website structure</li><li>CSS: gives style</li><li>JavaScript: allows to have interactivity</li><li>Frameworks: Angular, React</li></ul><h3 id="Back-end"><a href="#Back-end" class="headerlink" title="Back end"></a>Back end</h3><ul><li>Can be created by different languages, e.g. Java, JavsScript, Python, Ruby, etc.</li><li>Three components: client, server, database</li><li>Frameworks: Node.js, Flask, Django</li></ul><h2 id="Key-difference-between-library-and-framework"><a href="#Key-difference-between-library-and-framework" class="headerlink" title="Key difference between library and framework"></a>Key difference between library and framework</h2><p>The <strong>Inversion of Control</strong> (IoC) describes the difference between a library and a framework.</p><p>By using a library, you control the flow of the program. The library can be invoked whenever and wherever you like. Contrary to this, when you use a framework, the flow is controlled by the framework. The framework instructs you where to put your code, but it will call your code as required. Simply put, our code calls the library’s code, but in a framework, it’s the framework’s code that calls our code as shown in the below diagram.</p><p>Developers can invoke libraries to perform specific tasks by using components, classes, and methods. A framework, however, already provides code to perform common tasks and uses code provided by a developer for custom functionality.</p><h2 id="Creating-new-empty-files-at-CML"><a href="#Creating-new-empty-files-at-CML" class="headerlink" title="Creating new empty files at CML"></a>Creating new empty files at CML</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> . &gt; filename</span><br></pre></td></tr></table></figure><h2 id="Python-decorator"><a href="#Python-decorator" class="headerlink" title="Python decorator"></a>Python decorator</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">decorator_function</span>(<span class="params">function</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper_function</span>():</span><br><span class="line">        <span class="comment"># additional functionality</span></span><br><span class="line">        function()</span><br><span class="line">        <span class="comment"># additional functionality</span></span><br><span class="line">    <span class="keyword">return</span> wrapper_function</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> web development </tag>
            
            <tag> flask </tag>
            
            <tag> backend </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《天道》詩賞析</title>
      <link href="/posts/%E3%80%8A%E5%A4%A9%E9%81%93%E3%80%8B%E8%A9%A9%E8%B3%9E%E6%9E%90/"/>
      <url>/posts/%E3%80%8A%E5%A4%A9%E9%81%93%E3%80%8B%E8%A9%A9%E8%B3%9E%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<style>    #intro {        font-family: Noto Serif TC;        text-align: center;        font-size: 1.3em;    }    #intro h2 {        margin-bottom: 0;    }    #intro .small.gray {        font-size: 1rem;        color: gray;    }    #article-container {        font-family: Noto Serif TC;        font-size: 1.3em;    }</style><div id="intro">    <h2>天道</h2>    <p>        <span class="small gray">五代 · 馮道</span><br>        <span class="small gray">五言律詩</span><br>        <span>窮達皆由命，何勞發嘆聲。</span><br>        <span>但知行好事，莫要問前程。</span><br>        <span>冬去冰須泮，春來草自生。</span><br>        <span>請君觀此理，天道甚分明。</span><br>    </p></div><h2 id="作者簡介"><a href="#作者簡介" class="headerlink" title="作者簡介"></a>作者簡介</h2><p>生卒：公元882—954年<br>介紹：五代時瀛州景城（今河北河間東）人，字可道，自號長樂老。唐末為劉守光幽州掾。後唐莊宗同光元年（923年）為翰林學士，遷中書舍人、戶部侍郎。明宗天成元年（926年），拜端明殿學士，遷中書侍郎、刑部尚書平章事，改門下侍郎，戶部、吏部尚書，集賢殿弘文館大學士，加尚書左仆射。末帝立，出為同州節度使，入為司空。後晉時，守司空同中書門下平章事。少帝時，進封燕國公。後又歷仕契丹、後漢、後周。廣順初，拜太師兼中書令。顯德元年（954年）卒。追封瀛王，謚文懿。道歷事四朝，在相位20余年，生平見新、舊《五代史》本傳。道好學能文，暇時唯以披誦吟諷為事。《舊五代史》謂其文「典麗之外，義含古道」。吳處厚稱其「詩雖淺近而多諳理」（《青箱雜記》卷七）。《宋史·藝文誌七》著錄《馮道集》6卷、《河間集》5卷、《詩集》10卷，今皆佚。《全唐詩》存詩5首及斷句若干，《全唐詩外編》及《全唐詩續拾》補詩2首、斷句1。</p><h2 id="賞析"><a href="#賞析" class="headerlink" title="賞析"></a>賞析</h2><p>馮道歷事五朝（後唐、後晉、契丹（滅後晉後定國號「大遼」）、後漢及後周）、八姓（後唐李存勗（本姓朱邪）、李嗣源（本姓不詳）及其養子李從珂（本姓王）、後晉石氏、遼國耶律氏、後漢劉氏、後周郭威及其養子柴榮）、十一帝（後唐四代（莊宗李存勗、明宗嗣源、閔帝從厚及末帝從珂）、後晉兩代（高祖石敬瑭及出帝重貴）、遼一代（太宗耶律德光）、後漢兩代（高祖劉知遠及隱帝承祐）、後周兩代（太祖郭威及世宗柴榮）），「累朝不離將相、三公、三師之位」，前後為官四十多年，堪稱中國官場史上的不倒翁。贊其如薛居正者，說他事親濟民、提攜賢良，是「以持重鎮俗為己任」之垂範；謗其如歐陽修者，則認為他賣主求榮、反復無常，是一個「不知廉恥」的典型。忠臣也好，奸佞也罷，如仲尼之賢，尚有叔孫武叔之毀，更何況是馮道呢？</p><p>馮道能在這興亡接踵之世，不僅歷仕五朝、長居相位，而且在事親、濟民、主政、提攜賢良上的表現，也都符合傳統中君子、聖賢的行為標準，更是與其同時代的人心目中的模範。他的人生之「道」是什麼？也許，我們可以在這首《天道》中，窺知一二。</p><p>詩歌的寫作背景已無可考證，以議論入詩，語言淺近質樸，明白如話，卻含蘊頗深。</p><p>作者說，人生的窮困或是顯達皆由上天註定，不必滿身怨悱牢騷、長吁短嘆。那又應該怎樣做呢？頷聯便給予了回答：只要（自己）行端履正，所作所為於國有益、與民有利，個人的得失榮辱又何須計較呢？</p><p>頸聯又做了一個極其形象的類比，正如冬去春來，冰消草生，日月輪轉，萬物更新，以此觀之，天道自明。</p><p>寥寥數語就將抽象的自然之道、人生之理闡述得由淺入深而又發人深省，既有儒家循禮守節的風度，也不乏道家的不爭無為的心境。「但知行好事，莫要問前程。」也就此成了人們安本分、守本心、以不變應萬變的至理名言。</p><p>事實上，作者是這樣說的，也是這樣做的。</p><p>馮道出身耕讀，品性淳厚，少有才名，勤奮好學，即使大雪擁戶、塵垢滿身，依然安貧樂道。初登仕途，為燕王劉守光的參軍，他身先士卒，與士兵同甘共苦——「居一茅庵，與從人同器而食，臥則芻槁一束，其心晏如也」。哪怕是後來出將入相、位居翰林，適逢饑饉，他也能傾盡所有，開倉濟民，甚至幫助老弱，深夜負薪耕田，「不以為德」。若不是朝堂之上他執筆踟躕、正言直諫，恐怕大將郭崇韜早已身首異處，哪來的後唐盛景呢？</p><p>「莫為危時便愴神，前程往往有期因。須知海嶽歸明主，未必乾坤陷吉人。道德幾時曾去世，舟車何處不通津？但教方寸無諸惡，狼虎叢中也立身。」在他的另一首詩《偶作》中，我們可以看到與本詩幾乎相同的人生態度，馮道的個人品德、為政操守之高尚是毋庸置疑的。</p><p>在那個虎狼環伺、動蕩不安的歲月裏，士大夫們大多循規蹈矩，固守著「不求兼濟，但求獨善」的禮法原則，選擇屈就一隅、隱逸山野，用最溫和的抗爭方式，保持著人格的潔凈與獨立，雖然明哲保身，卻也無功於世。可馮道呢，他沒有置身事外，而是積極入世，救民水火，以自己的恪盡職守，去彌合戰爭帶給萬千百姓的創傷。無可否認，馮道轉事多主，稱臣胡夷（契丹），於兩宋和後世看來，確無氣節可言。但後人若以太平盛世時的道德標准，去審視一個連混世保身都要用盡全力的時代，是不是有失公允呢？</p><p>他沒有忠於一朝一君，卻忠於了蒼生黎民，恪守了自己心中的道——心存善念，順勢而為，但行好事，不問前程。和那些明哲保身、空老林泉的「君子」相較，誰才是真正的小人呢？正像馮道在《自敘》中所寫：「所願者，下不欺於地，中不欺於人，上不欺於天」——請君觀此理，天道甚分明。</p>]]></content>
      
      
      <categories>
          
          <category> literature </category>
          
      </categories>
      
      
        <tags>
            
            <tag> poem </tag>
            
            <tag> classics </tag>
            
            <tag> literature </tag>
            
            <tag> 馮道 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>A Simple Blackjack Program</title>
      <link href="/posts/A-Simple-Blackjack-Program/"/>
      <url>/posts/A-Simple-Blackjack-Program/</url>
      
        <content type="html"><![CDATA[<style>    #intro {        text-align: center;    }    #intro .title {        font-size: 1.5rem;        font-weight: 700;        color: rgb(31, 45, 61);    }    #intro .subtitle {        font-size: 1.2rem;        font-weight: 700;        color: rgb(31, 45, 61);    }</style><div id="intro">    <p class="title">Simple Blackjack</h2>    <p class="subtitle">A CLI single-player blackjack program</h3>    <p>GitHub Repo: <a href="https://github.com/Freedempire/simple_blackjack">simple_blackjack</a></p></div><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> _     _            _    _            _</span><br><span class="line">| |   | |          | |  (_)          | |      ___   ___ </span><br><span class="line">| |__ | | __ _  ___| | ___  __ _  ___| | __  |A  | |K  |</span><br><span class="line">| &#x27;_ \| |/ _` |/ __| |/ / |/ _` |/ __| |/ /  | ♠ | | ♦ |</span><br><span class="line">| |_) | | (_| | (__|   &lt;| | (_| | (__|   &lt;   |__A| |__K|</span><br><span class="line">|_.__/|_|\__,_|\___|_|\_\ |\__,_|\___|_|\_\</span><br><span class="line">                       _/ |</span><br><span class="line">                      |__/</span><br></pre></td></tr></table></figure><h2 id="Screenshots"><a href="#Screenshots" class="headerlink" title="Screenshots"></a>Screenshots</h2><p><img src="https://i.ibb.co/7KR58JV/simple-blackjack-1.png" alt="screenshot 1"><br><img src="https://i.ibb.co/4sKtmSp/simple-blackjack-2.png" alt="screenshot 2"><br><img src="https://i.ibb.co/thbDkJ5/simple-blackjack-3.png" alt="screenshot 3"><br><img src="https://i.ibb.co/Jd3WxB4/simple-blackjack-4.png" alt="screenshot 4"><br><img src="https://i.ibb.co/TTZF35k/simple-blackjack-5.png" alt="screenshot 5"></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> blackjack </tag>
            
            <tag> cli </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kiama Beach</title>
      <link href="/posts/Kiama-Beach/"/>
      <url>/posts/Kiama-Beach/</url>
      
        <content type="html"><![CDATA[<div class="gallery">    <div class="fj-gallery lazyload data" data-rowHeight="220" data-limit="5">    <span class="gallery-data">[{"url":"https://i.ibb.co/1MD2kWR/PXL-20230611-014928037.jpg","alt":""},{"url":"https://i.ibb.co/SsCH16S/PXL-20230611-011358421.jpg","alt":""},{"url":"https://i.ibb.co/g6TwnQF/PXL-20230611-011409738.jpg","alt":""},{"url":"https://i.ibb.co/Bj3j8LK/PXL-20230611-011839234-MP.jpg","alt":""},{"url":"https://i.ibb.co/M6LGDbf/PXL-20230611-011843134-MP.jpg","alt":""},{"url":"https://i.ibb.co/XLr86ZK/PXL-20230611-011915355.jpg","alt":""},{"url":"https://i.ibb.co/tqv62ds/PXL-20230611-012813274.jpg","alt":""},{"url":"https://i.ibb.co/HTFfT5r/PXL-20230611-012929199-MP.jpg","alt":""},{"url":"https://i.ibb.co/2ddgj2N/PXL-20230611-013056918-MP.jpg","alt":""},{"url":"https://i.ibb.co/Tv0DptM/PXL-20230611-013100268-MP.jpg","alt":""},{"url":"https://i.ibb.co/n1c26Cg/PXL-20230611-013505523.jpg","alt":""},{"url":"https://i.ibb.co/tz04sGk/PXL-20230611-013844745.jpg","alt":""},{"url":"https://i.ibb.co/XbFqnGt/PXL-20230611-014048250-MP.jpg","alt":""},{"url":"https://i.ibb.co/zPpWhYf/PXL-20230611-014143996-MP.jpg","alt":""},{"url":"https://i.ibb.co/T2wtw71/PXL-20230611-014717282-MP.jpg","alt":""}]</span>    </div>    <button class="gallery-load-more"><span>Load More</span><i class="fa-solid fa-arrow-down"></i></button>    </div>]]></content>
      
      
      <categories>
          
          <category> gallery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gallery </tag>
            
            <tag> beach </tag>
            
            <tag> kiama </tag>
            
            <tag> scenery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Build Your Own Password Manager with Python</title>
      <link href="/posts/Build-Your-Own-Password-Manager-with-Python/"/>
      <url>/posts/Build-Your-Own-Password-Manager-with-Python/</url>
      
        <content type="html"><![CDATA[<style>    #intro {        text-align: center;    }    #intro .title {        font-size: 1.5rem;        font-weight: 700;        color: rgb(31, 45, 61);    }    #intro .subtitle {        font-size: 1.2rem;        font-weight: 700;        color: rgb(31, 45, 61);    }</style><div id="intro">    <img src="https://i.ibb.co/qyjfYBf/cyber-crime.png" width="40%" height="40%" alt="logo" />    <p class="title">Password Manager</h2>    <p class="subtitle">A simple desktop password management tool</h3>    <p>GitHub Repo: <a href="https://github.com/Freedempire/PasswordManager">PasswordManager</a></p></div><p>The <strong>Password Manager</strong> is a simple <em>windows</em> desktop application that allows users to manage their passwords securely and easily. It uses <a href="https://en.wikipedia.org/wiki/Scrypt">scrypt</a> password-based key derivation function from standard package <a href="https://docs.python.org/3/library/hashlib.html">hashlib</a> for hashing the master password for each user of the app, and stores the hash value in a database. The password records to be managed are encrypted with unique salt using <a href="https://cryptography.io/en/latest/fernet/">Fernet</a> from <a href="https://pypi.org/project/cryptography/">cryptography</a> package.</p><h2 id="Screenshots"><a href="#Screenshots" class="headerlink" title="Screenshots"></a>Screenshots</h2><h3 id="Login-x2F-Signup-Frame"><a href="#Login-x2F-Signup-Frame" class="headerlink" title="Login &#x2F; Signup Frame"></a>Login &#x2F; Signup Frame</h3><p><img src="https://i.ibb.co/YLXjvcQ/screenshot-login.png" alt="login"></p><h3 id="Password-Entries-Frame"><a href="#Password-Entries-Frame" class="headerlink" title="Password Entries Frame"></a>Password Entries Frame</h3><p><img src="https://i.ibb.co/hVKDhNY/screenshot-passwords.png" alt="passwords"></p><h2 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h2><ul><li><strong>Multiple</strong> users can use the app, each with their own password and unique salt.</li><li>Master password is hashed using <strong>scrypt</strong> and stored in database.</li><li>Password records are encrypted with unique salt using <code>Fernet</code> from <code>cryptography</code> package.</li><li>Records can be easily <strong>searched</strong> and <strong>manipulated</strong>.</li><li>App can generate <strong>random</strong> passwords triggered by typing ‘[random]’ in the password input box.</li></ul><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><ol><li>Clone the repository to your local machine using <code>git clone https://github.com/Freedempire/PasswordManager.git</code></li><li>Install the required dependencies using <code>pip install -r requirements.txt</code></li><li>Run the app using <code>python pmapp.py</code></li></ol><h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><ol><li>Create a new user account by entering a new username and password then clicking on the “Sign Up” button and finish the password confirmation.</li><li>Log in to the app using your username and password then clicking on the “Log In” button.</li><li>To add a new password record, fill in the required details then click on the “Add” button.</li><li>To edit a password record, first double-click the record from the list and make modifications as you wish, finally click on the “Update” button.</li><li>To delete a password record, double-click the record from the list and then click on the “Delete” button.</li><li>To generate a random password, simply type in ‘[random]’ in the Password input box of the details section, then press <kbd>Tab</kbd> or <kbd>Enter</kbd> to trigger the auto generation.</li><li>You can also use <kbd>Tab</kbd> or <kbd>Enter</kbd> to jump from one input box to the next while editing password entry.</li><li>The “Clear” button can be used to clear all inputs in the input boxes. It also clears the current selection status, i.e. the status shows which has been lastly double-clicked.</li></ol><h2 id="Security"><a href="#Security" class="headerlink" title="Security"></a>Security</h2><p>This app takes security seriously and implements several measures to ensure the safety of user data. The use of scrypt for hashing the master password and unique salt with Fernet for encrypting the password records provide strong protection against brute force and dictionary attacks. Additionally, the app does not store any plaintext passwords or the master key, further reducing the risk of data breaches.</p><h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p>This project is licensed under the MIT License - see the <a href="https://opensource.org/license/mit/">LICENSE</a> file for details.</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> password </tag>
            
            <tag> cryptography </tag>
            
            <tag> tkinter </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
