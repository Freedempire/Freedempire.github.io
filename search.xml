<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Day 59 of 100 Days of Code</title>
      <link href="/posts/Day-59-of-100-Days-of-Code/"/>
      <url>/posts/Day-59-of-100-Days-of-Code/</url>
      
        <content type="html"><![CDATA[<style>    #intro {        text-align: center;    }</style><div id="intro">    <h2>Blog Capstone Project Part 2 - Adding Styling</h2>    <h3>Learning log: Day 58 of 100 Days of Code</h3>    <p>GitHub Repo: <a href="https://github.com/Freedempire/100_days_of_code.git">100_days_of_code</a></p></div><h2 id="Screenshots"><a href="#Screenshots" class="headerlink" title="Screenshots"></a>Screenshots</h2><p><img src="https://i.ibb.co/WH3RpM8/bootstrap-blog1.jpg" alt="Screenshot 1"><br><img src="https://i.ibb.co/fX6wHvv/bootstrap-blog2.jpg" alt="Screenshot 2"><br><img src="https://i.ibb.co/q58Hs1b/bootstrap-blog3.jpg" alt="Screenshot 3"></p><h2 id="Flask"><a href="#Flask" class="headerlink" title="Flask"></a>Flask</h2><h3 id="Static-Files"><a href="#Static-Files" class="headerlink" title="Static Files"></a>Static Files</h3><p>To generate URLs for static files, use the special <code>&#39;static&#39;</code> endpoint name:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url_for(<span class="string">&#x27;static&#x27;</span>, filename=<span class="string">&#x27;style.css&#x27;</span>)</span><br></pre></td></tr></table></figure><p>The file has to be stored on the filesystem as <code>static/style.css</code>.</p><h2 id="Jinja"><a href="#Jinja" class="headerlink" title="Jinja"></a>Jinja</h2><h3 id="Template-Inheritance"><a href="#Template-Inheritance" class="headerlink" title="Template Inheritance"></a>Template Inheritance</h3><p>Template inheritance allows you to build a base “skeleton” template that contains all the common elements of your site and defines <em>blocks</em> that child templates can override.</p><h4 id="Base-Template"><a href="#Base-Template" class="headerlink" title="Base Template"></a>Base Template</h4><p>This template, which we’ll call <code>base.html</code>, defines a simple HTML skeleton document that you might use for a simple two-column page. It’s the job of “child” templates to fill the empty blocks with content:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    &#123;% block head %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>&#123;% block title %&#125;&#123;% endblock %&#125; - My Webpage<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    &#123;% endblock %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;content&quot;</span>&gt;</span>&#123;% block content %&#125;&#123;% endblock %&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;footer&quot;</span>&gt;</span></span><br><span class="line">        &#123;% block footer %&#125;</span><br><span class="line">        <span class="symbol">&amp;copy;</span> Copyright 2008 by <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://domain.invalid/&quot;</span>&gt;</span>you<span class="tag">&lt;/<span class="name">a</span>&gt;</span>.</span><br><span class="line">        &#123;% endblock %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>In this example, the <code>&#123;% block %&#125;</code> tags define four blocks that child templates can fill in. All the block tag does is tell the template engine that a child template may override those placeholders in the template.</p><p>block tags can be inside other blocks such as if, but they will <em>always</em> be executed regardless of if the if block is actually rendered.</p><h4 id="Child-Template"><a href="#Child-Template" class="headerlink" title="Child Template"></a>Child Template</h4><p>A child template might look like this:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &quot;base.html&quot; %&#125;</span><br><span class="line">&#123;% block title %&#125;Index&#123;% endblock %&#125;</span><br><span class="line">&#123;% block head %&#125;</span><br><span class="line">    &#123;&#123; super() &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.important</span> &#123; <span class="attribute">color</span>: <span class="number">#336699</span>; &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Index<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;important&quot;</span>&gt;</span></span><br><span class="line">      Welcome to my awesome homepage.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p>The <code>&#123;% extends %&#125;</code> tag is the key here. It tells the template engine that this template “extends” another template. When the template system evaluates this template, it first locates the parent. The extends tag should be the <em>first</em> tag in the template. Everything before it is printed out normally and may cause confusion. Also a block will always be filled in regardless of whether the surrounding condition is evaluated to be true or false.</p><p>The filename of the template depends on the template loader. For example, the <strong>FileSystemLoader</strong> allows you to access other templates by giving the filename. You can access templates in subdirectories with a slash:</p><figure class="highlight jinja"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">extends</span></span> &quot;layout/default.html&quot; %&#125;</span></span><br></pre></td></tr></table></figure><p>But this behavior can depend on the application embedding Jinja. Note that since the child template doesn’t define the footer block, the value from the parent template is used instead.</p><p>You can’t define multiple <code>&#123;% block %&#125;</code> tags with the same name in the same template. This limitation exists because a block tag works in “both” directions. That is, a block tag doesn’t just provide a placeholder to fill - it also defines the content that fills the placeholder in the parent. If there were two similarly-named <code>&#123;% block %&#125;</code> tags in a template, that template’s parent wouldn’t know which one of the blocks’ content to use.</p><p>If you want to print a block multiple times, you can, however, use the special <em>self</em> variable and call the block with that name:</p><figure class="highlight jinja"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span></span><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> title %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> %&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="template-variable">&#123;&#123; self.title() &#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> body %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> %&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> web development </tag>
            
            <tag> flask </tag>
            
            <tag> backend </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day 58 of 100 Days of Code</title>
      <link href="/posts/Day-58-of-100-Days-of-Code/"/>
      <url>/posts/Day-58-of-100-Days-of-Code/</url>
      
        <content type="html"><![CDATA[<style>    #intro {        text-align: center;    }</style><div id="intro">    <h2>Web Foundation Bootstrap</h2>    <h3>Learning log: Day 58 of 100 Days of Code</h3>    <p>GitHub Repo: <a href="https://github.com/Freedempire/100_days_of_code.git">100_days_of_code</a></p></div><h2 id="CSS-framework"><a href="#CSS-framework" class="headerlink" title="CSS framework"></a>CSS framework</h2><p>A CSS framework comprises several CSS stylesheets ready for use by web developers and designers.</p><p>With a CSS framework, the user has a completed CSS stylesheet, and they only have to code the HTML with accurate classes, structure, and IDs to set up a web page. The framework already has classes built-in for common website elements – footer, slider, navigation bar, hamburger menu, column-based layouts, etc.</p><h3 id="Advantages-of-using-CSS-frameworks"><a href="#Advantages-of-using-CSS-frameworks" class="headerlink" title="Advantages of using CSS frameworks"></a>Advantages of using CSS frameworks</h3><ul><li>Developers and designers can use CSS frameworks to implement various advanced features and visual elements on a website – forms, different buttons, navbars, breadcrumbs, and even clean symmetrical layouts.</li><li>CSS frameworks make creating websites compatible with multiple browsers and browser versions simple.</li><li>Since these frameworks have ready-to-use stylesheets, using them allows faster and more convenient web development. Developers can quickly generate a user-friendly and visually appealing UI that can be modified throughout a project without starting from scratch.</li></ul><h3 id="Top-5-CSS-frameworks"><a href="#Top-5-CSS-frameworks" class="headerlink" title="Top 5 CSS frameworks"></a>Top 5 CSS frameworks</h3><ol><li>Bootstrap</li><li>Tailwind CSS</li><li>Foundation</li><li>Bulma</li><li>Skeleton</li></ol><h2 id="Bootstrap"><a href="#Bootstrap" class="headerlink" title="Bootstrap"></a>Bootstrap</h2><h3 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h3><h4 id="Download"><a href="#Download" class="headerlink" title="Download"></a>Download</h4><p><a href="https://github.com/twbs/bootstrap/releases/download/v5.3.0/bootstrap-5.3.0-dist.zip">Download</a> ready-to-use compiled code for Bootstrap v5.3.0 to easily drop into your project, which includes:</p><ul><li>Compiled and minified CSS bundles (see CSS files comparison)</li><li>Compiled and minified JavaScript plugins (see JS files comparison)</li></ul><h4 id="CDN-via-jsDelivr"><a href="#CDN-via-jsDelivr" class="headerlink" title="CDN via jsDelivr"></a>CDN via jsDelivr</h4><p>Skip the download with jsDelivr to deliver cached version of Bootstrap’s compiled CSS and JS to your project.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">integrity</span>=<span class="string">&quot;sha384-9ndCyUaIbzAi2FUVXJi0CjmCapSmO7SnpJef0486qhLnuZ2cdeRhO02iuK6FUUVM&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js&quot;</span> <span class="attr">integrity</span>=<span class="string">&quot;sha384-geWF76RCwLtnZ8qwWowPQNguL3RmwHVBC9FhGdlKrxdiJJigb/j/68SIy3Te4Bkz&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Package-managers"><a href="#Package-managers" class="headerlink" title="Package managers"></a>Package managers</h4><h5 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h5><p>Install Bootstrap in your Node.js powered apps with the npm package:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install bootstrap@5.3.0</span><br></pre></td></tr></table></figure><h5 id="yarn"><a href="#yarn" class="headerlink" title="yarn"></a>yarn</h5><p>Install Bootstrap in your Node.js powered apps with the yarn package:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add bootstrap@5.3.0</span><br></pre></td></tr></table></figure><h3 id="Quick-start"><a href="#Quick-start" class="headerlink" title="Quick start"></a>Quick start</h3><ol><li><p>Create a new index.html file in your project root. Include the <code>&lt;meta name=&quot;viewport&quot;&gt;</code> tag as well for proper responsive behavior in mobile devices.</p></li><li><p>Include Bootstrap’s CSS and JS. Place the <code>&lt;link&gt;</code> tag in the <code>&lt;head&gt;</code> for our CSS, and the <code>&lt;script&gt;</code> tag for our JavaScript bundle (including Popper for positioning dropdowns, poppers, and tooltips) before the closing <code>&lt;/body&gt;</code>.<br>You can also include Popper and our JS separately. If you don’t plan to use dropdowns, popovers, or tooltips, save some kilobytes by not including Popper.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js&quot;</span> <span class="attr">integrity</span>=<span class="string">&quot;sha384-I7E8VVD/ismYTF4hNIPjVp/Zjvgyol6VFvRkX/vR+Vc4jQkC+hVqc2pM8ODewa9r&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.min.js&quot;</span> <span class="attr">integrity</span>=<span class="string">&quot;sha384-fbbOQedDUMZZ5KreZpsbe1LCZPVmfTnH7ois6mU1QK+m14rQ1l2bGBq41eYeM/fS&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Now you can start building with Bootstrap by creating your own <a href="https://getbootstrap.com/docs/5.3/layout/grid/">layout</a>, adding dozens of <a href="https://getbootstrap.com/docs/5.3/components/buttons/">components</a>, and utilizing <a href="https://getbootstrap.com/docs/5.3/examples/">our official examples</a>.</p></li></ol><h3 id="Next-steps"><a href="#Next-steps" class="headerlink" title="Next steps"></a>Next steps</h3><ul><li>Some important <a href="https://getbootstrap.com/docs/5.3/getting-started/introduction/#important-globals">global environment settings</a> that Bootstrap utilizes.</li><li>What’s included in Bootstrap in our <a href="https://getbootstrap.com/docs/5.3/getting-started/contents/">contents section</a> and the list of <a href="https://getbootstrap.com/docs/5.3/getting-started/introduction/#js-components">components that require JavaScript</a>.</li><li>Consider building with Bootstrap by <a href="https://getbootstrap.com/docs/5.3/getting-started/download/#package-managers">including the source files via package manager</a>.</li><li>To use Bootstrap as a module with <code>&lt;script type=&quot;module&quot;&gt;</code>, refer to our <a href="https://getbootstrap.com/docs/5.3/getting-started/javascript/#using-bootstrap-as-a-module">using Bootstrap as a module</a> section.</li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> web development </tag>
            
            <tag> flask </tag>
            
            <tag> backend </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day 57 of 100 Days of Code</title>
      <link href="/posts/Day-57-of-100-Days-of-Code/"/>
      <url>/posts/Day-57-of-100-Days-of-Code/</url>
      
        <content type="html"><![CDATA[<style>    #intro {        text-align: center;    }</style><div id="intro">    <h2>Templating with Jinja in Flask Applications</h2>    <h3>Learning log: Day 57 of 100 Days of Code</h3>    <p>GitHub Repo: <a href="https://github.com/Freedempire/100_days_of_code.git">100_days_of_code</a></p></div><h2 id="Jinja"><a href="#Jinja" class="headerlink" title="Jinja"></a>Jinja</h2><p>A Jinja template is simply a text file. Jinja can generate any text-based format (HTML, XML, CSV, LaTeX, etc.). A Jinja template <em>doesn’t</em> need to have a specific extension: <code>.html</code>, <code>.xml</code>, or any other extension is just fine.</p><p>A template contains <strong>variables</strong> and&#x2F;or <strong>expressions</strong>, which get replaced with values when a template is <em>rendered</em>; and <strong>tags</strong>, which control the logic of the template. The template syntax is heavily inspired by Django and Python.</p><h3 id="A-minimal-example"><a href="#A-minimal-example" class="headerlink" title="A minimal example"></a>A minimal example</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>My Webpage<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;navigation&quot;</span>&gt;</span></span><br><span class="line">    &#123;% for item in navigation %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; item.href &#125;&#125;&quot;</span>&gt;</span>&#123;&#123; item.caption &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>My Webpage<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    &#123;&#123; a_variable &#125;&#125;</span><br><span class="line"></span><br><span class="line">    &#123;# a comment #&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>The example shows the default configuration settings. An application developer can change the syntax configuration from <code>&#123;% foo %&#125;</code> to <code>&lt;% foo %&gt;</code>, or something similar.</p><h3 id="Default-Jinja-delimiters"><a href="#Default-Jinja-delimiters" class="headerlink" title="Default Jinja delimiters"></a>Default Jinja delimiters</h3><ul><li><code>&#123;% ... %&#125;</code> for Statements</li><li><code>&#123;&#123; ... &#125;&#125;</code> for Expressions to print to the template output</li><li>&#96;&#96; for Comments not included in the template output</li></ul><h3 id="Variables"><a href="#Variables" class="headerlink" title="Variables"></a>Variables</h3><p>Template variables are defined by the context dictionary passed to the template.</p><p>You can use a dot (<code>.</code>) to access attributes of a variable in addition to the standard Python <code>__getitem__</code> “subscript” syntax (<code>[]</code>).</p><p>The following lines do the same thing:</p><figure class="highlight jinja"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-variable">&#123;&#123; foo.bar &#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-variable">&#123;&#123; foo[&#x27;bar&#x27;] &#125;&#125;</span></span><br></pre></td></tr></table></figure><p>If a variable or attribute does not exist, you will get back an <em>undefined</em> value. What you can do with that kind of value depends on the application configuration: the default behavior is to evaluate to an empty string if printed or iterated over, and to fail for every other operation.</p><h3 id="Filters"><a href="#Filters" class="headerlink" title="Filters"></a>Filters</h3><p>Variables can be modified by filters. Filters are separated from the variable by a pipe symbol (<code>|</code>) and may have optional arguments in parentheses. Multiple filters can be chained. The output of one filter is applied to the next.</p><p>For example, <code>&#123;&#123; name|striptags|title &#125;&#125;</code> will remove all HTML Tags from variable name and title-case the output (<code>title(striptags(name))</code>).</p><p>The <a href="https://jinja.palletsprojects.com/en/3.0.x/templates/#builtin-filters">List of Builtin Filters</a> describes all the builtin filters.</p><h3 id="Escaping"><a href="#Escaping" class="headerlink" title="Escaping"></a>Escaping</h3><p>It is sometimes necessary to have Jinja ignore parts it would otherwise handle as variables or blocks.</p><p>The easiest way to output a literal variable delimiter is by using a variable expression <code>&#123;&#123; '&#123;&#123;' &#125;&#125;</code>.</p><p>For bigger sections, it makes sense to mark a block raw.</p><figure class="highlight jinja"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name">raw</span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> item <span class="keyword">in</span> seq %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><span class="template-variable">&#123;&#123; item &#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">endfor</span></span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">endraw</span> %&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> web development </tag>
            
            <tag> flask </tag>
            
            <tag> backend </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day 56 of 100 Days of Code</title>
      <link href="/posts/Day-56-of-100-Days-of-Code/"/>
      <url>/posts/Day-56-of-100-Days-of-Code/</url>
      
        <content type="html"><![CDATA[<style>    #intro {        text-align: center;    }</style><div id="intro">    <h2>Rendering HTML/Static files and Using Website Templates</h2>    <h3>Learning log: Day 56 of 100 Days of Code</h3>    <p>GitHub Repo: <a href="https://github.com/Freedempire/100_days_of_code.git">100_days_of_code</a></p></div><h2 id="Flask"><a href="#Flask" class="headerlink" title="Flask"></a>Flask</h2><h3 id="Static-Files"><a href="#Static-Files" class="headerlink" title="Static Files"></a>Static Files</h3><p>Dynamic web applications also need static files. That’s usually where the CSS and JavaScript files are coming from. Just create a folder called <code>static</code> in your package or next to your module and it will be available at <code>/static</code> on the application.</p><p>To generate URLs for static files, use the special <code>&#39;static&#39;</code> endpoint name:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url_for(<span class="string">&#x27;static&#x27;</span>, filename=<span class="string">&#x27;style.css&#x27;</span>)</span><br></pre></td></tr></table></figure><p>The file has to be stored on the filesystem as <code>static/style.css</code>.</p><h3 id="Rendering-Templates"><a href="#Rendering-Templates" class="headerlink" title="Rendering Templates"></a>Rendering Templates</h3><p>Generating HTML from within Python is not fun, and actually pretty cumbersome because you have to do the HTML escaping on your own to keep the application secure. Because of that Flask configures the Jinja2 template engine for you automatically.</p><p>Templates can be used to generate any type of text file. For web applications, you’ll primarily be generating HTML pages, but you can also generate markdown, plain text for emails, and anything else.</p><p>To render a template you can use the <code>render_template()</code> method. All you have to do is provide the name of the template and the variables you want to pass to the template engine as <em>keyword arguments</em>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> render_template</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/hello/&#x27;</span></span>)</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/hello/&lt;name&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>(<span class="params">name=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;hello.html&#x27;</span>, name=name)</span><br></pre></td></tr></table></figure><p>Flask will look for templates in the templates folder. So if your application is a module, this folder is next to that module, if it’s a package it’s actually inside your package.</p><p>For templates you can use the full power of Jinja2 templates. Head over to the official <a href="https://jinja.palletsprojects.com/templates/">Jinja2 Template Documentation</a> for more information.</p><p>Here is an example template:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello from Flask<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">&#123;% if name %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello &#123;&#123; name &#125;&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, World!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>Inside templates you also have access to the config, request, session and g objects as well as the <code>url_for()</code> and <code>get_flashed_messages()</code> functions.</p><p>Templates are especially useful if inheritance is used. If you want to know how that works, see <a href="https://flask.palletsprojects.com/en/2.3.x/patterns/templateinheritance/">Template Inheritance</a>. Basically template inheritance makes it possible to keep certain elements on each page (like header, navigation and footer).</p><p>Automatic escaping is enabled, so if name contains HTML it will be escaped automatically. If you can trust a variable and you know that it will be safe HTML (for example because it came from a module that converts wiki markup to HTML) you can mark it as safe by using the Markup class or by using the <code>|safe</code> filter in the template.</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> web development </tag>
            
            <tag> flask </tag>
            
            <tag> backend </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day 55 of 100 Days of Code</title>
      <link href="/posts/Day-55-of-100-Days-of-Code/"/>
      <url>/posts/Day-55-of-100-Days-of-Code/</url>
      
        <content type="html"><![CDATA[<style>    #intro {        text-align: center;    }</style><div id="intro">    <h2>HTML & URL Parsing in Flask</h2>    <h3>Learning log: Day 55 of 100 Days of Code</h3>    <p>GitHub Repo: <a href="https://github.com/Freedempire/100_days_of_code.git">100_days_of_code</a></p></div><h2 id="Flask"><a href="#Flask" class="headerlink" title="Flask"></a>Flask</h2><h3 id="A-minimal-application"><a href="#A-minimal-application" class="headerlink" title="A minimal application"></a>A minimal application</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">home</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Index&#x27;</span></span><br><span class="line"></span><br><span class="line">app.run()</span><br></pre></td></tr></table></figure><p>To run the application in CLI, use the <code>flask</code> command or <code>python -m flask</code>. You need to tell the Flask where your application is with the –app option.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flask --app hello run</span><br></pre></td></tr></table></figure><p>As a shortcut, if the file is named <code>app.py</code> or <code>wsgi.py</code>, you don’t have to use <code>--app</code>.</p><h3 id="Externally-visible-server"><a href="#Externally-visible-server" class="headerlink" title="Externally visible server"></a>Externally visible server</h3><p>If you have the debugger disabled or trust the users on your network, you can make the server publicly available simply by adding <code>--host=0.0.0.0</code> to the command line:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flask run --host=0.0.0.0</span><br></pre></td></tr></table></figure><p>This tells your operating system to listen on all public IPs.</p><h3 id="Debug-mode"><a href="#Debug-mode" class="headerlink" title="Debug mode"></a>Debug mode</h3><p>To enable debug mode, use the <code>--debug</code> option.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flask --app hello run --debug</span><br></pre></td></tr></table></figure><h3 id="HTML-escaping"><a href="#HTML-escaping" class="headerlink" title="HTML escaping"></a>HTML escaping</h3><p>When returning HTML (the default response type in Flask), any user-provided values rendered in the output must be <em>escaped</em> to protect from injection attacks. HTML templates rendered with <strong>Jinja</strong> will do this automatically.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> markupsafe <span class="keyword">import</span> escape</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&lt;name&gt;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;Hello, <span class="subst">&#123;escape(name)&#125;</span>!&quot;</span></span><br></pre></td></tr></table></figure><h3 id="Routing"><a href="#Routing" class="headerlink" title="Routing"></a>Routing</h3><p>Use the <code>route()</code> decorator to bind a function to a URL.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Index Page&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/hello&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello, World&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="Variable-rules"><a href="#Variable-rules" class="headerlink" title="Variable rules"></a>Variable rules</h3><p>You can add variable sections to a URL by marking sections with <code>&lt;variable_name&gt;</code>. Your function then receives the <code>&lt;variable_name&gt;</code> as a <em>keyword argument</em>. Optionally, you can use a converter to specify the type of the argument like <code>&lt;converter:variable_name&gt;</code>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> markupsafe <span class="keyword">import</span> escape</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/user/&lt;username&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_user_profile</span>(<span class="params">username</span>):</span><br><span class="line">    <span class="comment"># show the user profile for that user</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&#x27;User <span class="subst">&#123;escape(username)&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/post/&lt;int:post_id&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_post</span>(<span class="params">post_id</span>):</span><br><span class="line">    <span class="comment"># show the post with the given id, the id is an integer</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&#x27;Post <span class="subst">&#123;post_id&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/path/&lt;path:subpath&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_subpath</span>(<span class="params">subpath</span>):</span><br><span class="line">    <span class="comment"># show the subpath after /path/</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&#x27;Subpath <span class="subst">&#123;escape(subpath)&#125;</span>&#x27;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>Converter type</th><th>Explanation</th></tr></thead><tbody><tr><td>string</td><td>(default) accepts any text without a slash</td></tr><tr><td>int</td><td>accepts positive integers</td></tr><tr><td>float</td><td>accepts positive floating point values</td></tr><tr><td>path</td><td>like string but also accepts slashes</td></tr><tr><td>uuid</td><td>accepts UUID strings</td></tr></tbody></table><h2 id="Decorators-in-Python"><a href="#Decorators-in-Python" class="headerlink" title="Decorators in Python"></a>Decorators in Python</h2><p>Decorators allow programmers to modify the behavior of a function or class without permanently modifying it.</p><h3 id="First-class-objects"><a href="#First-class-objects" class="headerlink" title="First class objects"></a>First class objects</h3><p>In Python, functions are first class objects.</p><p>Properties of first class functions:</p><ul><li>A function is an instance of the Object type.</li><li>You can store the function in a variable.</li><li>You can pass the function as a parameter to another function.</li><li>You can return the function from a function.</li><li>You can store them in data structures such as hash tables, lists, etc.</li></ul><h3 id="Decorators"><a href="#Decorators" class="headerlink" title="Decorators"></a>Decorators</h3><p>In Decorators, functions are taken as the argument into another function and then called inside the wrapper function.</p><p>Syntax for Decorator:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@gfg_decorator</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_decorator</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Gfg&quot;</span>)</span><br></pre></td></tr></table></figure><p>Above code is equivalent to:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hello_decorator</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Gfg&quot;</span>)</span><br><span class="line">    </span><br><span class="line">hello_decorator = gfg_decorator(hello_decorator)</span><br></pre></td></tr></table></figure><h3 id="Decorate-a-function-with-arguments"><a href="#Decorate-a-function-with-arguments" class="headerlink" title="Decorate a function with arguments"></a>Decorate a function with arguments</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hello_decorator</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner1</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;before Execution&quot;</span>)</span><br><span class="line">        <span class="comment"># getting the returned value</span></span><br><span class="line">        returned_value = func(*args, **kwargs)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;after Execution&quot;</span>)</span><br><span class="line">        <span class="comment"># returning the value to the original frame</span></span><br><span class="line">        <span class="keyword">return</span> returned_value</span><br><span class="line">    <span class="keyword">return</span> inner1</span><br><span class="line"></span><br><span class="line"><span class="comment"># adding decorator to the function</span></span><br><span class="line"><span class="meta">@hello_decorator</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sum_two_numbers</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Inside the function&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br></pre></td></tr></table></figure><h3 id="Chaining-Decorators"><a href="#Chaining-Decorators" class="headerlink" title="Chaining Decorators"></a>Chaining Decorators</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">decor1</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">        x = func()</span><br><span class="line">        <span class="keyword">return</span> x * x</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decor2</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">        x = func()</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * x</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"> </span><br><span class="line"><span class="meta">@decor1</span></span><br><span class="line"><span class="meta">@decor2</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">num1</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="number">10</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">@decor2</span></span><br><span class="line"><span class="meta">@decor1</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">num2</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="number">10</span></span><br><span class="line">   </span><br><span class="line"><span class="built_in">print</span>(num1()) <span class="comment"># 400</span></span><br><span class="line"><span class="built_in">print</span>(num2()) <span class="comment"># 200</span></span><br></pre></td></tr></table></figure><p>The above example is similar to calling the function as:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">decor1(decor2(num1))</span><br><span class="line">decor2(decor1(num2))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> web development </tag>
            
            <tag> flask </tag>
            
            <tag> backend </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day 54 of 100 Days of Code</title>
      <link href="/posts/Day-54-of-100-Days-of-Code/"/>
      <url>/posts/Day-54-of-100-Days-of-Code/</url>
      
        <content type="html"><![CDATA[<style>    #intro {        text-align: center;    }</style><div id="intro">    <h2>Web Development with Flask</h2>    <h3>Learning log: Day 54 of 100 Days of Code</h3>    <p>GitHub Repo: <a href="https://github.com/Freedempire/100_days_of_code.git">100_days_of_code</a></p></div><h2 id="Understanding-backend-web-development"><a href="#Understanding-backend-web-development" class="headerlink" title="Understanding backend web development"></a>Understanding backend web development</h2><p>Full Stack &#x3D; Front End + Back End</p><h3 id="Front-end"><a href="#Front-end" class="headerlink" title="Front end"></a>Front end</h3><ul><li>HTML: gives website structure</li><li>CSS: gives style</li><li>JavaScript: allows to have interactivity</li><li>Frameworks: Angular, React</li></ul><h3 id="Back-end"><a href="#Back-end" class="headerlink" title="Back end"></a>Back end</h3><ul><li>Can be created by different languages, e.g. Java, JavsScript, Python, Ruby, etc.</li><li>Three components: client, server, database</li><li>Frameworks: Node.js, Flask, Django</li></ul><h2 id="Key-difference-between-library-and-framework"><a href="#Key-difference-between-library-and-framework" class="headerlink" title="Key difference between library and framework"></a>Key difference between library and framework</h2><p>The <strong>Inversion of Control</strong> (IoC) describes the difference between a library and a framework.</p><p>By using a library, you control the flow of the program. The library can be invoked whenever and wherever you like. Contrary to this, when you use a framework, the flow is controlled by the framework. The framework instructs you where to put your code, but it will call your code as required. Simply put, our code calls the library’s code, but in a framework, it’s the framework’s code that calls our code as shown in the below diagram.</p><p>Developers can invoke libraries to perform specific tasks by using components, classes, and methods. A framework, however, already provides code to perform common tasks and uses code provided by a developer for custom functionality.</p><h2 id="Creating-new-empty-files-at-CML"><a href="#Creating-new-empty-files-at-CML" class="headerlink" title="Creating new empty files at CML"></a>Creating new empty files at CML</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> . &gt; filename</span><br></pre></td></tr></table></figure><h2 id="Python-decorator"><a href="#Python-decorator" class="headerlink" title="Python decorator"></a>Python decorator</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">decorator_function</span>(<span class="params">function</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper_function</span>():</span><br><span class="line">        <span class="comment"># additional functionality</span></span><br><span class="line">        function()</span><br><span class="line">        <span class="comment"># additional functionality</span></span><br><span class="line">    <span class="keyword">return</span> wrapper_function</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> web development </tag>
            
            <tag> flask </tag>
            
            <tag> backend </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《天道》詩賞析</title>
      <link href="/posts/%E3%80%8A%E5%A4%A9%E9%81%93%E3%80%8B%E8%A9%A9%E8%B3%9E%E6%9E%90/"/>
      <url>/posts/%E3%80%8A%E5%A4%A9%E9%81%93%E3%80%8B%E8%A9%A9%E8%B3%9E%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<style>    #intro {        font-family: Noto Serif TC;        text-align: center;        font-size: 1.3em;    }    #intro h2 {        margin-bottom: 0;    }    #intro .small.gray {        font-size: 1rem;        color: gray;    }    #article-container {        font-family: Noto Serif TC;        font-size: 1.3em;    }</style><div id="intro">    <h2>天道</h2>    <p>        <span class="small gray">五代·馮道</span><br>        <span class="small gray">五言律詩</span><br>        <span>窮達皆由命，何勞發嘆聲。</span><br>        <span>但知行好事，莫要問前程。</span><br>        <span>冬去冰須泮，春來草自生。</span><br>        <span>請君觀此理，天道甚分明。</span><br>    </p></div><h2 id="作者簡介"><a href="#作者簡介" class="headerlink" title="作者簡介"></a>作者簡介</h2><p>生卒：公元882—954年<br>介紹：五代時瀛州景城（今河北河間東）人，字可道，自號長樂老。唐末為劉守光幽州掾。後唐莊宗同光元年（923年）為翰林學士，遷中書舍人、戶部侍郎。明宗天成元年（926年），拜端明殿學士，遷中書侍郎、刑部尚書平章事，改門下侍郎，戶部、吏部尚書，集賢殿弘文館大學士，加尚書左仆射。末帝立，出為同州節度使，入為司空。後晉時，守司空同中書門下平章事。少帝時，進封燕國公。後又歷仕契丹、後漢、後周。廣順初，拜太師兼中書令。顯德元年（954年）卒。追封瀛王，謚文懿。道歷事四朝，在相位20余年，生平見新、舊《五代史》本傳。道好學能文，暇時唯以披誦吟諷為事。《舊五代史》謂其文「典麗之外，義含古道」。吳處厚稱其「詩雖淺近而多諳理」（《青箱雜記》卷七）。《宋史·藝文誌七》著錄《馮道集》6卷、《河間集》5卷、《詩集》10卷，今皆佚。《全唐詩》存詩5首及斷句若干，《全唐詩外編》及《全唐詩續拾》補詩2首、斷句1。</p><h2 id="賞析"><a href="#賞析" class="headerlink" title="賞析"></a>賞析</h2><p>馮道歷事五朝（後唐、後晉、契丹（滅後晉後定國號「大遼」）、後漢及後周）、八姓（後唐李存勗（本姓朱邪）、李嗣源（本姓不詳）及其養子李從珂（本姓王）、後晉石氏、遼國耶律氏、後漢劉氏、後周郭威及其養子柴榮）、十一帝（後唐四代（莊宗李存勗、明宗嗣源、閔帝從厚及末帝從珂）、後晉兩代（高祖石敬瑭及出帝重貴）、遼一代（太宗耶律德光）、後漢兩代（高祖劉知遠及隱帝承祐）、後周兩代（太祖郭威及世宗柴榮）），「累朝不離將相、三公、三師之位」，前後為官四十多年，堪稱中國官場史上的不倒翁。贊其如薛居正者，說他事親濟民、提攜賢良，是「以持重鎮俗為己任」之垂範；謗其如歐陽修者，則認為他賣主求榮、反復無常，是一個「不知廉恥」的典型。忠臣也好，奸佞也罷，如仲尼之賢，尚有叔孫武叔之毀，更何況是馮道呢？</p><p>馮道能在這興亡接踵之世，不僅歷仕五朝、長居相位，而且在事親、濟民、主政、提攜賢良上的表現，也都符合傳統中君子、聖賢的行為標準，更是與其同時代的人心目中的模範。他的人生之「道」是什麼？也許，我們可以在這首《天道》中，窺知一二。</p><p>詩歌的寫作背景已無可考證，以議論入詩，語言淺近質樸，明白如話，卻含蘊頗深。</p><p>作者說，人生的窮困或是顯達皆由上天註定，不必滿身怨悱牢騷、長吁短嘆。那又應該怎樣做呢？頷聯便給予了回答：只要（自己）行端履正，所作所為於國有益、與民有利，個人的得失榮辱又何須計較呢？</p><p>頸聯又做了一個極其形象的類比，正如冬去春來，冰消草生，日月輪轉，萬物更新，以此觀之，天道自明。</p><p>寥寥數語就將抽象的自然之道、人生之理闡述得由淺入深而又發人深省，既有儒家循禮守節的風度，也不乏道家的不爭無為的心境。「但知行好事，莫要問前程。」也就此成了人們安本分、守本心、以不變應萬變的至理名言。</p><p>事實上，作者是這樣說的，也是這樣做的。</p><p>馮道出身耕讀，品性淳厚，少有才名，勤奮好學，即使大雪擁戶、塵垢滿身，依然安貧樂道。初登仕途，為燕王劉守光的參軍，他身先士卒，與士兵同甘共苦——「居一茅庵，與從人同器而食，臥則芻槁一束，其心晏如也」。哪怕是後來出將入相、位居翰林，適逢饑饉，他也能傾盡所有，開倉濟民，甚至幫助老弱，深夜負薪耕田，「不以為德」。若不是朝堂之上他執筆踟躕、正言直諫，恐怕大將郭崇韜早已身首異處，哪來的後唐盛景呢？</p><p>「莫為危時便愴神，前程往往有期因。須知海嶽歸明主，未必乾坤陷吉人。道德幾時曾去世，舟車何處不通津？但教方寸無諸惡，狼虎叢中也立身。」在他的另一首詩《偶作》中，我們可以看到與本詩幾乎相同的人生態度，馮道的個人品德、為政操守之高尚是毋庸置疑的。</p><p>在那個虎狼環伺、動蕩不安的歲月裏，士大夫們大多循規蹈矩，固守著「不求兼濟，但求獨善」的禮法原則，選擇屈就一隅、隱逸山野，用最溫和的抗爭方式，保持著人格的潔凈與獨立，雖然明哲保身，卻也無功於世。可馮道呢，他沒有置身事外，而是積極入世，救民水火，以自己的恪盡職守，去彌合戰爭帶給萬千百姓的創傷。無可否認，馮道轉事多主，稱臣胡夷（契丹），於兩宋和後世看來，確無氣節可言。但後人若以太平盛世時的道德標准，去審視一個連混世保身都要用盡全力的時代，是不是有失公允呢？</p><p>他沒有忠於一朝一君，卻忠於了蒼生黎民，恪守了自己心中的道——心存善念，順勢而為，但行好事，不問前程。和那些明哲保身、空老林泉的「君子」相較，誰才是真正的小人呢？正像馮道在《自敘》中所寫：「所願者，下不欺於地，中不欺於人，上不欺於天」——請君觀此理，天道甚分明。</p>]]></content>
      
      
      <categories>
          
          <category> literature </category>
          
      </categories>
      
      
        <tags>
            
            <tag> poem </tag>
            
            <tag> classics </tag>
            
            <tag> literature </tag>
            
            <tag> 馮道 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>A Simple Blackjack Program</title>
      <link href="/posts/A-Simple-Blackjack-Program/"/>
      <url>/posts/A-Simple-Blackjack-Program/</url>
      
        <content type="html"><![CDATA[<div align="center"><h2>Simple Blackjack</h2><h3>A CLI single-player blackjack program</h3></div><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> _     _            _    _            _</span><br><span class="line">| |   | |          | |  (_)          | |      ___   ___ </span><br><span class="line">| |__ | | __ _  ___| | ___  __ _  ___| | __  |A  | |K  |</span><br><span class="line">| &#x27;_ \| |/ _` |/ __| |/ / |/ _` |/ __| |/ /  | ♠ | | ♦ |</span><br><span class="line">| |_) | | (_| | (__|   &lt;| | (_| | (__|   &lt;   |__A| |__K|</span><br><span class="line">|_.__/|_|\__,_|\___|_|\_\ |\__,_|\___|_|\_\</span><br><span class="line">                       _/ |</span><br><span class="line">                      |__/</span><br></pre></td></tr></table></figure><h2 id="GitHub-repository"><a href="#GitHub-repository" class="headerlink" title="GitHub repository"></a>GitHub repository</h2><p>Click <a href="https://github.com/Freedempire/simple_blackjack">here</a> for the repository.</p><h2 id="Screenshots"><a href="#Screenshots" class="headerlink" title="Screenshots"></a>Screenshots</h2><p><img src="https://i.ibb.co/7KR58JV/simple-blackjack-1.png" alt="screenshot 1"><br><img src="https://i.ibb.co/4sKtmSp/simple-blackjack-2.png" alt="screenshot 2"><br><img src="https://i.ibb.co/thbDkJ5/simple-blackjack-3.png" alt="screenshot 3"><br><img src="https://i.ibb.co/Jd3WxB4/simple-blackjack-4.png" alt="screenshot 4"><br><img src="https://i.ibb.co/TTZF35k/simple-blackjack-5.png" alt="screenshot 5"></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> blackjack </tag>
            
            <tag> cli </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kiama Beach</title>
      <link href="/posts/Kiama-Beach/"/>
      <url>/posts/Kiama-Beach/</url>
      
        <content type="html"><![CDATA[<div class="gallery">    <div class="fj-gallery lazyload data" data-rowHeight="220" data-limit="5">    <span class="gallery-data">[{"url":"https://i.ibb.co/1MD2kWR/PXL-20230611-014928037.jpg","alt":""},{"url":"https://i.ibb.co/SsCH16S/PXL-20230611-011358421.jpg","alt":""},{"url":"https://i.ibb.co/g6TwnQF/PXL-20230611-011409738.jpg","alt":""},{"url":"https://i.ibb.co/Bj3j8LK/PXL-20230611-011839234-MP.jpg","alt":""},{"url":"https://i.ibb.co/M6LGDbf/PXL-20230611-011843134-MP.jpg","alt":""},{"url":"https://i.ibb.co/XLr86ZK/PXL-20230611-011915355.jpg","alt":""},{"url":"https://i.ibb.co/tqv62ds/PXL-20230611-012813274.jpg","alt":""},{"url":"https://i.ibb.co/HTFfT5r/PXL-20230611-012929199-MP.jpg","alt":""},{"url":"https://i.ibb.co/2ddgj2N/PXL-20230611-013056918-MP.jpg","alt":""},{"url":"https://i.ibb.co/Tv0DptM/PXL-20230611-013100268-MP.jpg","alt":""},{"url":"https://i.ibb.co/n1c26Cg/PXL-20230611-013505523.jpg","alt":""},{"url":"https://i.ibb.co/tz04sGk/PXL-20230611-013844745.jpg","alt":""},{"url":"https://i.ibb.co/XbFqnGt/PXL-20230611-014048250-MP.jpg","alt":""},{"url":"https://i.ibb.co/zPpWhYf/PXL-20230611-014143996-MP.jpg","alt":""},{"url":"https://i.ibb.co/T2wtw71/PXL-20230611-014717282-MP.jpg","alt":""}]</span>    </div>    <button class="gallery-load-more"><span>Load More</span><i class="fa-solid fa-arrow-down"></i></button>    </div>]]></content>
      
      
      <categories>
          
          <category> gallery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gallery </tag>
            
            <tag> beach </tag>
            
            <tag> kiama </tag>
            
            <tag> scenery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Build Your Own Password Manager with Python</title>
      <link href="/posts/Build-Your-Own-Password-Manager-with-Python/"/>
      <url>/posts/Build-Your-Own-Password-Manager-with-Python/</url>
      
        <content type="html"><![CDATA[<div align="center"><img src="https://i.ibb.co/qyjfYBf/cyber-crime.png" width="40%" height="40%" alt="logo" /><h2>Password Manager</h2><h3>A simple desktop password management tool</h3></div><p>The <strong>Password Manager</strong> (<a href="https://github.com/Freedempire/PasswordManager/blob/master/README.md">github repo</a>) is a simple <em>windows</em> desktop application that allows users to manage their passwords securely and easily. It uses <a href="https://en.wikipedia.org/wiki/Scrypt">scrypt</a> password-based key derivation function from standard package <a href="https://docs.python.org/3/library/hashlib.html">hashlib</a> for hashing the master password for each user of the app, and stores the hash value in a database. The password records to be managed are encrypted with unique salt using <a href="https://cryptography.io/en/latest/fernet/">Fernet</a> from <a href="https://pypi.org/project/cryptography/">cryptography</a> package.</p><h2 id="Screenshots"><a href="#Screenshots" class="headerlink" title="Screenshots"></a>Screenshots</h2><h3 id="Login-x2F-Signup-Frame"><a href="#Login-x2F-Signup-Frame" class="headerlink" title="Login &#x2F; Signup Frame"></a>Login &#x2F; Signup Frame</h3><p><img src="https://i.ibb.co/YLXjvcQ/screenshot-login.png" alt="login"></p><h3 id="Password-Entries-Frame"><a href="#Password-Entries-Frame" class="headerlink" title="Password Entries Frame"></a>Password Entries Frame</h3><p><img src="https://i.ibb.co/hVKDhNY/screenshot-passwords.png" alt="passwords"></p><h2 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h2><ul><li><strong>Multiple</strong> users can use the app, each with their own password and unique salt.</li><li>Master password is hashed using <strong>scrypt</strong> and stored in database.</li><li>Password records are encrypted with unique salt using <code>Fernet</code> from <code>cryptography</code> package.</li><li>Records can be easily <strong>searched</strong> and <strong>manipulated</strong>.</li><li>App can generate <strong>random</strong> passwords triggered by typing ‘[random]’ in the password input box.</li></ul><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><ol><li>Clone the repository to your local machine using <code>git clone https://github.com/Freedempire/PasswordManager.git</code></li><li>Install the required dependencies using <code>pip install -r requirements.txt</code></li><li>Run the app using <code>python pmapp.py</code></li></ol><h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><ol><li>Create a new user account by entering a new username and password then clicking on the “Sign Up” button and finish the password confirmation.</li><li>Log in to the app using your username and password then clicking on the “Log In” button.</li><li>To add a new password record, fill in the required details then click on the “Add” button.</li><li>To edit a password record, first double-click the record from the list and make modifications as you wish, finally click on the “Update” button.</li><li>To delete a password record, double-click the record from the list and then click on the “Delete” button.</li><li>To generate a random password, simply type in ‘[random]’ in the Password input box of the details section, then press <kbd>Tab</kbd> or <kbd>Enter</kbd> to trigger the auto generation.</li><li>You can also use <kbd>Tab</kbd> or <kbd>Enter</kbd> to jump from one input box to the next while editing password entry.</li><li>The “Clear” button can be used to clear all inputs in the input boxes. It also clears the current selection status, i.e. the status shows which has been lastly double-clicked.</li></ol><h2 id="Security"><a href="#Security" class="headerlink" title="Security"></a>Security</h2><p>This app takes security seriously and implements several measures to ensure the safety of user data. The use of scrypt for hashing the master password and unique salt with Fernet for encrypting the password records provide strong protection against brute force and dictionary attacks. Additionally, the app does not store any plaintext passwords or the master key, further reducing the risk of data breaches.</p><h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p>This project is licensed under the MIT License - see the <a href="https://opensource.org/license/mit/">LICENSE</a> file for details.</p><p>Copyright © Freedempire. All rights reserved.</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> password </tag>
            
            <tag> cryptography </tag>
            
            <tag> tkinter </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
