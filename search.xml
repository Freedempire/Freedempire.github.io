<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Day 63 of 100 Days of Code</title>
      <link href="/posts/Day-63-of-100-Days-of-Code/"/>
      <url>/posts/Day-63-of-100-Days-of-Code/</url>
      
        <content type="html"><![CDATA[<style>    #intro {        text-align: center;    }</style><div id="intro">    <h2>Databases and with SQLite and SQLAlchemy</h2>    <h3>Learning Log: Day 63 of 100 Days of Code</h3>    <p>GitHub Repo: <a href="https://github.com/Freedempire/100_days_of_code.git">100_days_of_code</a></p></div><h2 id="SQLite"><a href="#SQLite" class="headerlink" title="SQLite"></a>SQLite</h2><p>SQLite is a C library that provides a lightweight disk-based database that doesn’t require a separate server process and allows accessing the database using a nonstandard variant of the SQL query language. Some applications can use SQLite for internal data storage. It’s also possible to <em>prototype</em> an application using SQLite and then port the code to a larger database such as <strong>PostgreSQL</strong> or <strong>Oracle</strong>.</p><h3 id="Tutorial"><a href="#Tutorial" class="headerlink" title="Tutorial"></a>Tutorial</h3><p>First, we need to create a new database and open a database connection to allow sqlite3 to work with it. Call <a href="https://docs.python.org/3/library/sqlite3.html#sqlite3.connect">sqlite3.connect()</a> to create a connection to the database <code>tutorial.db</code> in the current working directory, <em>implicitly</em> creating it if it does not exist:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line">con = sqlite3.connect(<span class="string">&quot;tutorial.db&quot;</span>)</span><br></pre></td></tr></table></figure><p>The returned <a href="https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection">Connection</a> object con represents the connection to the on-disk database.</p><p>In order to execute SQL statements and fetch results from SQL queries, we will need to use a database cursor. Call <a href="https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.cursor">con.cursor()</a> to create the <a href="https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor">Cursor</a>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cur = con.cursor()</span><br></pre></td></tr></table></figure><p>For simplicity, we can just use column names in the table declaration – thanks to the <a href="https://www.sqlite.org/flextypegood.html">flexible typing</a> feature of SQLite, specifying the data types is optional. Execute the <code>CREATE TABLE</code> statement by calling <a href="https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.execute">cur.execute(…)</a>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cur.execute(<span class="string">&quot;CREATE TABLE movie(title, year, score)&quot;</span>)</span><br></pre></td></tr></table></figure><p>We can verify that the new table has been created by querying the <code>sqlite_master</code> table built-in to SQLite, which should now contain an entry for the movie table definition (see <a href="https://www.sqlite.org/schematab.html">The Schema Table</a> for details). Execute that query by calling <code>cur.execute(...)</code>, assign the result to <code>res</code>, and call <a href="https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.fetchone">res.fetchone()</a> to fetch the resulting row:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; res = cur.execute(<span class="string">&quot;SELECT name FROM sqlite_master&quot;</span>)</span><br><span class="line">&gt;&gt;&gt; res.fetchone()</span><br><span class="line">(<span class="string">&#x27;movie&#x27;</span>,)</span><br><span class="line">&gt;&gt;&gt; res = cur.execute(<span class="string">&quot;SELECT name FROM sqlite_master WHERE name=&#x27;spam&#x27;&quot;</span>)</span><br><span class="line">&gt;&gt;&gt; res.fetchone() is None</span><br><span class="line">True</span><br></pre></td></tr></table></figure><p>Now, add two rows of data supplied as SQL literals by executing an <code>INSERT</code> statement, once again by calling <code>cur.execute(...)</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cur.execute(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    INSERT INTO movie VALUES</span></span><br><span class="line"><span class="string">        (&#x27;Monty Python and the Holy Grail&#x27;, 1975, 8.2),</span></span><br><span class="line"><span class="string">        (&#x27;And Now for Something Completely Different&#x27;, 1971, 7.5)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><p>The <code>INSERT</code> statement implicitly opens a <em>transaction</em>, which needs to be committed before changes are saved in the database (see <a href="https://docs.python.org/3/library/sqlite3.html#sqlite3-controlling-transactions">Transaction control</a> for details). Call <a href="https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.commit">con.commit()</a> on the connection object to commit the transaction:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">con.commit()</span><br></pre></td></tr></table></figure><p>We can verify that the data was inserted correctly by executing a <code>SELECT</code> query. Use the now-familiar <code>cur.execute(...)</code> to assign the result to <code>res</code>, and call <a href="https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.fetchall">res.fetchall()</a> to return all resulting rows:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; res = cur.execute(<span class="string">&quot;SELECT score FROM movie&quot;</span>)</span><br><span class="line">&gt;&gt;&gt; res.fetchall()</span><br><span class="line">[(8.2,), (7.5,)]</span><br></pre></td></tr></table></figure><p>Now, insert three more rows by calling <a href="https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.executemany">cur.executemany(…)</a>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">data = [</span><br><span class="line">    (<span class="string">&quot;Monty Python Live at the Hollywood Bowl&quot;</span>, <span class="number">1982</span>, <span class="number">7.9</span>),</span><br><span class="line">    (<span class="string">&quot;Monty Python&#x27;s The Meaning of Life&quot;</span>, <span class="number">1983</span>, <span class="number">7.5</span>),</span><br><span class="line">    (<span class="string">&quot;Monty Python&#x27;s Life of Brian&quot;</span>, <span class="number">1979</span>, <span class="number">8.0</span>),</span><br><span class="line">]</span><br><span class="line">cur.executemany(<span class="string">&quot;INSERT INTO movie VALUES(?, ?, ?)&quot;</span>, data)</span><br><span class="line">con.commit()</span><br></pre></td></tr></table></figure><p>Notice that <code>?</code> placeholders are used to bind data to the query. <em>Always</em> use placeholders instead of string formatting to bind Python values to SQL statements, to avoid <a href="https://en.wikipedia.org/wiki/SQL_injection">SQL injection attacks</a>.</p><p>We can verify that the new rows were inserted by executing a <code>SELECT</code> query, this time iterating over the results of the query:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="keyword">for</span> row <span class="keyword">in</span> cur.execute(<span class="string">&quot;SELECT year, title FROM movie ORDER BY year&quot;</span>):</span><br><span class="line">&gt;&gt;&gt;     <span class="built_in">print</span>(row)</span><br><span class="line">(1971, <span class="string">&#x27;And Now for Something Completely Different&#x27;</span>)</span><br><span class="line">(1975, <span class="string">&#x27;Monty Python and the Holy Grail&#x27;</span>)</span><br><span class="line">(1979, <span class="string">&quot;Monty Python&#x27;s Life of Brian&quot;</span>)</span><br><span class="line">(1982, <span class="string">&#x27;Monty Python Live at the Hollywood Bowl&#x27;</span>)</span><br><span class="line">(1983, <span class="string">&quot;Monty Python&#x27;s The Meaning of Life&quot;</span>)</span><br></pre></td></tr></table></figure><p>Finally, verify that the database has been written to disk by calling <a href="https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.close">con.close()</a> to close the existing connection, opening a new one, creating a new cursor, then querying the database:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; con.close()</span><br><span class="line">&gt;&gt;&gt; new_con = sqlite3.connect(<span class="string">&quot;tutorial.db&quot;</span>)</span><br><span class="line">&gt;&gt;&gt; new_cur = new_con.cursor()</span><br><span class="line">&gt;&gt;&gt; res = new_cur.execute(<span class="string">&quot;SELECT title, year FROM movie ORDER BY score DESC&quot;</span>)</span><br><span class="line">&gt;&gt;&gt; title, year = res.fetchone()</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">print</span>(f<span class="string">&#x27;The highest scoring Monty Python movie is &#123;title!r&#125;, released in &#123;year&#125;&#x27;</span>)</span><br><span class="line">The highest scoring Monty Python movie is <span class="string">&#x27;Monty Python and the Holy Grail&#x27;</span>, released <span class="keyword">in</span> 1975</span><br></pre></td></tr></table></figure><p>The <code>!r</code> in the above f-string can be replace by calls to <code>repr()</code>. Similarly, <code>!s</code> can be replaced by calls to <code>str()</code> and <code>!a</code> by calls to <code>ascii()</code>.</p><h3 id="How-to-guides"><a href="#How-to-guides" class="headerlink" title="How-to guides"></a>How-to guides</h3><h4 id="How-to-use-connection-shortcut-methods"><a href="#How-to-use-connection-shortcut-methods" class="headerlink" title="How to use connection shortcut methods"></a>How to use connection shortcut methods</h4><p>Using the <a href="https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.execute">execute()</a>, <a href="https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.executemany">executemany()</a>, and <a href="https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.executescript">executescript()</a> methods of the <a href="https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection">Connection</a> class, your code can be written more concisely because you don’t have to create the (often superfluous) <a href="https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor">Cursor</a> objects explicitly. Instead, the Cursor objects are created <em>implicitly</em> and these shortcut methods <em>return the cursor objects</em>. This way, you can execute a <code>SELECT</code> statement and iterate over it directly using only a single call on the Connection object.</p><h4 id="How-to-use-the-connection-context-manager"><a href="#How-to-use-the-connection-context-manager" class="headerlink" title="How to use the connection context manager"></a>How to use the connection context manager</h4><p>A <code>Connection</code> object can be used as a context manager that automatically <em>commits</em> or <em>rolls back</em> open <em>transactions</em> when leaving the body of the context manager. If the body of the with statement finishes without exceptions, the transaction is committed. If this commit fails, or if the body of the with statement raises an uncaught exception, the transaction is rolled back.</p><p>If there is no open transaction upon leaving the body of the with statement, the context manager is a no-op (no operation).</p><p>Note The context manager neither implicitly opens a new transaction nor closes the connection.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">con = sqlite3.connect(<span class="string">&quot;:memory:&quot;</span>)</span><br><span class="line">con.execute(<span class="string">&quot;CREATE TABLE lang(id INTEGER PRIMARY KEY, name VARCHAR UNIQUE)&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Successful, con.commit() is called automatically afterwards</span></span><br><span class="line"><span class="keyword">with</span> con:</span><br><span class="line">    con.execute(<span class="string">&quot;INSERT INTO lang(name) VALUES(?)&quot;</span>, (<span class="string">&quot;Python&quot;</span>,))</span><br><span class="line"></span><br><span class="line"><span class="comment"># con.rollback() is called after the with block finishes with an exception,</span></span><br><span class="line"><span class="comment"># the exception is still raised and must be caught</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> con:</span><br><span class="line">        con.execute(<span class="string">&quot;INSERT INTO lang(name) VALUES(?)&quot;</span>, (<span class="string">&quot;Python&quot;</span>,))</span><br><span class="line"><span class="keyword">except</span> sqlite3.IntegrityError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;couldn&#x27;t add Python twice&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Connection object used as context manager only commits or rollbacks transactions,</span></span><br><span class="line"><span class="comment"># so the connection object should be closed manually</span></span><br><span class="line">con.close()</span><br></pre></td></tr></table></figure><h4 id="How-to-use-placeholders-to-bind-values-in-SQL-queries"><a href="#How-to-use-placeholders-to-bind-values-in-SQL-queries" class="headerlink" title="How to use placeholders to bind values in SQL queries"></a>How to use placeholders to bind values in SQL queries</h4><p>SQL operations usually need to use values from Python variables. However, beware of using Python’s string operations to assemble queries, as they are vulnerable to <a href="https://en.wikipedia.org/wiki/SQL_injection">SQL injection attacks</a>. For example, an attacker can simply close the single quote and inject OR TRUE to select all rows:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="comment"># Never do this -- insecure!</span></span><br><span class="line">&gt;&gt;&gt; symbol = input()</span><br><span class="line"><span class="string">&#x27; OR TRUE; --</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; sql = &quot;SELECT * FROM stocks WHERE symbol = &#x27;</span>%s<span class="string">&#x27;&quot; % symbol</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; print(sql)</span></span><br><span class="line"><span class="string">SELECT * FROM stocks WHERE symbol = &#x27;</span><span class="string">&#x27; OR TRUE; --&#x27;</span></span><br><span class="line">&gt;&gt;&gt; cur.execute(sql)</span><br></pre></td></tr></table></figure><p>Instead, use the DB-API’s parameter substitution. To insert a variable into a query string, use a <em>placeholder</em> in the string, and substitute the actual values into the query by providing them as a tuple of values to the second argument of the cursor’s <code>execute()</code> method.</p><p>An SQL statement may use one of two kinds of placeholders: <strong>question marks</strong> (qmark style) or <strong>named placeholders</strong> (named style). For the qmark style, parameters must be a <em>sequence</em> whose length must match the number of placeholders, or a <code>ProgrammingError</code> is raised. For the named style, parameters should be an instance of a <em>dict</em> (or a subclass), which must contain keys for all named parameters; any extra items are <em>ignored</em>. Here’s an example of both styles:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">con = sqlite3.connect(<span class="string">&quot;:memory:&quot;</span>)</span><br><span class="line">cur = con.execute(<span class="string">&quot;CREATE TABLE lang(name, first_appeared)&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># This is the named style used with executemany():</span></span><br><span class="line">data = (</span><br><span class="line">    &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;C&quot;</span>, <span class="string">&quot;year&quot;</span>: <span class="number">1972</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Fortran&quot;</span>, <span class="string">&quot;year&quot;</span>: <span class="number">1957</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Python&quot;</span>, <span class="string">&quot;year&quot;</span>: <span class="number">1991</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Go&quot;</span>, <span class="string">&quot;year&quot;</span>: <span class="number">2009</span>&#125;,</span><br><span class="line">)</span><br><span class="line">cur.executemany(<span class="string">&quot;INSERT INTO lang VALUES(:name, :year)&quot;</span>, data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># This is the qmark style used in a SELECT query:</span></span><br><span class="line">params = (<span class="number">1972</span>,)</span><br><span class="line">cur.execute(<span class="string">&quot;SELECT * FROM lang WHERE first_appeared = ?&quot;</span>, params)</span><br><span class="line"><span class="built_in">print</span>(cur.fetchall())</span><br></pre></td></tr></table></figure><h4 id="How-to-create-and-use-row-factories"><a href="#How-to-create-and-use-row-factories" class="headerlink" title="How to create and use row factories"></a>How to create and use row factories</h4><p>By default, sqlite3 represents each row as a tuple. If a tuple does not suit your needs, you can use the <a href="https://docs.python.org/3/library/sqlite3.html#sqlite3.Row">sqlite3.Row</a> class or a custom <a href="https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.row_factory">row_factory</a>.</p><p>While <code>row_factory</code> exists as an attribute both on the <code>Cursor</code> and the <code>Connection</code>, it is recommended to set <code>Connection.row_factory</code>, so all cursors created from the connection will use the same row factory.</p><p><code>Row</code> provides indexed and case-insensitive named access to columns, with minimal memory overhead and performance impact over a tuple. To use <code>Row</code> as a row factory, assign it to the row_factory attribute:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; con = sqlite3.connect(<span class="string">&quot;:memory:&quot;</span>)</span><br><span class="line">&gt;&gt;&gt; con.row_factory = sqlite3.Row</span><br></pre></td></tr></table></figure><p>Queries now return Row objects:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; res = con.execute(<span class="string">&quot;SELECT &#x27;Earth&#x27; AS name, 6378 AS radius&quot;</span>)</span><br><span class="line">&gt;&gt;&gt; row = res.fetchone()</span><br><span class="line">&gt;&gt;&gt; row.keys()</span><br><span class="line">[<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;radius&#x27;</span>]</span><br><span class="line">&gt;&gt;&gt; row[0]         <span class="comment"># Access by index.</span></span><br><span class="line"><span class="string">&#x27;Earth&#x27;</span></span><br><span class="line">&gt;&gt;&gt; row[<span class="string">&quot;name&quot;</span>]    <span class="comment"># Access by name.</span></span><br><span class="line"><span class="string">&#x27;Earth&#x27;</span></span><br><span class="line">&gt;&gt;&gt; row[<span class="string">&quot;RADIUS&quot;</span>]  <span class="comment"># Column names are case-insensitive.</span></span><br><span class="line">6378</span><br></pre></td></tr></table></figure><p>You can create a custom <code>row_factory</code> that returns each row as a dict, with column names mapped to values:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">dict_factory</span>(<span class="params">cursor, row</span>):</span><br><span class="line">    fields = [column[<span class="number">0</span>] <span class="keyword">for</span> column <span class="keyword">in</span> cursor.description]</span><br><span class="line">    <span class="keyword">return</span> &#123;key: value <span class="keyword">for</span> key, value <span class="keyword">in</span> <span class="built_in">zip</span>(fields, row)&#125;</span><br></pre></td></tr></table></figure><p>Using it, queries now return a dict instead of a tuple:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; con = sqlite3.connect(<span class="string">&quot;:memory:&quot;</span>)</span><br><span class="line">&gt;&gt;&gt; con.row_factory = dict_factory</span><br><span class="line">&gt;&gt;&gt; <span class="keyword">for</span> row <span class="keyword">in</span> con.execute(<span class="string">&quot;SELECT 1 AS a, 2 AS b&quot;</span>):</span><br><span class="line">...     <span class="built_in">print</span>(row)</span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>: 1, <span class="string">&#x27;b&#x27;</span>: 2&#125;</span><br></pre></td></tr></table></figure><h3 id="Standard-commands"><a href="#Standard-commands" class="headerlink" title="Standard commands"></a>Standard commands</h3><p><a href="https://www.codecademy.com/article/sql-commands">SQL Commands</a></p><h4 id="Data-definition"><a href="#Data-definition" class="headerlink" title="Data definition"></a>Data definition</h4><ul><li><a href="https://www.sqlite.org/lang_createtable.html">CREATE</a></li><li><a href="https://www.sqlite.org/lang_altertable.html">ALTER</a></li><li><a href="https://www.sqlite.org/lang_droptable.html">DROP</a></li></ul><h4 id="Data-manipulation"><a href="#Data-manipulation" class="headerlink" title="Data manipulation"></a>Data manipulation</h4><ul><li><a href="https://www.sqlite.org/lang_insert.html">INSERT</a></li><li><a href="https://www.sqlite.org/lang_update.html">UPDATE</a></li><li><a href="https://www.sqlite.org/lang_delete.html">DELETE</a></li></ul><h4 id="Data-query"><a href="#Data-query" class="headerlink" title="Data query"></a>Data query</h4><ul><li><a href="https://www.sqlite.org/lang_select.html">SELECT</a></li></ul><h3 id="Datatypes-in-SQLite"><a href="#Datatypes-in-SQLite" class="headerlink" title="Datatypes in SQLite"></a>Datatypes in SQLite</h3><ul><li>NULL. The value is a NULL value.</li><li>INTEGER. The value is a signed integer, stored in 0, 1, 2, 3, 4, 6, or 8 bytes depending on the magnitude of the value.</li><li>REAL. The value is a floating point value, stored as an 8-byte IEEE floating point number.</li><li>TEXT. The value is a text string, stored using the database encoding (UTF-8, UTF-16BE or UTF-16LE).</li><li>BLOB. The value is a blob of data, stored exactly as it was input.</li></ul><h2 id="Flask-SQLAlchemy"><a href="#Flask-SQLAlchemy" class="headerlink" title="Flask-SQLAlchemy"></a>Flask-SQLAlchemy</h2><p><a href="https://flask-sqlalchemy.palletsprojects.com/en/3.0.x/quickstart/">Flask-SQLAlchemy Documentation</a><br><a href="https://docs.sqlalchemy.org/tutorial/index.html">SQLAlchemy Tutorial</a></p><p>Flask-SQLAlchemy simplifies using SQLAlchemy by automatically handling creating, using, and cleaning up the SQLAlchemy objects you’d normally work with. While it adds a few useful features, it still works like SQLAlchemy.</p><h3 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -U Flask-SQLAlchemy</span><br></pre></td></tr></table></figure><h3 id="Configure-the-extension"><a href="#Configure-the-extension" class="headerlink" title="Configure the extension"></a>Configure the extension</h3><p>The only required Flask app config is the <code>SQLALCHEMY_DATABASE_URI</code> key. That is a connection string that tells SQLAlchemy what database to connect to.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"></span><br><span class="line"><span class="comment"># create the extension</span></span><br><span class="line">db = SQLAlchemy()</span><br><span class="line"><span class="comment"># create the app</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="comment"># configure the SQLite database, relative to the app instance folder</span></span><br><span class="line">app.config[<span class="string">&quot;SQLALCHEMY_DATABASE_URI&quot;</span>] = <span class="string">&quot;sqlite:///project.db&quot;</span></span><br><span class="line"><span class="comment"># initialize the app with the extension</span></span><br><span class="line">db.init_app(app)</span><br></pre></td></tr></table></figure><p>The <code>db</code> object gives you access to the <code>db.Model</code> class to define models, and the <code>db.session</code> to execute queries.</p><h3 id="Define-models"><a href="#Define-models" class="headerlink" title="Define models"></a>Define models</h3><p>Subclass <code>db.Model</code> to define a model class. The <code>db</code> object makes the names in <code>sqlalchemy</code> and <code>sqlalchemy.orm</code> available for convenience, such as <code>db.Column</code>. The model will generate a table name by converting the CamelCase class name to snake_case.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(db.Model):</span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    username = db.Column(db.String, unique=<span class="literal">True</span>, nullable=<span class="literal">False</span>)</span><br><span class="line">    email = db.Column(db.String)</span><br></pre></td></tr></table></figure><h3 id="Create-the-tables"><a href="#Create-the-tables" class="headerlink" title="Create the tables"></a>Create the tables</h3><p>After all models and tables are defined, call <code>SQLAlchemy.create_all()</code> to create the table schema in the database. This requires an application context. Since you’re not in a request at this point, create one manually.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> app.app_context():</span><br><span class="line">    db.create_all()</span><br></pre></td></tr></table></figure><p>If you define models in other modules, you must import them before calling <code>create_all</code>, otherwise SQLAlchemy will not know about them.</p><p><code>create_all</code> does not update tables if they are already in the database. If you change a model’s columns, use a migration library like Alembic with Flask-Alembic or Flask-Migrate to generate migrations that update the database schema.</p><h3 id="Query-the-data"><a href="#Query-the-data" class="headerlink" title="Query the data"></a>Query the data</h3><p>Within a Flask view or CLI command, you can use <code>db.session</code> to execute queries and modify model data.</p><p>SQLAlchemy automatically defines an <code>__init__</code> method for each model that assigns any keyword arguments to corresponding database columns and other attributes.</p><p><code>db.session.add(obj)</code> adds an object to the session, to be inserted. Modifying an object’s attributes updates the object. <code>db.session.delete(obj)</code> deletes an object. Remember to call <code>db.session.commit()</code> after modifying, adding, or deleting any data.</p><p><code>db.session.execute(db.select(...))</code> constructs a query to select data from the database. Building queries is the main feature of SQLAlchemy, so you’ll want to read its <a href="https://docs.sqlalchemy.org/tutorial/data_select.html">tutorial on select</a> to learn all about it. You’ll usually use the <code>Result.scalars()</code> method to get a list of results, or the <code>Result.scalar()</code> method to get a single result.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/users&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">user_list</span>():</span><br><span class="line">    users = db.session.execute(db.select(User).order_by(User.username)).scalars()</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;user/list.html&quot;</span>, users=users)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/users/create&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">user_create</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">        user = User(</span><br><span class="line">            username=request.form[<span class="string">&quot;username&quot;</span>],</span><br><span class="line">            email=request.form[<span class="string">&quot;email&quot;</span>],</span><br><span class="line">        )</span><br><span class="line">        db.session.add(user)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&quot;user_detail&quot;</span>, <span class="built_in">id</span>=user.<span class="built_in">id</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;user/create.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/user/&lt;int:id&gt;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">user_detail</span>(<span class="params"><span class="built_in">id</span></span>):</span><br><span class="line">    user = db.get_or_404(User, <span class="built_in">id</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;user/detail.html&quot;</span>, user=user)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/user/&lt;int:id&gt;/delete&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">user_delete</span>(<span class="params"><span class="built_in">id</span></span>):</span><br><span class="line">    user = db.get_or_404(User, <span class="built_in">id</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">        db.session.delete(user)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&quot;user_list&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;user/delete.html&quot;</span>, user=user)</span><br></pre></td></tr></table></figure><p>You may see uses of <code>Model.query</code> to build queries. This is an older interface for queries that is considered legacy in SQLAlchemy. Prefer using <code>db.session.execute(db.select(...))</code> instead.</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> web development </tag>
            
            <tag> flask </tag>
            
            <tag> backend </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day 62 of 100 Days of Code</title>
      <link href="/posts/Day-62-of-100-Days-of-Code/"/>
      <url>/posts/Day-62-of-100-Days-of-Code/</url>
      
        <content type="html"><![CDATA[<style>    #intro {        text-align: center;    }</style><div id="intro">    <h2>Flask, WTForms, Bootstrap and CSV</h2>    <h3>Learning Log: Day 62 of 100 Days of Code</h3>    <p>GitHub Repo: <a href="https://github.com/Freedempire/100_days_of_code.git">100_days_of_code</a></p></div><h2 id="Screenshots"><a href="#Screenshots" class="headerlink" title="Screenshots"></a>Screenshots</h2><p><img src="https://i.ibb.co/9t1BgyX/coffee-n-wifi1.jpg"><br><img src="https://i.ibb.co/hsrj0qT/coffee-n-wifi2.jpg"><br><img src="https://i.ibb.co/tqFC1Xj/coffee-n-wifi3.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> web development </tag>
            
            <tag> flask </tag>
            
            <tag> backend </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day 61 of 100 Days of Code</title>
      <link href="/posts/Day-61-of-100-Days-of-Code/"/>
      <url>/posts/Day-61-of-100-Days-of-Code/</url>
      
        <content type="html"><![CDATA[<style>    #intro {        text-align: center;    }</style><div id="intro">    <h2>Building Advanced Forms with Flask-WTForms</h2>    <h3>Learning Log: Day 61 of 100 Days of Code</h3>    <p>GitHub Repo: <a href="https://github.com/Freedempire/100_days_of_code.git">100_days_of_code</a></p></div><h2 id="Flask-WTF"><a href="#Flask-WTF" class="headerlink" title="Flask-WTF"></a>Flask-WTF</h2><h3 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h3><p>Install or upgrade using pip:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -U Flask-WTF</span><br></pre></td></tr></table></figure><h3 id="Quick-start"><a href="#Quick-start" class="headerlink" title="Quick start"></a>Quick start</h3><h4 id="Creating-Forms"><a href="#Creating-Forms" class="headerlink" title="Creating Forms"></a>Creating Forms</h4><p>Flask-WTF provides your Flask application integration with WTForms. For example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_wtf <span class="keyword">import</span> FlaskForm</span><br><span class="line"><span class="keyword">from</span> wtforms <span class="keyword">import</span> StringField, SubmitField</span><br><span class="line"><span class="keyword">from</span> wtforms.validators <span class="keyword">import</span> DataRequired</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyForm</span>(<span class="title class_ inherited__">FlaskForm</span>):</span><br><span class="line">    name = StringField(<span class="string">&#x27;Name&#x27;</span>, validators=[DataRequired()])</span><br><span class="line">    submit = SubmitField(<span class="string">&#x27;Submit&#x27;</span>)</span><br></pre></td></tr></table></figure><p>In addition, a CSRF token hidden field is created automatically. You can render this in your template:</p><figure class="highlight jinja"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">action</span>=<span class="string">&quot;/&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-variable">&#123;&#123; form.csrf_token &#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-variable">&#123;&#123; form.name.label &#125;&#125;</span><span class="language-xml"> </span><span class="template-variable">&#123;&#123; form.name(size=20) &#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- &lt;input type=&quot;submit&quot; value=&quot;Go&quot;&gt; --&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-variable">&#123;&#123; form.submit &#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>If your form has multiple hidden fields, you can render them in one block using <code>hidden_tag()</code>.</p><figure class="highlight jinja"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">action</span>=<span class="string">&quot;/&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-variable">&#123;&#123; form.hidden_tag() &#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-variable">&#123;&#123; form.name.label &#125;&#125;</span><span class="language-xml"> </span><span class="template-variable">&#123;&#123; form.name(size=20) &#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Go&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="Validating-Forms"><a href="#Validating-Forms" class="headerlink" title="Validating Forms"></a>Validating Forms</h4><p>Validating the request in your view handlers:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/submit&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">submit</span>():</span><br><span class="line">    form = MyForm()</span><br><span class="line">    <span class="keyword">if</span> form.validate_on_submit():</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&#x27;/success&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;submit.html&#x27;</span>, form=form)</span><br></pre></td></tr></table></figure><p>Note that you don’t have to pass <code>request.form</code> to Flask-WTF; it will load automatically. And the convenient <code>validate_on_submit</code> will check if it is a POST request and if it is valid.</p><p>If your forms include validation, you’ll need to add to your template to display any error messages. Using the <code>form.name</code> field from the example above, that would look like this:</p><figure class="highlight jinja"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> form.name.errors %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;errors&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> error <span class="keyword">in</span> form.name.errors %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><span class="template-variable">&#123;&#123; error &#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">endfor</span></span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span></span><br></pre></td></tr></table></figure><h4 id="Validators"><a href="#Validators" class="headerlink" title="Validators"></a>Validators</h4><p>A <a href="https://wtforms.readthedocs.io/en/3.0.x/validators/#module-wtforms.validators">validator</a> simply takes an input, verifies it fulfills some criterion, such as a maximum length for a string and returns. Or, if the validation fails, raises a <code>ValidationError</code>.</p><h2 id="Bootstrap-Flask"><a href="#Bootstrap-Flask" class="headerlink" title="Bootstrap-Flask"></a>Bootstrap-Flask</h2><h3 id="Installation-1"><a href="#Installation-1" class="headerlink" title="Installation"></a>Installation</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install bootstrap-flask</span><br></pre></td></tr></table></figure><p>This project can’t work with Flask-Bootstrap in the same Python environment. You need to uninstall Flask-Bootstrap and then reinstall this project:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip uninstall flask-bootstrap bootstrap-flask</span><br><span class="line">pip install bootstrap-flask</span><br></pre></td></tr></table></figure><h3 id="Initialization"><a href="#Initialization" class="headerlink" title="Initialization"></a>Initialization</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_bootstrap <span class="keyword">import</span> Bootstrap4</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">bootstrap = Bootstrap4(app)</span><br></pre></td></tr></table></figure><p>If you want to use Bootstrap 5, import and instantiate the Bootstrap5 class instead.</p><h3 id="Resources-Helpers"><a href="#Resources-Helpers" class="headerlink" title="Resources Helpers"></a>Resources Helpers</h3><p>Bootstrap-Flask provides two helper functions to load Bootstrap resources in the template: <code>bootstrap.load_css()</code> and <code>bootstrap.load_js()</code>.</p><p>Call it in your base template, for example:</p><figure class="highlight jinja"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">....</span></span><br><span class="line"><span class="language-xml"></span><span class="template-variable">&#123;&#123; bootstrap.load_css() &#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">...</span></span><br><span class="line"><span class="language-xml"></span><span class="template-variable">&#123;&#123; bootstrap.load_js() &#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="Starter-template"><a href="#Starter-template" class="headerlink" title="Starter template"></a>Starter template</h3><p>For reasons of flexibility, Bootstrap-Flask doesn’t include built-in base templates (this may change in the future). For now, you have to create a base template yourself. Be sure to use an HTML5 doctype and include a viewport meta tag for proper responsive behaviors. Here’s an example base template:</p><figure class="highlight jinja"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        </span><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> head %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!-- Required meta tags --&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1, shrink-to-fit=no&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        </span><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> styles %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">            <span class="comment">&lt;!-- Bootstrap CSS --&gt;</span></span></span><br><span class="line"><span class="language-xml">            </span><span class="template-variable">&#123;&#123; bootstrap.load_css() &#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        </span><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">title</span>&gt;</span></span><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> title %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> %&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        </span><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!-- Your page content --&gt;</span></span></span><br><span class="line"><span class="language-xml">        </span><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> content %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        </span><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> scripts %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">            <span class="comment">&lt;!-- Optional JavaScript --&gt;</span></span></span><br><span class="line"><span class="language-xml">            </span><span class="template-variable">&#123;&#123; bootstrap.load_js() &#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        </span><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>Use this in your templates folder (suggested names are base.html or layout.html etc.), and inherit it in child templates.</p><h3 id="Macros"><a href="#Macros" class="headerlink" title="Macros"></a>Macros</h3><table><thead><tr><th>Macro</th><th>Templates Path</th><th>Description</th></tr></thead><tbody><tr><td>render_field()</td><td>bootstrap4&#x2F;form.html</td><td>Render a WTForms form field</td></tr><tr><td>render_form()</td><td>bootstrap4&#x2F;form.html</td><td>Render a WTForms form</td></tr><tr><td>render_form_row()</td><td>bootstrap4&#x2F;form.html</td><td>Render a row of a grid form</td></tr><tr><td>render_hidden_errors()</td><td>bootstrap4&#x2F;form.html</td><td>Render error messages for hidden form field</td></tr><tr><td>render_pager()</td><td>bootstrap4&#x2F;pagination.html</td><td>Render a basic Flask-SQLAlchemy pagniantion</td></tr><tr><td>render_pagination()</td><td>bootstrap4&#x2F;pagination.html</td><td>Render a standard Flask-SQLAlchemy pagination</td></tr><tr><td>render_nav_item()</td><td>bootstrap4&#x2F;nav.html</td><td>Render a navigation item</td></tr><tr><td>render_breadcrumb_item()</td><td>bootstrap4&#x2F;nav.html</td><td>Render a breadcrumb item</td></tr><tr><td>render_static()</td><td>bootstrap4&#x2F;utils.html</td><td>Render a resource reference code (i.e. <link>, <script>)</td></tr><tr><td>render_messages()</td><td>bootstrap4/utils.html</td><td>Render flashed messages send by flash() function</td></tr><tr><td>render_icon()</td><td>bootstrap4/utils.html</td><td>Render a Bootstrap icon</td></tr><tr><td>render_table()</td><td>bootstrap4/table.html</td><td>Render a table with given data</td></tr></tbody></table><p>How to use these macros? It’s quite simple, just import them from the corresponding path and call them like any other macro:</p><figure class="highlight jinja"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name">from</span> &#x27;bootstrap4/form.html&#x27; import render_form %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-variable">&#123;&#123; render_form(form) &#125;&#125;</span></span><br></pre></td></tr></table></figure><p>Notice we import Bootstrap 4 macros from the path <code>bootstrap4/...</code>, if you are using Bootstrap 5, import them from the <code>bootstrap5/...</code> path instead.</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> web development </tag>
            
            <tag> flask </tag>
            
            <tag> backend </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day 60 of 100 Days of Code</title>
      <link href="/posts/Day-60-of-100-Days-of-Code/"/>
      <url>/posts/Day-60-of-100-Days-of-Code/</url>
      
        <content type="html"><![CDATA[<style>    #intro {        text-align: center;    }</style><div id="intro">    <h2>Make POST Requests with Flask and HTML Forms</h2>    <h3>Learning Log: Day 60 of 100 Days of Code</h3>    <p>GitHub Repo: <a href="https://github.com/Freedempire/100_days_of_code.git">100_days_of_code</a></p></div><h2 id="Flask"><a href="#Flask" class="headerlink" title="Flask"></a>Flask</h2><h3 id="HTTP-Methods"><a href="#HTTP-Methods" class="headerlink" title="HTTP Methods"></a>HTTP Methods</h3><p>Web applications use different HTTP methods when accessing URLs. By default, a route only answers to <code>GET</code> requests. You can use the methods argument of the <code>route()</code> decorator to handle different HTTP methods.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> do_the_login()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> show_the_login_form()</span><br></pre></td></tr></table></figure><p>The example above keeps all methods for the route within one function, which can be useful if each part uses some common data.</p><p>You can also separate views for different methods into different functions. Flask provides a shortcut for decorating such routes with <code>get()</code>, <code>post()</code>, etc. for each common HTTP method.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&#x27;/login&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login_get</span>():</span><br><span class="line">    <span class="keyword">return</span> show_the_login_form()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">&#x27;/login&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login_post</span>():</span><br><span class="line">    <span class="keyword">return</span> do_the_login()</span><br></pre></td></tr></table></figure><p>If <code>GET</code> is present, Flask automatically adds support for the <code>HEAD</code> method and handles <code>HEAD</code> requests according to the HTTP RFC. Likewise, <code>OPTIONS</code> is automatically implemented for you.</p><h3 id="The-Request-Object"><a href="#The-Request-Object" class="headerlink" title="The Request Object"></a>The Request Object</h3><p>First of all you have to import it from the <code>flask</code> module:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br></pre></td></tr></table></figure><p>The current request method is available by using the <code>method</code> attribute. To access form data (data transmitted in a <code>POST</code> or <code>PUT</code> request) you can use the <code>form</code> attribute.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    error = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> valid_login(request.form[<span class="string">&#x27;username&#x27;</span>],</span><br><span class="line">                       request.form[<span class="string">&#x27;password&#x27;</span>]):</span><br><span class="line">            <span class="keyword">return</span> log_the_user_in(request.form[<span class="string">&#x27;username&#x27;</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            error = <span class="string">&#x27;Invalid username/password&#x27;</span></span><br><span class="line">    <span class="comment"># the code below is executed if the request method</span></span><br><span class="line">    <span class="comment"># was GET or the credentials were invalid</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;login.html&#x27;</span>, error=error)</span><br></pre></td></tr></table></figure><p>What happens if the key does not exist in the <code>form</code> attribute? In that case a special <code>KeyError</code> is raised. You can catch it like a standard <code>KeyError</code> but if you don’t do that, a HTTP 400 Bad Request error page is shown instead. So for many situations you don’t have to deal with that problem.</p><p>To access parameters submitted in the URL (<code>?key=value</code>) you can use the args attribute:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">searchword = request.args.get(<span class="string">&#x27;key&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>We recommend accessing URL parameters with <code>get</code> or by catching the <code>KeyError</code> because users might change the URL and presenting them a 400 bad request page in that case is not user friendly.</p><p>For a full list of methods and attributes of the request object, head over to the <a href="https://flask.palletsprojects.com/en/2.3.x/api/#flask.Request">Request</a> documentation.</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> web development </tag>
            
            <tag> flask </tag>
            
            <tag> backend </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day 59 of 100 Days of Code</title>
      <link href="/posts/Day-59-of-100-Days-of-Code/"/>
      <url>/posts/Day-59-of-100-Days-of-Code/</url>
      
        <content type="html"><![CDATA[<style>    #intro {        text-align: center;    }</style><div id="intro">    <h2>Blog Capstone Project Part 2 - Adding Styling</h2>    <h3>Learning Log: Day 59 of 100 Days of Code</h3>    <p>GitHub Repo: <a href="https://github.com/Freedempire/100_days_of_code.git">100_days_of_code</a></p></div><h2 id="Screenshots"><a href="#Screenshots" class="headerlink" title="Screenshots"></a>Screenshots</h2><p><img src="https://i.ibb.co/WH3RpM8/bootstrap-blog1.jpg" alt="Screenshot 1"><br><img src="https://i.ibb.co/fX6wHvv/bootstrap-blog2.jpg" alt="Screenshot 2"><br><img src="https://i.ibb.co/q58Hs1b/bootstrap-blog3.jpg" alt="Screenshot 3"></p><h2 id="Flask"><a href="#Flask" class="headerlink" title="Flask"></a>Flask</h2><h3 id="Static-Files"><a href="#Static-Files" class="headerlink" title="Static Files"></a>Static Files</h3><p>To generate URLs for static files, use the special <code>&#39;static&#39;</code> endpoint name:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url_for(<span class="string">&#x27;static&#x27;</span>, filename=<span class="string">&#x27;style.css&#x27;</span>)</span><br></pre></td></tr></table></figure><p>The file has to be stored on the filesystem as <code>static/style.css</code>.</p><h2 id="Jinja"><a href="#Jinja" class="headerlink" title="Jinja"></a>Jinja</h2><h3 id="Template-Inheritance"><a href="#Template-Inheritance" class="headerlink" title="Template Inheritance"></a>Template Inheritance</h3><p>Template inheritance allows you to build a base “skeleton” template that contains all the common elements of your site and defines <em>blocks</em> that child templates can override.</p><h4 id="Base-Template"><a href="#Base-Template" class="headerlink" title="Base Template"></a>Base Template</h4><p>This template, which we’ll call <code>base.html</code>, defines a simple HTML skeleton document that you might use for a simple two-column page. It’s the job of “child” templates to fill the empty blocks with content:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    &#123;% block head %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>&#123;% block title %&#125;&#123;% endblock %&#125; - My Webpage<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    &#123;% endblock %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;content&quot;</span>&gt;</span>&#123;% block content %&#125;&#123;% endblock %&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;footer&quot;</span>&gt;</span></span><br><span class="line">        &#123;% block footer %&#125;</span><br><span class="line">        <span class="symbol">&amp;copy;</span> Copyright 2008 by <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://domain.invalid/&quot;</span>&gt;</span>you<span class="tag">&lt;/<span class="name">a</span>&gt;</span>.</span><br><span class="line">        &#123;% endblock %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>In this example, the <code>&#123;% block %&#125;</code> tags define four blocks that child templates can fill in. All the block tag does is tell the template engine that a child template may override those placeholders in the template.</p><p>block tags can be inside other blocks such as if, but they will <em>always</em> be executed regardless of if the if block is actually rendered.</p><h4 id="Child-Template"><a href="#Child-Template" class="headerlink" title="Child Template"></a>Child Template</h4><p>A child template might look like this:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &quot;base.html&quot; %&#125;</span><br><span class="line">&#123;% block title %&#125;Index&#123;% endblock %&#125;</span><br><span class="line">&#123;% block head %&#125;</span><br><span class="line">    &#123;&#123; super() &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.important</span> &#123; <span class="attribute">color</span>: <span class="number">#336699</span>; &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Index<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;important&quot;</span>&gt;</span></span><br><span class="line">      Welcome to my awesome homepage.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p>The <code>&#123;% extends %&#125;</code> tag is the key here. It tells the template engine that this template “extends” another template. When the template system evaluates this template, it first locates the parent. The extends tag should be the <em>first</em> tag in the template. Everything before it is printed out normally and may cause confusion. Also a block will always be filled in regardless of whether the surrounding condition is evaluated to be true or false.</p><p>The filename of the template depends on the template loader. For example, the <strong>FileSystemLoader</strong> allows you to access other templates by giving the filename. You can access templates in subdirectories with a slash:</p><figure class="highlight jinja"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">extends</span></span> &quot;layout/default.html&quot; %&#125;</span></span><br></pre></td></tr></table></figure><p>But this behavior can depend on the application embedding Jinja. Note that since the child template doesn’t define the footer block, the value from the parent template is used instead.</p><p>You can’t define multiple <code>&#123;% block %&#125;</code> tags with the same name in the same template. This limitation exists because a block tag works in “both” directions. That is, a block tag doesn’t just provide a placeholder to fill - it also defines the content that fills the placeholder in the parent. If there were two similarly-named <code>&#123;% block %&#125;</code> tags in a template, that template’s parent wouldn’t know which one of the blocks’ content to use.</p><p>If you want to print a block multiple times, you can, however, use the special <em>self</em> variable and call the block with that name:</p><figure class="highlight jinja"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span></span><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> title %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> %&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="template-variable">&#123;&#123; self.title() &#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> body %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> %&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> web development </tag>
            
            <tag> flask </tag>
            
            <tag> backend </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day 58 of 100 Days of Code</title>
      <link href="/posts/Day-58-of-100-Days-of-Code/"/>
      <url>/posts/Day-58-of-100-Days-of-Code/</url>
      
        <content type="html"><![CDATA[<style>    #intro {        text-align: center;    }</style><div id="intro">    <h2>Web Foundation Bootstrap</h2>    <h3>Learning Log: Day 58 of 100 Days of Code</h3>    <p>GitHub Repo: <a href="https://github.com/Freedempire/100_days_of_code.git">100_days_of_code</a></p></div><h2 id="CSS-framework"><a href="#CSS-framework" class="headerlink" title="CSS framework"></a>CSS framework</h2><p>A CSS framework comprises several CSS stylesheets ready for use by web developers and designers.</p><p>With a CSS framework, the user has a completed CSS stylesheet, and they only have to code the HTML with accurate classes, structure, and IDs to set up a web page. The framework already has classes built-in for common website elements – footer, slider, navigation bar, hamburger menu, column-based layouts, etc.</p><h3 id="Advantages-of-using-CSS-frameworks"><a href="#Advantages-of-using-CSS-frameworks" class="headerlink" title="Advantages of using CSS frameworks"></a>Advantages of using CSS frameworks</h3><ul><li>Developers and designers can use CSS frameworks to implement various advanced features and visual elements on a website – forms, different buttons, navbars, breadcrumbs, and even clean symmetrical layouts.</li><li>CSS frameworks make creating websites compatible with multiple browsers and browser versions simple.</li><li>Since these frameworks have ready-to-use stylesheets, using them allows faster and more convenient web development. Developers can quickly generate a user-friendly and visually appealing UI that can be modified throughout a project without starting from scratch.</li></ul><h3 id="Top-5-CSS-frameworks"><a href="#Top-5-CSS-frameworks" class="headerlink" title="Top 5 CSS frameworks"></a>Top 5 CSS frameworks</h3><ol><li>Bootstrap</li><li>Tailwind CSS</li><li>Foundation</li><li>Bulma</li><li>Skeleton</li></ol><h2 id="Bootstrap"><a href="#Bootstrap" class="headerlink" title="Bootstrap"></a>Bootstrap</h2><h3 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h3><h4 id="Download"><a href="#Download" class="headerlink" title="Download"></a>Download</h4><p><a href="https://github.com/twbs/bootstrap/releases/download/v5.3.0/bootstrap-5.3.0-dist.zip">Download</a> ready-to-use compiled code for Bootstrap v5.3.0 to easily drop into your project, which includes:</p><ul><li>Compiled and minified CSS bundles (see CSS files comparison)</li><li>Compiled and minified JavaScript plugins (see JS files comparison)</li></ul><h4 id="CDN-via-jsDelivr"><a href="#CDN-via-jsDelivr" class="headerlink" title="CDN via jsDelivr"></a>CDN via jsDelivr</h4><p>Skip the download with jsDelivr to deliver cached version of Bootstrap’s compiled CSS and JS to your project.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">integrity</span>=<span class="string">&quot;sha384-9ndCyUaIbzAi2FUVXJi0CjmCapSmO7SnpJef0486qhLnuZ2cdeRhO02iuK6FUUVM&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js&quot;</span> <span class="attr">integrity</span>=<span class="string">&quot;sha384-geWF76RCwLtnZ8qwWowPQNguL3RmwHVBC9FhGdlKrxdiJJigb/j/68SIy3Te4Bkz&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Package-managers"><a href="#Package-managers" class="headerlink" title="Package managers"></a>Package managers</h4><h5 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h5><p>Install Bootstrap in your Node.js powered apps with the npm package:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install bootstrap@5.3.0</span><br></pre></td></tr></table></figure><h5 id="yarn"><a href="#yarn" class="headerlink" title="yarn"></a>yarn</h5><p>Install Bootstrap in your Node.js powered apps with the yarn package:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add bootstrap@5.3.0</span><br></pre></td></tr></table></figure><h3 id="Quick-start"><a href="#Quick-start" class="headerlink" title="Quick start"></a>Quick start</h3><ol><li><p>Create a new index.html file in your project root. Include the <code>&lt;meta name=&quot;viewport&quot;&gt;</code> tag as well for proper responsive behavior in mobile devices.</p></li><li><p>Include Bootstrap’s CSS and JS. Place the <code>&lt;link&gt;</code> tag in the <code>&lt;head&gt;</code> for our CSS, and the <code>&lt;script&gt;</code> tag for our JavaScript bundle (including Popper for positioning dropdowns, poppers, and tooltips) before the closing <code>&lt;/body&gt;</code>.<br>You can also include Popper and our JS separately. If you don’t plan to use dropdowns, popovers, or tooltips, save some kilobytes by not including Popper.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js&quot;</span> <span class="attr">integrity</span>=<span class="string">&quot;sha384-I7E8VVD/ismYTF4hNIPjVp/Zjvgyol6VFvRkX/vR+Vc4jQkC+hVqc2pM8ODewa9r&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.min.js&quot;</span> <span class="attr">integrity</span>=<span class="string">&quot;sha384-fbbOQedDUMZZ5KreZpsbe1LCZPVmfTnH7ois6mU1QK+m14rQ1l2bGBq41eYeM/fS&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Now you can start building with Bootstrap by creating your own <a href="https://getbootstrap.com/docs/5.3/layout/grid/">layout</a>, adding dozens of <a href="https://getbootstrap.com/docs/5.3/components/buttons/">components</a>, and utilizing <a href="https://getbootstrap.com/docs/5.3/examples/">our official examples</a>.</p></li></ol><h3 id="Next-steps"><a href="#Next-steps" class="headerlink" title="Next steps"></a>Next steps</h3><ul><li>Some important <a href="https://getbootstrap.com/docs/5.3/getting-started/introduction/#important-globals">global environment settings</a> that Bootstrap utilizes.</li><li>What’s included in Bootstrap in our <a href="https://getbootstrap.com/docs/5.3/getting-started/contents/">contents section</a> and the list of <a href="https://getbootstrap.com/docs/5.3/getting-started/introduction/#js-components">components that require JavaScript</a>.</li><li>Consider building with Bootstrap by <a href="https://getbootstrap.com/docs/5.3/getting-started/download/#package-managers">including the source files via package manager</a>.</li><li>To use Bootstrap as a module with <code>&lt;script type=&quot;module&quot;&gt;</code>, refer to our <a href="https://getbootstrap.com/docs/5.3/getting-started/javascript/#using-bootstrap-as-a-module">using Bootstrap as a module</a> section.</li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> web development </tag>
            
            <tag> flask </tag>
            
            <tag> backend </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day 57 of 100 Days of Code</title>
      <link href="/posts/Day-57-of-100-Days-of-Code/"/>
      <url>/posts/Day-57-of-100-Days-of-Code/</url>
      
        <content type="html"><![CDATA[<style>    #intro {        text-align: center;    }</style><div id="intro">    <h2>Templating with Jinja in Flask Applications</h2>    <h3>Learning Log: Day 57 of 100 Days of Code</h3>    <p>GitHub Repo: <a href="https://github.com/Freedempire/100_days_of_code.git">100_days_of_code</a></p></div><h2 id="Jinja"><a href="#Jinja" class="headerlink" title="Jinja"></a>Jinja</h2><p>A Jinja template is simply a text file. Jinja can generate any text-based format (HTML, XML, CSV, LaTeX, etc.). A Jinja template <em>doesn’t</em> need to have a specific extension: <code>.html</code>, <code>.xml</code>, or any other extension is just fine.</p><p>A template contains <strong>variables</strong> and&#x2F;or <strong>expressions</strong>, which get replaced with values when a template is <em>rendered</em>; and <strong>tags</strong>, which control the logic of the template. The template syntax is heavily inspired by Django and Python.</p><h3 id="A-minimal-example"><a href="#A-minimal-example" class="headerlink" title="A minimal example"></a>A minimal example</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>My Webpage<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;navigation&quot;</span>&gt;</span></span><br><span class="line">    &#123;% for item in navigation %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; item.href &#125;&#125;&quot;</span>&gt;</span>&#123;&#123; item.caption &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>My Webpage<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    &#123;&#123; a_variable &#125;&#125;</span><br><span class="line"></span><br><span class="line">    &#123;# a comment #&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>The example shows the default configuration settings. An application developer can change the syntax configuration from <code>&#123;% foo %&#125;</code> to <code>&lt;% foo %&gt;</code>, or something similar.</p><h3 id="Default-Jinja-delimiters"><a href="#Default-Jinja-delimiters" class="headerlink" title="Default Jinja delimiters"></a>Default Jinja delimiters</h3><ul><li><code>&#123;% ... %&#125;</code> for Statements</li><li><code>&#123;&#123; ... &#125;&#125;</code> for Expressions to print to the template output</li><li>&#96;&#96; for Comments not included in the template output</li></ul><h3 id="Variables"><a href="#Variables" class="headerlink" title="Variables"></a>Variables</h3><p>Template variables are defined by the context dictionary passed to the template.</p><p>You can use a dot (<code>.</code>) to access attributes of a variable in addition to the standard Python <code>__getitem__</code> “subscript” syntax (<code>[]</code>).</p><p>The following lines do the same thing:</p><figure class="highlight jinja"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-variable">&#123;&#123; foo.bar &#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-variable">&#123;&#123; foo[&#x27;bar&#x27;] &#125;&#125;</span></span><br></pre></td></tr></table></figure><p>If a variable or attribute does not exist, you will get back an <em>undefined</em> value. What you can do with that kind of value depends on the application configuration: the default behavior is to evaluate to an empty string if printed or iterated over, and to fail for every other operation.</p><h3 id="Filters"><a href="#Filters" class="headerlink" title="Filters"></a>Filters</h3><p>Variables can be modified by filters. Filters are separated from the variable by a pipe symbol (<code>|</code>) and may have optional arguments in parentheses. Multiple filters can be chained. The output of one filter is applied to the next.</p><p>For example, <code>&#123;&#123; name|striptags|title &#125;&#125;</code> will remove all HTML Tags from variable name and title-case the output (<code>title(striptags(name))</code>).</p><p>The <a href="https://jinja.palletsprojects.com/en/3.0.x/templates/#builtin-filters">List of Builtin Filters</a> describes all the builtin filters.</p><h3 id="Escaping"><a href="#Escaping" class="headerlink" title="Escaping"></a>Escaping</h3><p>It is sometimes necessary to have Jinja ignore parts it would otherwise handle as variables or blocks.</p><p>The easiest way to output a literal variable delimiter is by using a variable expression <code>&#123;&#123; '&#123;&#123;' &#125;&#125;</code>.</p><p>For bigger sections, it makes sense to mark a block raw.</p><figure class="highlight jinja"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name">raw</span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> item <span class="keyword">in</span> seq %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><span class="template-variable">&#123;&#123; item &#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">endfor</span></span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">endraw</span> %&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> web development </tag>
            
            <tag> flask </tag>
            
            <tag> backend </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day 56 of 100 Days of Code</title>
      <link href="/posts/Day-56-of-100-Days-of-Code/"/>
      <url>/posts/Day-56-of-100-Days-of-Code/</url>
      
        <content type="html"><![CDATA[<style>    #intro {        text-align: center;    }</style><div id="intro">    <h2>Rendering HTML/Static files and Using Website Templates</h2>    <h3>Learning Log: Day 56 of 100 Days of Code</h3>    <p>GitHub Repo: <a href="https://github.com/Freedempire/100_days_of_code.git">100_days_of_code</a></p></div><h2 id="Flask"><a href="#Flask" class="headerlink" title="Flask"></a>Flask</h2><h3 id="Static-Files"><a href="#Static-Files" class="headerlink" title="Static Files"></a>Static Files</h3><p>Dynamic web applications also need static files. That’s usually where the CSS and JavaScript files are coming from. Just create a folder called <code>static</code> in your package or next to your module and it will be available at <code>/static</code> on the application.</p><p>To generate URLs for static files, use the special <code>&#39;static&#39;</code> endpoint name:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url_for(<span class="string">&#x27;static&#x27;</span>, filename=<span class="string">&#x27;style.css&#x27;</span>)</span><br></pre></td></tr></table></figure><p>The file has to be stored on the filesystem as <code>static/style.css</code>.</p><h3 id="Rendering-Templates"><a href="#Rendering-Templates" class="headerlink" title="Rendering Templates"></a>Rendering Templates</h3><p>Generating HTML from within Python is not fun, and actually pretty cumbersome because you have to do the HTML escaping on your own to keep the application secure. Because of that Flask configures the Jinja2 template engine for you automatically.</p><p>Templates can be used to generate any type of text file. For web applications, you’ll primarily be generating HTML pages, but you can also generate markdown, plain text for emails, and anything else.</p><p>To render a template you can use the <code>render_template()</code> method. All you have to do is provide the name of the template and the variables you want to pass to the template engine as <em>keyword arguments</em>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> render_template</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/hello/&#x27;</span></span>)</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/hello/&lt;name&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>(<span class="params">name=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;hello.html&#x27;</span>, name=name)</span><br></pre></td></tr></table></figure><p>Flask will look for templates in the templates folder. So if your application is a module, this folder is next to that module, if it’s a package it’s actually inside your package.</p><p>For templates you can use the full power of Jinja2 templates. Head over to the official <a href="https://jinja.palletsprojects.com/templates/">Jinja2 Template Documentation</a> for more information.</p><p>Here is an example template:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello from Flask<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">&#123;% if name %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello &#123;&#123; name &#125;&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, World!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>Inside templates you also have access to the config, request, session and g objects as well as the <code>url_for()</code> and <code>get_flashed_messages()</code> functions.</p><p>Templates are especially useful if inheritance is used. If you want to know how that works, see <a href="https://flask.palletsprojects.com/en/2.3.x/patterns/templateinheritance/">Template Inheritance</a>. Basically template inheritance makes it possible to keep certain elements on each page (like header, navigation and footer).</p><p>Automatic escaping is enabled, so if name contains HTML it will be escaped automatically. If you can trust a variable and you know that it will be safe HTML (for example because it came from a module that converts wiki markup to HTML) you can mark it as safe by using the Markup class or by using the <code>|safe</code> filter in the template.</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> web development </tag>
            
            <tag> flask </tag>
            
            <tag> backend </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day 55 of 100 Days of Code</title>
      <link href="/posts/Day-55-of-100-Days-of-Code/"/>
      <url>/posts/Day-55-of-100-Days-of-Code/</url>
      
        <content type="html"><![CDATA[<style>    #intro {        text-align: center;    }</style><div id="intro">    <h2>HTML & URL Parsing in Flask</h2>    <h3>Learning Log: Day 55 of 100 Days of Code</h3>    <p>GitHub Repo: <a href="https://github.com/Freedempire/100_days_of_code.git">100_days_of_code</a></p></div><h2 id="Flask"><a href="#Flask" class="headerlink" title="Flask"></a>Flask</h2><h3 id="A-minimal-application"><a href="#A-minimal-application" class="headerlink" title="A minimal application"></a>A minimal application</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">home</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Index&#x27;</span></span><br><span class="line"></span><br><span class="line">app.run()</span><br></pre></td></tr></table></figure><p>To run the application in CLI, use the <code>flask</code> command or <code>python -m flask</code>. You need to tell the Flask where your application is with the –app option.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flask --app hello run</span><br></pre></td></tr></table></figure><p>As a shortcut, if the file is named <code>app.py</code> or <code>wsgi.py</code>, you don’t have to use <code>--app</code>.</p><h3 id="Externally-visible-server"><a href="#Externally-visible-server" class="headerlink" title="Externally visible server"></a>Externally visible server</h3><p>If you have the debugger disabled or trust the users on your network, you can make the server publicly available simply by adding <code>--host=0.0.0.0</code> to the command line:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flask run --host=0.0.0.0</span><br></pre></td></tr></table></figure><p>This tells your operating system to listen on all public IPs.</p><h3 id="Debug-mode"><a href="#Debug-mode" class="headerlink" title="Debug mode"></a>Debug mode</h3><p>To enable debug mode, use the <code>--debug</code> option.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flask --app hello run --debug</span><br></pre></td></tr></table></figure><h3 id="HTML-escaping"><a href="#HTML-escaping" class="headerlink" title="HTML escaping"></a>HTML escaping</h3><p>When returning HTML (the default response type in Flask), any user-provided values rendered in the output must be <em>escaped</em> to protect from injection attacks. HTML templates rendered with <strong>Jinja</strong> will do this automatically.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> markupsafe <span class="keyword">import</span> escape</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&lt;name&gt;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;Hello, <span class="subst">&#123;escape(name)&#125;</span>!&quot;</span></span><br></pre></td></tr></table></figure><h3 id="Routing"><a href="#Routing" class="headerlink" title="Routing"></a>Routing</h3><p>Use the <code>route()</code> decorator to bind a function to a URL.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Index Page&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/hello&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello, World&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="Variable-rules"><a href="#Variable-rules" class="headerlink" title="Variable rules"></a>Variable rules</h3><p>You can add variable sections to a URL by marking sections with <code>&lt;variable_name&gt;</code>. Your function then receives the <code>&lt;variable_name&gt;</code> as a <em>keyword argument</em>. Optionally, you can use a converter to specify the type of the argument like <code>&lt;converter:variable_name&gt;</code>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> markupsafe <span class="keyword">import</span> escape</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/user/&lt;username&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_user_profile</span>(<span class="params">username</span>):</span><br><span class="line">    <span class="comment"># show the user profile for that user</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&#x27;User <span class="subst">&#123;escape(username)&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/post/&lt;int:post_id&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_post</span>(<span class="params">post_id</span>):</span><br><span class="line">    <span class="comment"># show the post with the given id, the id is an integer</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&#x27;Post <span class="subst">&#123;post_id&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/path/&lt;path:subpath&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_subpath</span>(<span class="params">subpath</span>):</span><br><span class="line">    <span class="comment"># show the subpath after /path/</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&#x27;Subpath <span class="subst">&#123;escape(subpath)&#125;</span>&#x27;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>Converter type</th><th>Explanation</th></tr></thead><tbody><tr><td>string</td><td>(default) accepts any text without a slash</td></tr><tr><td>int</td><td>accepts positive integers</td></tr><tr><td>float</td><td>accepts positive floating point values</td></tr><tr><td>path</td><td>like string but also accepts slashes</td></tr><tr><td>uuid</td><td>accepts UUID strings</td></tr></tbody></table><h2 id="Decorators-in-Python"><a href="#Decorators-in-Python" class="headerlink" title="Decorators in Python"></a>Decorators in Python</h2><p>Decorators allow programmers to modify the behavior of a function or class without permanently modifying it.</p><h3 id="First-class-objects"><a href="#First-class-objects" class="headerlink" title="First class objects"></a>First class objects</h3><p>In Python, functions are first class objects.</p><p>Properties of first class functions:</p><ul><li>A function is an instance of the Object type.</li><li>You can store the function in a variable.</li><li>You can pass the function as a parameter to another function.</li><li>You can return the function from a function.</li><li>You can store them in data structures such as hash tables, lists, etc.</li></ul><h3 id="Decorators"><a href="#Decorators" class="headerlink" title="Decorators"></a>Decorators</h3><p>In Decorators, functions are taken as the argument into another function and then called inside the wrapper function.</p><p>Syntax for Decorator:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@gfg_decorator</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_decorator</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Gfg&quot;</span>)</span><br></pre></td></tr></table></figure><p>Above code is equivalent to:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hello_decorator</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Gfg&quot;</span>)</span><br><span class="line">    </span><br><span class="line">hello_decorator = gfg_decorator(hello_decorator)</span><br></pre></td></tr></table></figure><h3 id="Decorate-a-function-with-arguments"><a href="#Decorate-a-function-with-arguments" class="headerlink" title="Decorate a function with arguments"></a>Decorate a function with arguments</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hello_decorator</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner1</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;before Execution&quot;</span>)</span><br><span class="line">        <span class="comment"># getting the returned value</span></span><br><span class="line">        returned_value = func(*args, **kwargs)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;after Execution&quot;</span>)</span><br><span class="line">        <span class="comment"># returning the value to the original frame</span></span><br><span class="line">        <span class="keyword">return</span> returned_value</span><br><span class="line">    <span class="keyword">return</span> inner1</span><br><span class="line"></span><br><span class="line"><span class="comment"># adding decorator to the function</span></span><br><span class="line"><span class="meta">@hello_decorator</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sum_two_numbers</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Inside the function&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br></pre></td></tr></table></figure><h3 id="Chaining-Decorators"><a href="#Chaining-Decorators" class="headerlink" title="Chaining Decorators"></a>Chaining Decorators</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">decor1</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">        x = func()</span><br><span class="line">        <span class="keyword">return</span> x * x</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decor2</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">        x = func()</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * x</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"> </span><br><span class="line"><span class="meta">@decor1</span></span><br><span class="line"><span class="meta">@decor2</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">num1</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="number">10</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">@decor2</span></span><br><span class="line"><span class="meta">@decor1</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">num2</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="number">10</span></span><br><span class="line">   </span><br><span class="line"><span class="built_in">print</span>(num1()) <span class="comment"># 400</span></span><br><span class="line"><span class="built_in">print</span>(num2()) <span class="comment"># 200</span></span><br></pre></td></tr></table></figure><p>The above example is similar to calling the function as:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">decor1(decor2(num1))</span><br><span class="line">decor2(decor1(num2))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> web development </tag>
            
            <tag> flask </tag>
            
            <tag> backend </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day 54 of 100 Days of Code</title>
      <link href="/posts/Day-54-of-100-Days-of-Code/"/>
      <url>/posts/Day-54-of-100-Days-of-Code/</url>
      
        <content type="html"><![CDATA[<style>    #intro {        text-align: center;    }</style><div id="intro">    <h2>Web Development with Flask</h2>    <h3>Learning Log: Day 54 of 100 Days of Code</h3>    <p>GitHub Repo: <a href="https://github.com/Freedempire/100_days_of_code.git">100_days_of_code</a></p></div><h2 id="Understanding-backend-web-development"><a href="#Understanding-backend-web-development" class="headerlink" title="Understanding backend web development"></a>Understanding backend web development</h2><p>Full Stack &#x3D; Front End + Back End</p><h3 id="Front-end"><a href="#Front-end" class="headerlink" title="Front end"></a>Front end</h3><ul><li>HTML: gives website structure</li><li>CSS: gives style</li><li>JavaScript: allows to have interactivity</li><li>Frameworks: Angular, React</li></ul><h3 id="Back-end"><a href="#Back-end" class="headerlink" title="Back end"></a>Back end</h3><ul><li>Can be created by different languages, e.g. Java, JavsScript, Python, Ruby, etc.</li><li>Three components: client, server, database</li><li>Frameworks: Node.js, Flask, Django</li></ul><h2 id="Key-difference-between-library-and-framework"><a href="#Key-difference-between-library-and-framework" class="headerlink" title="Key difference between library and framework"></a>Key difference between library and framework</h2><p>The <strong>Inversion of Control</strong> (IoC) describes the difference between a library and a framework.</p><p>By using a library, you control the flow of the program. The library can be invoked whenever and wherever you like. Contrary to this, when you use a framework, the flow is controlled by the framework. The framework instructs you where to put your code, but it will call your code as required. Simply put, our code calls the library’s code, but in a framework, it’s the framework’s code that calls our code as shown in the below diagram.</p><p>Developers can invoke libraries to perform specific tasks by using components, classes, and methods. A framework, however, already provides code to perform common tasks and uses code provided by a developer for custom functionality.</p><h2 id="Creating-new-empty-files-at-CML"><a href="#Creating-new-empty-files-at-CML" class="headerlink" title="Creating new empty files at CML"></a>Creating new empty files at CML</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> . &gt; filename</span><br></pre></td></tr></table></figure><h2 id="Python-decorator"><a href="#Python-decorator" class="headerlink" title="Python decorator"></a>Python decorator</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">decorator_function</span>(<span class="params">function</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper_function</span>():</span><br><span class="line">        <span class="comment"># additional functionality</span></span><br><span class="line">        function()</span><br><span class="line">        <span class="comment"># additional functionality</span></span><br><span class="line">    <span class="keyword">return</span> wrapper_function</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> web development </tag>
            
            <tag> flask </tag>
            
            <tag> backend </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《天道》詩賞析</title>
      <link href="/posts/%E3%80%8A%E5%A4%A9%E9%81%93%E3%80%8B%E8%A9%A9%E8%B3%9E%E6%9E%90/"/>
      <url>/posts/%E3%80%8A%E5%A4%A9%E9%81%93%E3%80%8B%E8%A9%A9%E8%B3%9E%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<style>    #intro {        font-family: Noto Serif TC;        text-align: center;        font-size: 1.3em;    }    #intro h2 {        margin-bottom: 0;    }    #intro .small.gray {        font-size: 1rem;        color: gray;    }    #article-container {        font-family: Noto Serif TC;        font-size: 1.3em;    }</style><div id="intro">    <h2>天道</h2>    <p>        <span class="small gray">五代·馮道</span><br>        <span class="small gray">五言律詩</span><br>        <span>窮達皆由命，何勞發嘆聲。</span><br>        <span>但知行好事，莫要問前程。</span><br>        <span>冬去冰須泮，春來草自生。</span><br>        <span>請君觀此理，天道甚分明。</span><br>    </p></div><h2 id="作者簡介"><a href="#作者簡介" class="headerlink" title="作者簡介"></a>作者簡介</h2><p>生卒：公元882—954年<br>介紹：五代時瀛州景城（今河北河間東）人，字可道，自號長樂老。唐末為劉守光幽州掾。後唐莊宗同光元年（923年）為翰林學士，遷中書舍人、戶部侍郎。明宗天成元年（926年），拜端明殿學士，遷中書侍郎、刑部尚書平章事，改門下侍郎，戶部、吏部尚書，集賢殿弘文館大學士，加尚書左仆射。末帝立，出為同州節度使，入為司空。後晉時，守司空同中書門下平章事。少帝時，進封燕國公。後又歷仕契丹、後漢、後周。廣順初，拜太師兼中書令。顯德元年（954年）卒。追封瀛王，謚文懿。道歷事四朝，在相位20余年，生平見新、舊《五代史》本傳。道好學能文，暇時唯以披誦吟諷為事。《舊五代史》謂其文「典麗之外，義含古道」。吳處厚稱其「詩雖淺近而多諳理」（《青箱雜記》卷七）。《宋史·藝文誌七》著錄《馮道集》6卷、《河間集》5卷、《詩集》10卷，今皆佚。《全唐詩》存詩5首及斷句若干，《全唐詩外編》及《全唐詩續拾》補詩2首、斷句1。</p><h2 id="賞析"><a href="#賞析" class="headerlink" title="賞析"></a>賞析</h2><p>馮道歷事五朝（後唐、後晉、契丹（滅後晉後定國號「大遼」）、後漢及後周）、八姓（後唐李存勗（本姓朱邪）、李嗣源（本姓不詳）及其養子李從珂（本姓王）、後晉石氏、遼國耶律氏、後漢劉氏、後周郭威及其養子柴榮）、十一帝（後唐四代（莊宗李存勗、明宗嗣源、閔帝從厚及末帝從珂）、後晉兩代（高祖石敬瑭及出帝重貴）、遼一代（太宗耶律德光）、後漢兩代（高祖劉知遠及隱帝承祐）、後周兩代（太祖郭威及世宗柴榮）），「累朝不離將相、三公、三師之位」，前後為官四十多年，堪稱中國官場史上的不倒翁。贊其如薛居正者，說他事親濟民、提攜賢良，是「以持重鎮俗為己任」之垂範；謗其如歐陽修者，則認為他賣主求榮、反復無常，是一個「不知廉恥」的典型。忠臣也好，奸佞也罷，如仲尼之賢，尚有叔孫武叔之毀，更何況是馮道呢？</p><p>馮道能在這興亡接踵之世，不僅歷仕五朝、長居相位，而且在事親、濟民、主政、提攜賢良上的表現，也都符合傳統中君子、聖賢的行為標準，更是與其同時代的人心目中的模範。他的人生之「道」是什麼？也許，我們可以在這首《天道》中，窺知一二。</p><p>詩歌的寫作背景已無可考證，以議論入詩，語言淺近質樸，明白如話，卻含蘊頗深。</p><p>作者說，人生的窮困或是顯達皆由上天註定，不必滿身怨悱牢騷、長吁短嘆。那又應該怎樣做呢？頷聯便給予了回答：只要（自己）行端履正，所作所為於國有益、與民有利，個人的得失榮辱又何須計較呢？</p><p>頸聯又做了一個極其形象的類比，正如冬去春來，冰消草生，日月輪轉，萬物更新，以此觀之，天道自明。</p><p>寥寥數語就將抽象的自然之道、人生之理闡述得由淺入深而又發人深省，既有儒家循禮守節的風度，也不乏道家的不爭無為的心境。「但知行好事，莫要問前程。」也就此成了人們安本分、守本心、以不變應萬變的至理名言。</p><p>事實上，作者是這樣說的，也是這樣做的。</p><p>馮道出身耕讀，品性淳厚，少有才名，勤奮好學，即使大雪擁戶、塵垢滿身，依然安貧樂道。初登仕途，為燕王劉守光的參軍，他身先士卒，與士兵同甘共苦——「居一茅庵，與從人同器而食，臥則芻槁一束，其心晏如也」。哪怕是後來出將入相、位居翰林，適逢饑饉，他也能傾盡所有，開倉濟民，甚至幫助老弱，深夜負薪耕田，「不以為德」。若不是朝堂之上他執筆踟躕、正言直諫，恐怕大將郭崇韜早已身首異處，哪來的後唐盛景呢？</p><p>「莫為危時便愴神，前程往往有期因。須知海嶽歸明主，未必乾坤陷吉人。道德幾時曾去世，舟車何處不通津？但教方寸無諸惡，狼虎叢中也立身。」在他的另一首詩《偶作》中，我們可以看到與本詩幾乎相同的人生態度，馮道的個人品德、為政操守之高尚是毋庸置疑的。</p><p>在那個虎狼環伺、動蕩不安的歲月裏，士大夫們大多循規蹈矩，固守著「不求兼濟，但求獨善」的禮法原則，選擇屈就一隅、隱逸山野，用最溫和的抗爭方式，保持著人格的潔凈與獨立，雖然明哲保身，卻也無功於世。可馮道呢，他沒有置身事外，而是積極入世，救民水火，以自己的恪盡職守，去彌合戰爭帶給萬千百姓的創傷。無可否認，馮道轉事多主，稱臣胡夷（契丹），於兩宋和後世看來，確無氣節可言。但後人若以太平盛世時的道德標准，去審視一個連混世保身都要用盡全力的時代，是不是有失公允呢？</p><p>他沒有忠於一朝一君，卻忠於了蒼生黎民，恪守了自己心中的道——心存善念，順勢而為，但行好事，不問前程。和那些明哲保身、空老林泉的「君子」相較，誰才是真正的小人呢？正像馮道在《自敘》中所寫：「所願者，下不欺於地，中不欺於人，上不欺於天」——請君觀此理，天道甚分明。</p>]]></content>
      
      
      <categories>
          
          <category> literature </category>
          
      </categories>
      
      
        <tags>
            
            <tag> poem </tag>
            
            <tag> classics </tag>
            
            <tag> literature </tag>
            
            <tag> 馮道 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>A Simple Blackjack Program</title>
      <link href="/posts/A-Simple-Blackjack-Program/"/>
      <url>/posts/A-Simple-Blackjack-Program/</url>
      
        <content type="html"><![CDATA[<div align="center"><h2>Simple Blackjack</h2><h3>A CLI single-player blackjack program</h3></div><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> _     _            _    _            _</span><br><span class="line">| |   | |          | |  (_)          | |      ___   ___ </span><br><span class="line">| |__ | | __ _  ___| | ___  __ _  ___| | __  |A  | |K  |</span><br><span class="line">| &#x27;_ \| |/ _` |/ __| |/ / |/ _` |/ __| |/ /  | ♠ | | ♦ |</span><br><span class="line">| |_) | | (_| | (__|   &lt;| | (_| | (__|   &lt;   |__A| |__K|</span><br><span class="line">|_.__/|_|\__,_|\___|_|\_\ |\__,_|\___|_|\_\</span><br><span class="line">                       _/ |</span><br><span class="line">                      |__/</span><br></pre></td></tr></table></figure><h2 id="GitHub-repository"><a href="#GitHub-repository" class="headerlink" title="GitHub repository"></a>GitHub repository</h2><p>Click <a href="https://github.com/Freedempire/simple_blackjack">here</a> for the repository.</p><h2 id="Screenshots"><a href="#Screenshots" class="headerlink" title="Screenshots"></a>Screenshots</h2><p><img src="https://i.ibb.co/7KR58JV/simple-blackjack-1.png" alt="screenshot 1"><br><img src="https://i.ibb.co/4sKtmSp/simple-blackjack-2.png" alt="screenshot 2"><br><img src="https://i.ibb.co/thbDkJ5/simple-blackjack-3.png" alt="screenshot 3"><br><img src="https://i.ibb.co/Jd3WxB4/simple-blackjack-4.png" alt="screenshot 4"><br><img src="https://i.ibb.co/TTZF35k/simple-blackjack-5.png" alt="screenshot 5"></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> blackjack </tag>
            
            <tag> cli </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kiama Beach</title>
      <link href="/posts/Kiama-Beach/"/>
      <url>/posts/Kiama-Beach/</url>
      
        <content type="html"><![CDATA[<div class="gallery">    <div class="fj-gallery lazyload data" data-rowHeight="220" data-limit="5">    <span class="gallery-data">[{"url":"https://i.ibb.co/1MD2kWR/PXL-20230611-014928037.jpg","alt":""},{"url":"https://i.ibb.co/SsCH16S/PXL-20230611-011358421.jpg","alt":""},{"url":"https://i.ibb.co/g6TwnQF/PXL-20230611-011409738.jpg","alt":""},{"url":"https://i.ibb.co/Bj3j8LK/PXL-20230611-011839234-MP.jpg","alt":""},{"url":"https://i.ibb.co/M6LGDbf/PXL-20230611-011843134-MP.jpg","alt":""},{"url":"https://i.ibb.co/XLr86ZK/PXL-20230611-011915355.jpg","alt":""},{"url":"https://i.ibb.co/tqv62ds/PXL-20230611-012813274.jpg","alt":""},{"url":"https://i.ibb.co/HTFfT5r/PXL-20230611-012929199-MP.jpg","alt":""},{"url":"https://i.ibb.co/2ddgj2N/PXL-20230611-013056918-MP.jpg","alt":""},{"url":"https://i.ibb.co/Tv0DptM/PXL-20230611-013100268-MP.jpg","alt":""},{"url":"https://i.ibb.co/n1c26Cg/PXL-20230611-013505523.jpg","alt":""},{"url":"https://i.ibb.co/tz04sGk/PXL-20230611-013844745.jpg","alt":""},{"url":"https://i.ibb.co/XbFqnGt/PXL-20230611-014048250-MP.jpg","alt":""},{"url":"https://i.ibb.co/zPpWhYf/PXL-20230611-014143996-MP.jpg","alt":""},{"url":"https://i.ibb.co/T2wtw71/PXL-20230611-014717282-MP.jpg","alt":""}]</span>    </div>    <button class="gallery-load-more"><span>Load More</span><i class="fa-solid fa-arrow-down"></i></button>    </div>]]></content>
      
      
      <categories>
          
          <category> gallery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gallery </tag>
            
            <tag> beach </tag>
            
            <tag> kiama </tag>
            
            <tag> scenery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Build Your Own Password Manager with Python</title>
      <link href="/posts/Build-Your-Own-Password-Manager-with-Python/"/>
      <url>/posts/Build-Your-Own-Password-Manager-with-Python/</url>
      
        <content type="html"><![CDATA[<div align="center"><img src="https://i.ibb.co/qyjfYBf/cyber-crime.png" width="40%" height="40%" alt="logo" /><h2>Password Manager</h2><h3>A simple desktop password management tool</h3></div><p>The <strong>Password Manager</strong> (<a href="https://github.com/Freedempire/PasswordManager/blob/master/README.md">github repo</a>) is a simple <em>windows</em> desktop application that allows users to manage their passwords securely and easily. It uses <a href="https://en.wikipedia.org/wiki/Scrypt">scrypt</a> password-based key derivation function from standard package <a href="https://docs.python.org/3/library/hashlib.html">hashlib</a> for hashing the master password for each user of the app, and stores the hash value in a database. The password records to be managed are encrypted with unique salt using <a href="https://cryptography.io/en/latest/fernet/">Fernet</a> from <a href="https://pypi.org/project/cryptography/">cryptography</a> package.</p><h2 id="Screenshots"><a href="#Screenshots" class="headerlink" title="Screenshots"></a>Screenshots</h2><h3 id="Login-x2F-Signup-Frame"><a href="#Login-x2F-Signup-Frame" class="headerlink" title="Login &#x2F; Signup Frame"></a>Login &#x2F; Signup Frame</h3><p><img src="https://i.ibb.co/YLXjvcQ/screenshot-login.png" alt="login"></p><h3 id="Password-Entries-Frame"><a href="#Password-Entries-Frame" class="headerlink" title="Password Entries Frame"></a>Password Entries Frame</h3><p><img src="https://i.ibb.co/hVKDhNY/screenshot-passwords.png" alt="passwords"></p><h2 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h2><ul><li><strong>Multiple</strong> users can use the app, each with their own password and unique salt.</li><li>Master password is hashed using <strong>scrypt</strong> and stored in database.</li><li>Password records are encrypted with unique salt using <code>Fernet</code> from <code>cryptography</code> package.</li><li>Records can be easily <strong>searched</strong> and <strong>manipulated</strong>.</li><li>App can generate <strong>random</strong> passwords triggered by typing ‘[random]’ in the password input box.</li></ul><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><ol><li>Clone the repository to your local machine using <code>git clone https://github.com/Freedempire/PasswordManager.git</code></li><li>Install the required dependencies using <code>pip install -r requirements.txt</code></li><li>Run the app using <code>python pmapp.py</code></li></ol><h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><ol><li>Create a new user account by entering a new username and password then clicking on the “Sign Up” button and finish the password confirmation.</li><li>Log in to the app using your username and password then clicking on the “Log In” button.</li><li>To add a new password record, fill in the required details then click on the “Add” button.</li><li>To edit a password record, first double-click the record from the list and make modifications as you wish, finally click on the “Update” button.</li><li>To delete a password record, double-click the record from the list and then click on the “Delete” button.</li><li>To generate a random password, simply type in ‘[random]’ in the Password input box of the details section, then press <kbd>Tab</kbd> or <kbd>Enter</kbd> to trigger the auto generation.</li><li>You can also use <kbd>Tab</kbd> or <kbd>Enter</kbd> to jump from one input box to the next while editing password entry.</li><li>The “Clear” button can be used to clear all inputs in the input boxes. It also clears the current selection status, i.e. the status shows which has been lastly double-clicked.</li></ol><h2 id="Security"><a href="#Security" class="headerlink" title="Security"></a>Security</h2><p>This app takes security seriously and implements several measures to ensure the safety of user data. The use of scrypt for hashing the master password and unique salt with Fernet for encrypting the password records provide strong protection against brute force and dictionary attacks. Additionally, the app does not store any plaintext passwords or the master key, further reducing the risk of data breaches.</p><h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p>This project is licensed under the MIT License - see the <a href="https://opensource.org/license/mit/">LICENSE</a> file for details.</p><p>Copyright © Freedempire. All rights reserved.</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> password </tag>
            
            <tag> cryptography </tag>
            
            <tag> tkinter </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
